
garage_door_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004cec  08004cec  00014cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dcc  08004dcc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004dcc  08004dcc  00014dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dd4  08004dd4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dd4  08004dd4  00014dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dd8  08004dd8  00014dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000069c  2000005c  08004e38  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  08004e38  000206f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fb52  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002253  00000000  00000000  0002fc21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce8  00000000  00000000  00031e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f3  00000000  00000000  00032b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027611  00000000  00000000  00033553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001166a  00000000  00000000  0005ab64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efc76  00000000  00000000  0006c1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039f0  00000000  00000000  0015be44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0015f834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004cd4 	.word	0x08004cd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004cd4 	.word	0x08004cd4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fc6c 	bl	8000e5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f83b 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f909 	bl	80007a0 <MX_GPIO_Init>
//  MX_SPI3_Init();
  MX_I2C2_Init();
 800058e:	f000 f899 	bl	80006c4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000592:	f000 f8d5 	bl	8000740 <MX_USART1_UART_Init>
//  HAL_UART_Transmit(&huart1,accel_msg2,sizeof(accel_msg2),1000);
//  BSP_ACCELERO_Init();
//  HAL_UART_Transmit(&huart1,accel_msg3,sizeof(accel_msg3),1000);

  //START TOF SENSOR
  HAL_GPIO_WritePin(TOF_RESET_GPIO_Port,TOF_RESET_Pin,GPIO_PIN_SET);
 8000596:	2201      	movs	r2, #1
 8000598:	2140      	movs	r1, #64	; 0x40
 800059a:	4813      	ldr	r0, [pc, #76]	; (80005e8 <main+0x6c>)
 800059c:	f000 ffb4 	bl	8001508 <HAL_GPIO_WritePin>


  //Start the measure of tof
  startToF();
 80005a0:	f000 f956 	bl	8000850 <startToF>
  int distance=0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  getDistance(&distance);
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 f968 	bl	8000880 <getDistance>
	  startToF();
 80005b0:	f000 f94e 	bl	8000850 <startToF>

	  setSensor("Time of flight");
 80005b4:	480d      	ldr	r0, [pc, #52]	; (80005ec <main+0x70>)
 80005b6:	f000 fb0b 	bl	8000bd0 <setSensor>
	  setDataInt("distance",distance);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4619      	mov	r1, r3
 80005be:	480c      	ldr	r0, [pc, #48]	; (80005f0 <main+0x74>)
 80005c0:	f000 fb8e 	bl	8000ce0 <setDataInt>
	  snprintf(str_dist, 100, "DISTANCE = %d\n\r", distance);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <main+0x78>)
 80005c8:	2164      	movs	r1, #100	; 0x64
 80005ca:	480b      	ldr	r0, [pc, #44]	; (80005f8 <main+0x7c>)
 80005cc:	f003 fe9a 	bl	8004304 <sniprintf>
	  HAL_UART_Transmit(&huart1, ( uint8_t *)str_dist, sizeof(str_dist), 1000);
 80005d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d4:	2264      	movs	r2, #100	; 0x64
 80005d6:	4908      	ldr	r1, [pc, #32]	; (80005f8 <main+0x7c>)
 80005d8:	4808      	ldr	r0, [pc, #32]	; (80005fc <main+0x80>)
 80005da:	f003 f93b 	bl	8003854 <HAL_UART_Transmit>
//	  snprintf(str_tmp,100," TEMPERATURE = %d.%02d\n\r", tmpInt1, tmpInt2);
//	  HAL_UART_Transmit(&huart1,( uint8_t *)str_tmp,sizeof(str_tmp),1000);
//
//	  snprintf(str_accel,100," ACCELERATION = %i\n\r", accel_value);
//	  HAL_UART_Transmit(&huart1,( uint8_t *)str_accel,sizeof(str_accel),1000);
	  HAL_Delay(500);
 80005de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e2:	f000 fcb1 	bl	8000f48 <HAL_Delay>
  {
 80005e6:	e7df      	b.n	80005a8 <main+0x2c>
 80005e8:	48000800 	.word	0x48000800
 80005ec:	08004cec 	.word	0x08004cec
 80005f0:	08004cfc 	.word	0x08004cfc
 80005f4:	08004d08 	.word	0x08004d08
 80005f8:	20000154 	.word	0x20000154
 80005fc:	20000078 	.word	0x20000078

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b096      	sub	sp, #88	; 0x58
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	2244      	movs	r2, #68	; 0x44
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fecc 	bl	80043ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	463b      	mov	r3, r7
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000622:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000626:	f001 fda5 	bl	8002174 <HAL_PWREx_ControlVoltageScaling>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000630:	f000 f908 	bl	8000844 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000634:	f001 fd80 	bl	8002138 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000638:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <SystemClock_Config+0xc0>)
 800063a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800063e:	4a20      	ldr	r2, [pc, #128]	; (80006c0 <SystemClock_Config+0xc0>)
 8000640:	f023 0318 	bic.w	r3, r3, #24
 8000644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000648:	2314      	movs	r3, #20
 800064a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000658:	2360      	movs	r3, #96	; 0x60
 800065a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000660:	2301      	movs	r3, #1
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000668:	2328      	movs	r3, #40	; 0x28
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800066c:	2307      	movs	r3, #7
 800066e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fdcf 	bl	8002220 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000688:	f000 f8dc 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2303      	movs	r3, #3
 8000692:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	2104      	movs	r1, #4
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 f997 	bl	80029d8 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006b0:	f000 f8c8 	bl	8000844 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006b4:	f002 fe9e 	bl	80033f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006b8:	bf00      	nop
 80006ba:	3758      	adds	r7, #88	; 0x58
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000

080006c4 <MX_I2C2_Init>:
  * @param None
  * @retval None
  */

static void MX_I2C2_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <MX_I2C2_Init+0x74>)
 80006ca:	4a1c      	ldr	r2, [pc, #112]	; (800073c <MX_I2C2_Init+0x78>)
 80006cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80006ce:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <MX_I2C2_Init+0x74>)
 80006d0:	f640 6214 	movw	r2, #3604	; 0xe14
 80006d4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006d6:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_I2C2_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_I2C2_Init+0x74>)
 80006de:	2201      	movs	r2, #1
 80006e0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_I2C2_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_I2C2_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_I2C2_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f4:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_I2C2_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_I2C2_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <MX_I2C2_Init+0x74>)
 8000702:	f000 ff3c 	bl	800157e <HAL_I2C_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800070c:	f000 f89a 	bl	8000844 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000710:	2100      	movs	r1, #0
 8000712:	4809      	ldr	r0, [pc, #36]	; (8000738 <MX_I2C2_Init+0x74>)
 8000714:	f001 fc78 	bl	8002008 <HAL_I2CEx_ConfigAnalogFilter>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800071e:	f000 f891 	bl	8000844 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000722:	2100      	movs	r1, #0
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_I2C2_Init+0x74>)
 8000726:	f001 fcba 	bl	800209e <HAL_I2CEx_ConfigDigitalFilter>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000730:	f000 f888 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000100 	.word	0x20000100
 800073c:	40005800 	.word	0x40005800

08000740 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000746:	4a15      	ldr	r2, [pc, #84]	; (800079c <MX_USART1_UART_Init+0x5c>)
 8000748:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_USART1_UART_Init+0x58>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_USART1_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_USART1_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_USART1_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000784:	f003 f818 	bl	80037b8 <HAL_UART_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800078e:	f000 f859 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000078 	.word	0x20000078
 800079c:	40013800 	.word	0x40013800

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_GPIO_Init+0x9c>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a20      	ldr	r2, [pc, #128]	; (800083c <MX_GPIO_Init+0x9c>)
 80007bc:	f043 0310 	orr.w	r3, r3, #16
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_GPIO_Init+0x9c>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0310 	and.w	r3, r3, #16
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_GPIO_Init+0x9c>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a1a      	ldr	r2, [pc, #104]	; (800083c <MX_GPIO_Init+0x9c>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_GPIO_Init+0x9c>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_GPIO_Init+0x9c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a14      	ldr	r2, [pc, #80]	; (800083c <MX_GPIO_Init+0x9c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_GPIO_Init+0x9c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

//  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(GPIOE, WIFI_RESET_Pin|WIFI_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOF_RESET_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2140      	movs	r1, #64	; 0x40
 8000802:	480f      	ldr	r0, [pc, #60]	; (8000840 <MX_GPIO_Init+0xa0>)
 8000804:	f000 fe80 	bl	8001508 <HAL_GPIO_WritePin>
//  GPIO_InitStruct.Pull = GPIO_PULLUP;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
//  HAL_GPIO_Init(WIFI_RESET_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : TOF_RESET_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = TOF_RESET_Pin;
 8000808:	2340      	movs	r3, #64	; 0x40
 800080a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	4619      	mov	r1, r3
 800081e:	4808      	ldr	r0, [pc, #32]	; (8000840 <MX_GPIO_Init+0xa0>)
 8000820:	f000 fcc8 	bl	80011b4 <HAL_GPIO_Init>
//  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  HAL_GPIO_Init(WIFI_INT_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	2007      	movs	r0, #7
 800082a:	f000 fc8c 	bl	8001146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800082e:	2007      	movs	r0, #7
 8000830:	f000 fca5 	bl	800117e <HAL_NVIC_EnableIRQ>

}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40021000 	.word	0x40021000
 8000840:	48000800 	.word	0x48000800

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <startToF>:
#include "stm32l4xx_hal.h"
#include <stdlib.h>

extern I2C_HandleTypeDef hi2c2;

void startToF(){
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af02      	add	r7, sp, #8

	 uint8_t addressWrite=0x52;
 8000856:	2352      	movs	r3, #82	; 0x52
 8000858:	71fb      	strb	r3, [r7, #7]
	 uint8_t turnOn[]={0x00,0x01};
 800085a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800085e:	80bb      	strh	r3, [r7, #4]
	 HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	b299      	uxth	r1, r3
 8000864:	1d3a      	adds	r2, r7, #4
 8000866:	2301      	movs	r3, #1
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2302      	movs	r3, #2
 800086c:	4803      	ldr	r0, [pc, #12]	; (800087c <startToF+0x2c>)
 800086e:	f000 ff2b 	bl	80016c8 <HAL_I2C_Master_Transmit>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000100 	.word	0x20000100

08000880 <getDistance>:

void getDistance(int *distance){
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af02      	add	r7, sp, #8
 8000886:	6078      	str	r0, [r7, #4]
	 uint8_t addressWrite=0x52;
 8000888:	2352      	movs	r3, #82	; 0x52
 800088a:	73fb      	strb	r3, [r7, #15]
	  uint8_t addressRead=0x53;
 800088c:	2353      	movs	r3, #83	; 0x53
 800088e:	73bb      	strb	r3, [r7, #14]
	  uint8_t resultAddress[]={0x1e};
 8000890:	231e      	movs	r3, #30
 8000892:	733b      	strb	r3, [r7, #12]
	  uint8_t rawData[]={0,0};
 8000894:	2300      	movs	r3, #0
 8000896:	813b      	strh	r3, [r7, #8]

	  HAL_I2C_Master_Transmit(&hi2c2,addressWrite,resultAddress,1,1);
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	b299      	uxth	r1, r3
 800089c:	f107 020c 	add.w	r2, r7, #12
 80008a0:	2301      	movs	r3, #1
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2301      	movs	r3, #1
 80008a6:	4814      	ldr	r0, [pc, #80]	; (80008f8 <getDistance+0x78>)
 80008a8:	f000 ff0e 	bl	80016c8 <HAL_I2C_Master_Transmit>

	  HAL_I2C_Master_Receive(&hi2c2,addressRead,rawData,2,1);
 80008ac:	7bbb      	ldrb	r3, [r7, #14]
 80008ae:	b299      	uxth	r1, r3
 80008b0:	f107 0208 	add.w	r2, r7, #8
 80008b4:	2301      	movs	r3, #1
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2302      	movs	r3, #2
 80008ba:	480f      	ldr	r0, [pc, #60]	; (80008f8 <getDistance+0x78>)
 80008bc:	f001 f81c 	bl	80018f8 <HAL_I2C_Master_Receive>
	  *distance=(rawData[0]<<8)+rawData[1]-20;
 80008c0:	7a3b      	ldrb	r3, [r7, #8]
 80008c2:	021b      	lsls	r3, r3, #8
 80008c4:	7a7a      	ldrb	r2, [r7, #9]
 80008c6:	4413      	add	r3, r2
 80008c8:	f1a3 0214 	sub.w	r2, r3, #20
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	601a      	str	r2, [r3, #0]

	  if(*distance<0){
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	da02      	bge.n	80008de <getDistance+0x5e>
		  *distance=0;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
	  }
	  if(*distance>2000){
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80008e6:	dd03      	ble.n	80008f0 <getDistance+0x70>
		  *distance=2000;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008ee:	601a      	str	r2, [r3, #0]
	  }
}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000100 	.word	0x20000100

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <HAL_MspInit+0x44>)
 8000904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000906:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <HAL_MspInit+0x44>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6613      	str	r3, [r2, #96]	; 0x60
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <HAL_MspInit+0x44>)
 8000910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_MspInit+0x44>)
 800091c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091e:	4a08      	ldr	r2, [pc, #32]	; (8000940 <HAL_MspInit+0x44>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6593      	str	r3, [r2, #88]	; 0x58
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_MspInit+0x44>)
 8000928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000

08000944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b0ae      	sub	sp, #184	; 0xb8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	2288      	movs	r2, #136	; 0x88
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f003 fd21 	bl	80043ac <memset>
  if(huart->Instance==USART1)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a42      	ldr	r2, [pc, #264]	; (8000a78 <HAL_UART_MspInit+0x134>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d13b      	bne.n	80009ec <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000974:	2301      	movs	r3, #1
 8000976:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000978:	2300      	movs	r3, #0
 800097a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4618      	mov	r0, r3
 8000982:	f002 fa4d 	bl	8002e20 <HAL_RCCEx_PeriphCLKConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800098c:	f7ff ff5a 	bl	8000844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000990:	4b3a      	ldr	r3, [pc, #232]	; (8000a7c <HAL_UART_MspInit+0x138>)
 8000992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000994:	4a39      	ldr	r2, [pc, #228]	; (8000a7c <HAL_UART_MspInit+0x138>)
 8000996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099a:	6613      	str	r3, [r2, #96]	; 0x60
 800099c:	4b37      	ldr	r3, [pc, #220]	; (8000a7c <HAL_UART_MspInit+0x138>)
 800099e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a4:	61bb      	str	r3, [r7, #24]
 80009a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	4b34      	ldr	r3, [pc, #208]	; (8000a7c <HAL_UART_MspInit+0x138>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ac:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <HAL_UART_MspInit+0x138>)
 80009ae:	f043 0302 	orr.w	r3, r3, #2
 80009b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b4:	4b31      	ldr	r3, [pc, #196]	; (8000a7c <HAL_UART_MspInit+0x138>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b8:	f003 0302 	and.w	r3, r3, #2
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|GPIO_PIN_7;
 80009c0:	23c0      	movs	r3, #192	; 0xc0
 80009c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009d8:	2307      	movs	r3, #7
 80009da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009e2:	4619      	mov	r1, r3
 80009e4:	4826      	ldr	r0, [pc, #152]	; (8000a80 <HAL_UART_MspInit+0x13c>)
 80009e6:	f000 fbe5 	bl	80011b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009ea:	e040      	b.n	8000a6e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a24      	ldr	r2, [pc, #144]	; (8000a84 <HAL_UART_MspInit+0x140>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d13b      	bne.n	8000a6e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009f6:	2304      	movs	r3, #4
 80009f8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 fa0c 	bl	8002e20 <HAL_RCCEx_PeriphCLKConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8000a0e:	f7ff ff19 	bl	8000844 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <HAL_UART_MspInit+0x138>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a16:	4a19      	ldr	r2, [pc, #100]	; (8000a7c <HAL_UART_MspInit+0x138>)
 8000a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <HAL_UART_MspInit+0x138>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <HAL_UART_MspInit+0x138>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4a13      	ldr	r2, [pc, #76]	; (8000a7c <HAL_UART_MspInit+0x138>)
 8000a30:	f043 0308 	orr.w	r3, r3, #8
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <HAL_UART_MspInit+0x138>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0308 	and.w	r3, r3, #8
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000a42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a5c:	2307      	movs	r3, #7
 8000a5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a62:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a66:	4619      	mov	r1, r3
 8000a68:	4807      	ldr	r0, [pc, #28]	; (8000a88 <HAL_UART_MspInit+0x144>)
 8000a6a:	f000 fba3 	bl	80011b4 <HAL_GPIO_Init>
}
 8000a6e:	bf00      	nop
 8000a70:	37b8      	adds	r7, #184	; 0xb8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40013800 	.word	0x40013800
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	48000400 	.word	0x48000400
 8000a84:	40004800 	.word	0x40004800
 8000a88:	48000c00 	.word	0x48000c00

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad8:	f000 fa16 	bl	8000f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_C_Pin);
 8000ae4:	2010      	movs	r0, #16
 8000ae6:	f000 fd27 	bl	8001538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}

08000aee <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8000af2:	2020      	movs	r0, #32
 8000af4:	f000 fd20 	bl	8001538 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8000af8:	2040      	movs	r0, #64	; 0x40
 8000afa:	f000 fd1d 	bl	8001538 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8000afe:	2080      	movs	r0, #128	; 0x80
 8000b00:	f000 fd1a 	bl	8001538 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8000b04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b08:	f000 fd16 	bl	8001538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8000b14:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b18:	f000 fd0e 	bl	8001538 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8000b1c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000b20:	f000 fd0a 	bl	8001538 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8000b24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b28:	f000 fd06 	bl	8001538 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8000b2c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b30:	f000 fd02 	bl	8001538 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8000b34:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b38:	f000 fcfe 	bl	8001538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b48:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <_sbrk+0x5c>)
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <_sbrk+0x60>)
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d102      	bne.n	8000b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <_sbrk+0x64>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <_sbrk+0x68>)
 8000b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d207      	bcs.n	8000b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b70:	f003 fc34 	bl	80043dc <__errno>
 8000b74:	4603      	mov	r3, r0
 8000b76:	220c      	movs	r2, #12
 8000b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7e:	e009      	b.n	8000b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b86:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <_sbrk+0x64>)
 8000b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b92:	68fb      	ldr	r3, [r7, #12]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20018000 	.word	0x20018000
 8000ba0:	00000400 	.word	0x00000400
 8000ba4:	200001b8 	.word	0x200001b8
 8000ba8:	200006f8 	.word	0x200006f8

08000bac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <SystemInit+0x20>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <SystemInit+0x20>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <setSensor>:
int indexdata=0;
int indexsensor=0;

uint8_t payloadsensors[1000];

void setSensor(uint8_t *name){
 8000bd0:	b5b0      	push	{r4, r5, r7, lr}
 8000bd2:	b090      	sub	sp, #64	; 0x40
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	uint8_t value[50];
	if(indexsensor!=0){
 8000bd8:	4b3b      	ldr	r3, [pc, #236]	; (8000cc8 <setSensor+0xf8>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d03d      	beq.n	8000c5c <setSensor+0x8c>
	strcat(payloadsensors,"} ] },{ \"sensor\":");
 8000be0:	483a      	ldr	r0, [pc, #232]	; (8000ccc <setSensor+0xfc>)
 8000be2:	f7ff faf5 	bl	80001d0 <strlen>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b38      	ldr	r3, [pc, #224]	; (8000ccc <setSensor+0xfc>)
 8000bec:	4413      	add	r3, r2
 8000bee:	4a38      	ldr	r2, [pc, #224]	; (8000cd0 <setSensor+0x100>)
 8000bf0:	461d      	mov	r5, r3
 8000bf2:	4614      	mov	r4, r2
 8000bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf6:	6028      	str	r0, [r5, #0]
 8000bf8:	6069      	str	r1, [r5, #4]
 8000bfa:	60aa      	str	r2, [r5, #8]
 8000bfc:	60eb      	str	r3, [r5, #12]
 8000bfe:	8823      	ldrh	r3, [r4, #0]
 8000c00:	822b      	strh	r3, [r5, #16]
	strcat(payloadsensors,"\"");
 8000c02:	4832      	ldr	r0, [pc, #200]	; (8000ccc <setSensor+0xfc>)
 8000c04:	f7ff fae4 	bl	80001d0 <strlen>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <setSensor+0xfc>)
 8000c0e:	4413      	add	r3, r2
 8000c10:	4930      	ldr	r1, [pc, #192]	; (8000cd4 <setSensor+0x104>)
 8000c12:	461a      	mov	r2, r3
 8000c14:	460b      	mov	r3, r1
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	8013      	strh	r3, [r2, #0]
	strcat(payloadsensors,name);
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	482b      	ldr	r0, [pc, #172]	; (8000ccc <setSensor+0xfc>)
 8000c1e:	f003 fbcd 	bl	80043bc <strcat>
	strcat(payloadsensors,"\"");
 8000c22:	482a      	ldr	r0, [pc, #168]	; (8000ccc <setSensor+0xfc>)
 8000c24:	f7ff fad4 	bl	80001d0 <strlen>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <setSensor+0xfc>)
 8000c2e:	4413      	add	r3, r2
 8000c30:	4928      	ldr	r1, [pc, #160]	; (8000cd4 <setSensor+0x104>)
 8000c32:	461a      	mov	r2, r3
 8000c34:	460b      	mov	r3, r1
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	8013      	strh	r3, [r2, #0]
	strcat(payloadsensors,", \"data\": [ {");
 8000c3a:	4824      	ldr	r0, [pc, #144]	; (8000ccc <setSensor+0xfc>)
 8000c3c:	f7ff fac8 	bl	80001d0 <strlen>
 8000c40:	4603      	mov	r3, r0
 8000c42:	461a      	mov	r2, r3
 8000c44:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <setSensor+0xfc>)
 8000c46:	4413      	add	r3, r2
 8000c48:	4a23      	ldr	r2, [pc, #140]	; (8000cd8 <setSensor+0x108>)
 8000c4a:	461c      	mov	r4, r3
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000c50:	6020      	str	r0, [r4, #0]
 8000c52:	6061      	str	r1, [r4, #4]
 8000c54:	60a2      	str	r2, [r4, #8]
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	81a3      	strh	r3, [r4, #12]
 8000c5a:	e028      	b.n	8000cae <setSensor+0xde>
	}else{
	memset(payloadsensors,0,sizeof(payloadsensors));
 8000c5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c60:	2100      	movs	r1, #0
 8000c62:	481a      	ldr	r0, [pc, #104]	; (8000ccc <setSensor+0xfc>)
 8000c64:	f003 fba2 	bl	80043ac <memset>
	strcpy(payloadsensors,"\"");
 8000c68:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <setSensor+0xfc>)
 8000c6a:	2222      	movs	r2, #34	; 0x22
 8000c6c:	801a      	strh	r2, [r3, #0]
	strcat(payloadsensors,name);
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	4816      	ldr	r0, [pc, #88]	; (8000ccc <setSensor+0xfc>)
 8000c72:	f003 fba3 	bl	80043bc <strcat>
	strcat(payloadsensors,"\"");
 8000c76:	4815      	ldr	r0, [pc, #84]	; (8000ccc <setSensor+0xfc>)
 8000c78:	f7ff faaa 	bl	80001d0 <strlen>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <setSensor+0xfc>)
 8000c82:	4413      	add	r3, r2
 8000c84:	4913      	ldr	r1, [pc, #76]	; (8000cd4 <setSensor+0x104>)
 8000c86:	461a      	mov	r2, r3
 8000c88:	460b      	mov	r3, r1
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	8013      	strh	r3, [r2, #0]
	strcat(payloadsensors,", \"data\": [ {");
 8000c8e:	480f      	ldr	r0, [pc, #60]	; (8000ccc <setSensor+0xfc>)
 8000c90:	f7ff fa9e 	bl	80001d0 <strlen>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <setSensor+0xfc>)
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <setSensor+0x108>)
 8000c9e:	461c      	mov	r4, r3
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000ca4:	6020      	str	r0, [r4, #0]
 8000ca6:	6061      	str	r1, [r4, #4]
 8000ca8:	60a2      	str	r2, [r4, #8]
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	81a3      	strh	r3, [r4, #12]
	}
	indexsensor++;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <setSensor+0xf8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <setSensor+0xf8>)
 8000cb6:	6013      	str	r3, [r2, #0]
	indexdata=0;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <setSensor+0x10c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]

}
 8000cbe:	bf00      	nop
 8000cc0:	3740      	adds	r7, #64	; 0x40
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200001c0 	.word	0x200001c0
 8000ccc:	200001c4 	.word	0x200001c4
 8000cd0:	08004d18 	.word	0x08004d18
 8000cd4:	08004d2c 	.word	0x08004d2c
 8000cd8:	08004d30 	.word	0x08004d30
 8000cdc:	200001bc 	.word	0x200001bc

08000ce0 <setDataInt>:

void setDataInt(uint8_t *payload, int data){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
	uint8_t value[10];
	if(indexdata!=0){
 8000cea:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <setDataInt+0x114>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d041      	beq.n	8000d76 <setDataInt+0x96>
		sprintf(value,",");
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	4940      	ldr	r1, [pc, #256]	; (8000df8 <setDataInt+0x118>)
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f003 fb37 	bl	800436c <siprintf>
		strcat(payloadsensors,value);
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	4619      	mov	r1, r3
 8000d04:	483d      	ldr	r0, [pc, #244]	; (8000dfc <setDataInt+0x11c>)
 8000d06:	f003 fb59 	bl	80043bc <strcat>
		strcat(payloadsensors,"\"");
 8000d0a:	483c      	ldr	r0, [pc, #240]	; (8000dfc <setDataInt+0x11c>)
 8000d0c:	f7ff fa60 	bl	80001d0 <strlen>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b39      	ldr	r3, [pc, #228]	; (8000dfc <setDataInt+0x11c>)
 8000d16:	4413      	add	r3, r2
 8000d18:	4939      	ldr	r1, [pc, #228]	; (8000e00 <setDataInt+0x120>)
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	8013      	strh	r3, [r2, #0]
		strcat(payloadsensors,payload);
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	4835      	ldr	r0, [pc, #212]	; (8000dfc <setDataInt+0x11c>)
 8000d26:	f003 fb49 	bl	80043bc <strcat>
		strcat(payloadsensors,"\"");
 8000d2a:	4834      	ldr	r0, [pc, #208]	; (8000dfc <setDataInt+0x11c>)
 8000d2c:	f7ff fa50 	bl	80001d0 <strlen>
 8000d30:	4603      	mov	r3, r0
 8000d32:	461a      	mov	r2, r3
 8000d34:	4b31      	ldr	r3, [pc, #196]	; (8000dfc <setDataInt+0x11c>)
 8000d36:	4413      	add	r3, r2
 8000d38:	4931      	ldr	r1, [pc, #196]	; (8000e00 <setDataInt+0x120>)
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	8013      	strh	r3, [r2, #0]
		strcat(payloadsensors,":");
 8000d42:	482e      	ldr	r0, [pc, #184]	; (8000dfc <setDataInt+0x11c>)
 8000d44:	f7ff fa44 	bl	80001d0 <strlen>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <setDataInt+0x11c>)
 8000d4e:	4413      	add	r3, r2
 8000d50:	492c      	ldr	r1, [pc, #176]	; (8000e04 <setDataInt+0x124>)
 8000d52:	461a      	mov	r2, r3
 8000d54:	460b      	mov	r3, r1
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	8013      	strh	r3, [r2, #0]
		sprintf(value,"\"%d\"",data);
 8000d5a:	f107 030c 	add.w	r3, r7, #12
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	4929      	ldr	r1, [pc, #164]	; (8000e08 <setDataInt+0x128>)
 8000d62:	4618      	mov	r0, r3
 8000d64:	f003 fb02 	bl	800436c <siprintf>
		strcat(payloadsensors,value);
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4823      	ldr	r0, [pc, #140]	; (8000dfc <setDataInt+0x11c>)
 8000d70:	f003 fb24 	bl	80043bc <strcat>
 8000d74:	e034      	b.n	8000de0 <setDataInt+0x100>
	}else{
		strcat(payloadsensors,"\"");
 8000d76:	4821      	ldr	r0, [pc, #132]	; (8000dfc <setDataInt+0x11c>)
 8000d78:	f7ff fa2a 	bl	80001d0 <strlen>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <setDataInt+0x11c>)
 8000d82:	4413      	add	r3, r2
 8000d84:	491e      	ldr	r1, [pc, #120]	; (8000e00 <setDataInt+0x120>)
 8000d86:	461a      	mov	r2, r3
 8000d88:	460b      	mov	r3, r1
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	8013      	strh	r3, [r2, #0]
		strcat(payloadsensors,payload);
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	481a      	ldr	r0, [pc, #104]	; (8000dfc <setDataInt+0x11c>)
 8000d92:	f003 fb13 	bl	80043bc <strcat>
		strcat(payloadsensors,"\"");
 8000d96:	4819      	ldr	r0, [pc, #100]	; (8000dfc <setDataInt+0x11c>)
 8000d98:	f7ff fa1a 	bl	80001d0 <strlen>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <setDataInt+0x11c>)
 8000da2:	4413      	add	r3, r2
 8000da4:	4916      	ldr	r1, [pc, #88]	; (8000e00 <setDataInt+0x120>)
 8000da6:	461a      	mov	r2, r3
 8000da8:	460b      	mov	r3, r1
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	8013      	strh	r3, [r2, #0]
		strcat(payloadsensors,":");
 8000dae:	4813      	ldr	r0, [pc, #76]	; (8000dfc <setDataInt+0x11c>)
 8000db0:	f7ff fa0e 	bl	80001d0 <strlen>
 8000db4:	4603      	mov	r3, r0
 8000db6:	461a      	mov	r2, r3
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <setDataInt+0x11c>)
 8000dba:	4413      	add	r3, r2
 8000dbc:	4911      	ldr	r1, [pc, #68]	; (8000e04 <setDataInt+0x124>)
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	8013      	strh	r3, [r2, #0]
		sprintf(value,"\"%d\"",data);
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	490e      	ldr	r1, [pc, #56]	; (8000e08 <setDataInt+0x128>)
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f003 facc 	bl	800436c <siprintf>
		strcat(payloadsensors,value);
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4808      	ldr	r0, [pc, #32]	; (8000dfc <setDataInt+0x11c>)
 8000ddc:	f003 faee 	bl	80043bc <strcat>

	}
	indexdata++;
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <setDataInt+0x114>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	4a03      	ldr	r2, [pc, #12]	; (8000df4 <setDataInt+0x114>)
 8000de8:	6013      	str	r3, [r2, #0]


}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200001bc 	.word	0x200001bc
 8000df8:	08004d40 	.word	0x08004d40
 8000dfc:	200001c4 	.word	0x200001c4
 8000e00:	08004d2c 	.word	0x08004d2c
 8000e04:	08004d44 	.word	0x08004d44
 8000e08:	08004d48 	.word	0x08004d48

08000e0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e10:	f7ff fecc 	bl	8000bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e16:	490d      	ldr	r1, [pc, #52]	; (8000e4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <LoopForever+0xe>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e1c:	e002      	b.n	8000e24 <LoopCopyDataInit>

08000e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e22:	3304      	adds	r3, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e28:	d3f9      	bcc.n	8000e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e2c:	4c0a      	ldr	r4, [pc, #40]	; (8000e58 <LoopForever+0x16>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e30:	e001      	b.n	8000e36 <LoopFillZerobss>

08000e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e34:	3204      	adds	r2, #4

08000e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e38:	d3fb      	bcc.n	8000e32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3a:	f003 fad5 	bl	80043e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e3e:	f7ff fb9d 	bl	800057c <main>

08000e42 <LoopForever>:

LoopForever:
    b LoopForever
 8000e42:	e7fe      	b.n	8000e42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e4c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e50:	08004ddc 	.word	0x08004ddc
  ldr r2, =_sbss
 8000e54:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e58:	200006f8 	.word	0x200006f8

08000e5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e5c:	e7fe      	b.n	8000e5c <ADC1_2_IRQHandler>

08000e5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f961 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 f80e 	bl	8000e90 <HAL_InitTick>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d002      	beq.n	8000e80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	71fb      	strb	r3, [r7, #7]
 8000e7e:	e001      	b.n	8000e84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e80:	f7ff fd3c 	bl	80008fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e84:	79fb      	ldrb	r3, [r7, #7]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_InitTick+0x6c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d023      	beq.n	8000eec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <HAL_InitTick+0x70>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <HAL_InitTick+0x6c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f96d 	bl	800119a <HAL_SYSTICK_Config>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10f      	bne.n	8000ee6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d809      	bhi.n	8000ee0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f000 f937 	bl	8001146 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_InitTick+0x74>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e007      	b.n	8000ef0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	e004      	b.n	8000ef0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	e001      	b.n	8000ef0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000004 	.word	0x20000004

08000f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x20>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x24>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_IncTick+0x24>)
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	200005ac 	.word	0x200005ac

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <HAL_GetTick+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	200005ac 	.word	0x200005ac

08000f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f7ff ffee 	bl	8000f30 <HAL_GetTick>
 8000f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f60:	d005      	beq.n	8000f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_Delay+0x44>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f6e:	bf00      	nop
 8000f70:	f7ff ffde 	bl	8000f30 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f7      	bhi.n	8000f70 <HAL_Delay+0x28>
  {
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	db0b      	blt.n	800101e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 021f 	and.w	r2, r3, #31
 800100c:	4907      	ldr	r1, [pc, #28]	; (800102c <__NVIC_EnableIRQ+0x38>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	2001      	movs	r0, #1
 8001016:	fa00 f202 	lsl.w	r2, r0, r2
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e100 	.word	0xe000e100

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	; (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	; (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2b04      	cmp	r3, #4
 80010a0:	bf28      	it	cs
 80010a2:	2304      	movcs	r3, #4
 80010a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3304      	adds	r3, #4
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d902      	bls.n	80010b4 <NVIC_EncodePriority+0x30>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3b03      	subs	r3, #3
 80010b2:	e000      	b.n	80010b6 <NVIC_EncodePriority+0x32>
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	4313      	orrs	r3, r2
         );
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010fc:	d301      	bcc.n	8001102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fe:	2301      	movs	r3, #1
 8001100:	e00f      	b.n	8001122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <SysTick_Config+0x40>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110a:	210f      	movs	r1, #15
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f7ff ff8e 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <SysTick_Config+0x40>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <SysTick_Config+0x40>)
 800111c:	2207      	movs	r2, #7
 800111e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff29 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001158:	f7ff ff3e 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 800115c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff ff8e 	bl	8001084 <NVIC_EncodePriority>
 8001168:	4602      	mov	r2, r0
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5d 	bl	8001030 <__NVIC_SetPriority>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff31 	bl	8000ff4 <__NVIC_EnableIRQ>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ffa2 	bl	80010ec <SysTick_Config>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b087      	sub	sp, #28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c2:	e17f      	b.n	80014c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	2101      	movs	r1, #1
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	4013      	ands	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 8171 	beq.w	80014be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d005      	beq.n	80011f4 <HAL_GPIO_Init+0x40>
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d130      	bne.n	8001256 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	68da      	ldr	r2, [r3, #12]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800122a:	2201      	movs	r2, #1
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	091b      	lsrs	r3, r3, #4
 8001240:	f003 0201 	and.w	r2, r3, #1
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	2b03      	cmp	r3, #3
 8001260:	d118      	bne.n	8001294 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001266:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001268:	2201      	movs	r2, #1
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	08db      	lsrs	r3, r3, #3
 800127e:	f003 0201 	and.w	r2, r3, #1
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	2b03      	cmp	r3, #3
 800129e:	d017      	beq.n	80012d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d123      	bne.n	8001324 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	08da      	lsrs	r2, r3, #3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3208      	adds	r2, #8
 80012e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	220f      	movs	r2, #15
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	691a      	ldr	r2, [r3, #16]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	08da      	lsrs	r2, r3, #3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3208      	adds	r2, #8
 800131e:	6939      	ldr	r1, [r7, #16]
 8001320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0203 	and.w	r2, r3, #3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 80ac 	beq.w	80014be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	4b5f      	ldr	r3, [pc, #380]	; (80014e4 <HAL_GPIO_Init+0x330>)
 8001368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136a:	4a5e      	ldr	r2, [pc, #376]	; (80014e4 <HAL_GPIO_Init+0x330>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6613      	str	r3, [r2, #96]	; 0x60
 8001372:	4b5c      	ldr	r3, [pc, #368]	; (80014e4 <HAL_GPIO_Init+0x330>)
 8001374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800137e:	4a5a      	ldr	r2, [pc, #360]	; (80014e8 <HAL_GPIO_Init+0x334>)
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	220f      	movs	r2, #15
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013a8:	d025      	beq.n	80013f6 <HAL_GPIO_Init+0x242>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4f      	ldr	r2, [pc, #316]	; (80014ec <HAL_GPIO_Init+0x338>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d01f      	beq.n	80013f2 <HAL_GPIO_Init+0x23e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4e      	ldr	r2, [pc, #312]	; (80014f0 <HAL_GPIO_Init+0x33c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d019      	beq.n	80013ee <HAL_GPIO_Init+0x23a>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4d      	ldr	r2, [pc, #308]	; (80014f4 <HAL_GPIO_Init+0x340>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <HAL_GPIO_Init+0x236>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4c      	ldr	r2, [pc, #304]	; (80014f8 <HAL_GPIO_Init+0x344>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00d      	beq.n	80013e6 <HAL_GPIO_Init+0x232>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4b      	ldr	r2, [pc, #300]	; (80014fc <HAL_GPIO_Init+0x348>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d007      	beq.n	80013e2 <HAL_GPIO_Init+0x22e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4a      	ldr	r2, [pc, #296]	; (8001500 <HAL_GPIO_Init+0x34c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d101      	bne.n	80013de <HAL_GPIO_Init+0x22a>
 80013da:	2306      	movs	r3, #6
 80013dc:	e00c      	b.n	80013f8 <HAL_GPIO_Init+0x244>
 80013de:	2307      	movs	r3, #7
 80013e0:	e00a      	b.n	80013f8 <HAL_GPIO_Init+0x244>
 80013e2:	2305      	movs	r3, #5
 80013e4:	e008      	b.n	80013f8 <HAL_GPIO_Init+0x244>
 80013e6:	2304      	movs	r3, #4
 80013e8:	e006      	b.n	80013f8 <HAL_GPIO_Init+0x244>
 80013ea:	2303      	movs	r3, #3
 80013ec:	e004      	b.n	80013f8 <HAL_GPIO_Init+0x244>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e002      	b.n	80013f8 <HAL_GPIO_Init+0x244>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <HAL_GPIO_Init+0x244>
 80013f6:	2300      	movs	r3, #0
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	f002 0203 	and.w	r2, r2, #3
 80013fe:	0092      	lsls	r2, r2, #2
 8001400:	4093      	lsls	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001408:	4937      	ldr	r1, [pc, #220]	; (80014e8 <HAL_GPIO_Init+0x334>)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	089b      	lsrs	r3, r3, #2
 800140e:	3302      	adds	r3, #2
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001416:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <HAL_GPIO_Init+0x350>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800143a:	4a32      	ldr	r2, [pc, #200]	; (8001504 <HAL_GPIO_Init+0x350>)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001440:	4b30      	ldr	r3, [pc, #192]	; (8001504 <HAL_GPIO_Init+0x350>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	43db      	mvns	r3, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4013      	ands	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001464:	4a27      	ldr	r2, [pc, #156]	; (8001504 <HAL_GPIO_Init+0x350>)
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <HAL_GPIO_Init+0x350>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	43db      	mvns	r3, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4313      	orrs	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800148e:	4a1d      	ldr	r2, [pc, #116]	; (8001504 <HAL_GPIO_Init+0x350>)
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_GPIO_Init+0x350>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	43db      	mvns	r3, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014b8:	4a12      	ldr	r2, [pc, #72]	; (8001504 <HAL_GPIO_Init+0x350>)
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	3301      	adds	r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa22 f303 	lsr.w	r3, r2, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f47f ae78 	bne.w	80011c4 <HAL_GPIO_Init+0x10>
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	371c      	adds	r7, #28
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010000 	.word	0x40010000
 80014ec:	48000400 	.word	0x48000400
 80014f0:	48000800 	.word	0x48000800
 80014f4:	48000c00 	.word	0x48000c00
 80014f8:	48001000 	.word	0x48001000
 80014fc:	48001400 	.word	0x48001400
 8001500:	48001800 	.word	0x48001800
 8001504:	40010400 	.word	0x40010400

08001508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
 8001514:	4613      	mov	r3, r2
 8001516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001518:	787b      	ldrb	r3, [r7, #1]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001524:	e002      	b.n	800152c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001526:	887a      	ldrh	r2, [r7, #2]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001544:	695a      	ldr	r2, [r3, #20]
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	4013      	ands	r3, r2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d006      	beq.n	800155c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f806 	bl	8001568 <HAL_GPIO_EXTI_Callback>
  }
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40010400 	.word	0x40010400

08001568 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e08d      	b.n	80016ac <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d106      	bne.n	80015aa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f885 	bl	80016b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2224      	movs	r2, #36	; 0x24
 80015ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0201 	bic.w	r2, r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d107      	bne.n	80015f8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	e006      	b.n	8001606 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001604:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d108      	bne.n	8001620 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	e007      	b.n	8001630 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800162e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800163e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001642:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001652:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691a      	ldr	r2, [r3, #16]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69d9      	ldr	r1, [r3, #28]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1a      	ldr	r2, [r3, #32]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f042 0201 	orr.w	r2, r2, #1
 800168c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2220      	movs	r2, #32
 8001698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	461a      	mov	r2, r3
 80016d4:	460b      	mov	r3, r1
 80016d6:	817b      	strh	r3, [r7, #10]
 80016d8:	4613      	mov	r3, r2
 80016da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b20      	cmp	r3, #32
 80016e6:	f040 80fd 	bne.w	80018e4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_I2C_Master_Transmit+0x30>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e0f6      	b.n	80018e6 <HAL_I2C_Master_Transmit+0x21e>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001700:	f7ff fc16 	bl	8000f30 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	2319      	movs	r3, #25
 800170c:	2201      	movs	r2, #1
 800170e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 fa0a 	bl	8001b2c <I2C_WaitOnFlagUntilTimeout>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e0e1      	b.n	80018e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2221      	movs	r2, #33	; 0x21
 8001726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2210      	movs	r2, #16
 800172e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2200      	movs	r2, #0
 8001736:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	893a      	ldrh	r2, [r7, #8]
 8001742:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174e:	b29b      	uxth	r3, r3
 8001750:	2bff      	cmp	r3, #255	; 0xff
 8001752:	d906      	bls.n	8001762 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	22ff      	movs	r2, #255	; 0xff
 8001758:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800175a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	e007      	b.n	8001772 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001766:	b29a      	uxth	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800176c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001770:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001776:	2b00      	cmp	r3, #0
 8001778:	d024      	beq.n	80017c4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	781a      	ldrb	r2, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001794:	b29b      	uxth	r3, r3
 8001796:	3b01      	subs	r3, #1
 8001798:	b29a      	uxth	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a2:	3b01      	subs	r3, #1
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	3301      	adds	r3, #1
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	8979      	ldrh	r1, [r7, #10]
 80017b6:	4b4e      	ldr	r3, [pc, #312]	; (80018f0 <HAL_I2C_Master_Transmit+0x228>)
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 fbf1 	bl	8001fa4 <I2C_TransferConfig>
 80017c2:	e066      	b.n	8001892 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	8979      	ldrh	r1, [r7, #10]
 80017cc:	4b48      	ldr	r3, [pc, #288]	; (80018f0 <HAL_I2C_Master_Transmit+0x228>)
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 fbe6 	bl	8001fa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80017d8:	e05b      	b.n	8001892 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	6a39      	ldr	r1, [r7, #32]
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f000 f9f3 	bl	8001bca <I2C_WaitOnTXISFlagUntilTimeout>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e07b      	b.n	80018e6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	781a      	ldrb	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001808:	b29b      	uxth	r3, r3
 800180a:	3b01      	subs	r3, #1
 800180c:	b29a      	uxth	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001816:	3b01      	subs	r3, #1
 8001818:	b29a      	uxth	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001822:	b29b      	uxth	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d034      	beq.n	8001892 <HAL_I2C_Master_Transmit+0x1ca>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182c:	2b00      	cmp	r3, #0
 800182e:	d130      	bne.n	8001892 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	2200      	movs	r2, #0
 8001838:	2180      	movs	r1, #128	; 0x80
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 f976 	bl	8001b2c <I2C_WaitOnFlagUntilTimeout>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e04d      	b.n	80018e6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184e:	b29b      	uxth	r3, r3
 8001850:	2bff      	cmp	r3, #255	; 0xff
 8001852:	d90e      	bls.n	8001872 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	22ff      	movs	r2, #255	; 0xff
 8001858:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185e:	b2da      	uxtb	r2, r3
 8001860:	8979      	ldrh	r1, [r7, #10]
 8001862:	2300      	movs	r3, #0
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 fb9a 	bl	8001fa4 <I2C_TransferConfig>
 8001870:	e00f      	b.n	8001892 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001876:	b29a      	uxth	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001880:	b2da      	uxtb	r2, r3
 8001882:	8979      	ldrh	r1, [r7, #10]
 8001884:	2300      	movs	r3, #0
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 fb89 	bl	8001fa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001896:	b29b      	uxth	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d19e      	bne.n	80017da <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	6a39      	ldr	r1, [r7, #32]
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 f9d9 	bl	8001c58 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e01a      	b.n	80018e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2220      	movs	r2, #32
 80018b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6859      	ldr	r1, [r3, #4]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <HAL_I2C_Master_Transmit+0x22c>)
 80018c4:	400b      	ands	r3, r1
 80018c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2220      	movs	r2, #32
 80018cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	e000      	b.n	80018e6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80018e4:	2302      	movs	r3, #2
  }
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	80002000 	.word	0x80002000
 80018f4:	fe00e800 	.word	0xfe00e800

080018f8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af02      	add	r7, sp, #8
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	461a      	mov	r2, r3
 8001904:	460b      	mov	r3, r1
 8001906:	817b      	strh	r3, [r7, #10]
 8001908:	4613      	mov	r3, r2
 800190a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b20      	cmp	r3, #32
 8001916:	f040 80db 	bne.w	8001ad0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_I2C_Master_Receive+0x30>
 8001924:	2302      	movs	r3, #2
 8001926:	e0d4      	b.n	8001ad2 <HAL_I2C_Master_Receive+0x1da>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001930:	f7ff fafe 	bl	8000f30 <HAL_GetTick>
 8001934:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2319      	movs	r3, #25
 800193c:	2201      	movs	r2, #1
 800193e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f8f2 	bl	8001b2c <I2C_WaitOnFlagUntilTimeout>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e0bf      	b.n	8001ad2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2222      	movs	r2, #34	; 0x22
 8001956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2210      	movs	r2, #16
 800195e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	893a      	ldrh	r2, [r7, #8]
 8001972:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197e:	b29b      	uxth	r3, r3
 8001980:	2bff      	cmp	r3, #255	; 0xff
 8001982:	d90e      	bls.n	80019a2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	22ff      	movs	r2, #255	; 0xff
 8001988:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198e:	b2da      	uxtb	r2, r3
 8001990:	8979      	ldrh	r1, [r7, #10]
 8001992:	4b52      	ldr	r3, [pc, #328]	; (8001adc <HAL_I2C_Master_Receive+0x1e4>)
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 fb02 	bl	8001fa4 <I2C_TransferConfig>
 80019a0:	e06d      	b.n	8001a7e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	8979      	ldrh	r1, [r7, #10]
 80019b4:	4b49      	ldr	r3, [pc, #292]	; (8001adc <HAL_I2C_Master_Receive+0x1e4>)
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 faf1 	bl	8001fa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80019c2:	e05c      	b.n	8001a7e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	6a39      	ldr	r1, [r7, #32]
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 f989 	bl	8001ce0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e07c      	b.n	8001ad2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f4:	3b01      	subs	r3, #1
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	3b01      	subs	r3, #1
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d034      	beq.n	8001a7e <HAL_I2C_Master_Receive+0x186>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d130      	bne.n	8001a7e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	2200      	movs	r2, #0
 8001a24:	2180      	movs	r1, #128	; 0x80
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 f880 	bl	8001b2c <I2C_WaitOnFlagUntilTimeout>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e04d      	b.n	8001ad2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	2bff      	cmp	r3, #255	; 0xff
 8001a3e:	d90e      	bls.n	8001a5e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	22ff      	movs	r2, #255	; 0xff
 8001a44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	8979      	ldrh	r1, [r7, #10]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 faa4 	bl	8001fa4 <I2C_TransferConfig>
 8001a5c:	e00f      	b.n	8001a7e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	8979      	ldrh	r1, [r7, #10]
 8001a70:	2300      	movs	r3, #0
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f000 fa93 	bl	8001fa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d19d      	bne.n	80019c4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	6a39      	ldr	r1, [r7, #32]
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 f8e3 	bl	8001c58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e01a      	b.n	8001ad2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6859      	ldr	r1, [r3, #4]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <HAL_I2C_Master_Receive+0x1e8>)
 8001ab0:	400b      	ands	r3, r1
 8001ab2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	e000      	b.n	8001ad2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001ad0:	2302      	movs	r3, #2
  }
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	80002400 	.word	0x80002400
 8001ae0:	fe00e800 	.word	0xfe00e800

08001ae4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d103      	bne.n	8001b02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2200      	movs	r2, #0
 8001b00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d007      	beq.n	8001b20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	699a      	ldr	r2, [r3, #24]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	619a      	str	r2, [r3, #24]
  }
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b3c:	e031      	b.n	8001ba2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b44:	d02d      	beq.n	8001ba2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b46:	f7ff f9f3 	bl	8000f30 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d302      	bcc.n	8001b5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d122      	bne.n	8001ba2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699a      	ldr	r2, [r3, #24]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	4013      	ands	r3, r2
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	bf0c      	ite	eq
 8001b6c:	2301      	moveq	r3, #1
 8001b6e:	2300      	movne	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	461a      	mov	r2, r3
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d113      	bne.n	8001ba2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	f043 0220 	orr.w	r2, r3, #32
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00f      	b.n	8001bc2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699a      	ldr	r2, [r3, #24]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	4013      	ands	r3, r2
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	bf0c      	ite	eq
 8001bb2:	2301      	moveq	r3, #1
 8001bb4:	2300      	movne	r3, #0
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d0be      	beq.n	8001b3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b084      	sub	sp, #16
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bd6:	e033      	b.n	8001c40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	68b9      	ldr	r1, [r7, #8]
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f000 f901 	bl	8001de4 <I2C_IsErrorOccurred>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e031      	b.n	8001c50 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf2:	d025      	beq.n	8001c40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf4:	f7ff f99c 	bl	8000f30 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d302      	bcc.n	8001c0a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d11a      	bne.n	8001c40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d013      	beq.n	8001c40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1c:	f043 0220 	orr.w	r2, r3, #32
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e007      	b.n	8001c50 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d1c4      	bne.n	8001bd8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c64:	e02f      	b.n	8001cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 f8ba 	bl	8001de4 <I2C_IsErrorOccurred>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e02d      	b.n	8001cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c7a:	f7ff f959 	bl	8000f30 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d302      	bcc.n	8001c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d11a      	bne.n	8001cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f003 0320 	and.w	r3, r3, #32
 8001c9a:	2b20      	cmp	r3, #32
 8001c9c:	d013      	beq.n	8001cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f043 0220 	orr.w	r2, r3, #32
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2220      	movs	r2, #32
 8001cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e007      	b.n	8001cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0320 	and.w	r3, r3, #32
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	d1c8      	bne.n	8001c66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cec:	e06b      	b.n	8001dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f876 	bl	8001de4 <I2C_IsErrorOccurred>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e069      	b.n	8001dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f003 0320 	and.w	r3, r3, #32
 8001d0c:	2b20      	cmp	r3, #32
 8001d0e:	d138      	bne.n	8001d82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d105      	bne.n	8001d2a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e055      	b.n	8001dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	2b10      	cmp	r3, #16
 8001d36:	d107      	bne.n	8001d48 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2210      	movs	r2, #16
 8001d3e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2204      	movs	r2, #4
 8001d44:	645a      	str	r2, [r3, #68]	; 0x44
 8001d46:	e002      	b.n	8001d4e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2220      	movs	r2, #32
 8001d54:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8001d62:	400b      	ands	r3, r1
 8001d64:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e029      	b.n	8001dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d82:	f7ff f8d5 	bl	8000f30 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d302      	bcc.n	8001d98 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d116      	bne.n	8001dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d00f      	beq.n	8001dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	f043 0220 	orr.w	r2, r3, #32
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2220      	movs	r2, #32
 8001db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e007      	b.n	8001dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d18c      	bne.n	8001cee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	fe00e800 	.word	0xfe00e800

08001de4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d068      	beq.n	8001ee2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2210      	movs	r2, #16
 8001e16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e18:	e049      	b.n	8001eae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e20:	d045      	beq.n	8001eae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e22:	f7ff f885 	bl	8000f30 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d302      	bcc.n	8001e38 <I2C_IsErrorOccurred+0x54>
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d13a      	bne.n	8001eae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e5a:	d121      	bne.n	8001ea0 <I2C_IsErrorOccurred+0xbc>
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e62:	d01d      	beq.n	8001ea0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001e64:	7cfb      	ldrb	r3, [r7, #19]
 8001e66:	2b20      	cmp	r3, #32
 8001e68:	d01a      	beq.n	8001ea0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e7a:	f7ff f859 	bl	8000f30 <HAL_GetTick>
 8001e7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e80:	e00e      	b.n	8001ea0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e82:	f7ff f855 	bl	8000f30 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b19      	cmp	r3, #25
 8001e8e:	d907      	bls.n	8001ea0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	f043 0320 	orr.w	r3, r3, #32
 8001e96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001e9e:	e006      	b.n	8001eae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f003 0320 	and.w	r3, r3, #32
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	d1e9      	bne.n	8001e82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d003      	beq.n	8001ec4 <I2C_IsErrorOccurred+0xe0>
 8001ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0aa      	beq.n	8001e1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d103      	bne.n	8001ed4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00b      	beq.n	8001f0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00b      	beq.n	8001f2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	f043 0308 	orr.w	r3, r3, #8
 8001f1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00b      	beq.n	8001f50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	f043 0302 	orr.w	r3, r3, #2
 8001f3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d01c      	beq.n	8001f92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f7ff fdc3 	bl	8001ae4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6859      	ldr	r1, [r3, #4]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <I2C_IsErrorOccurred+0x1bc>)
 8001f6a:	400b      	ands	r3, r1
 8001f6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	431a      	orrs	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001f92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3728      	adds	r7, #40	; 0x28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	fe00e800 	.word	0xfe00e800

08001fa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	817b      	strh	r3, [r7, #10]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fb6:	897b      	ldrh	r3, [r7, #10]
 8001fb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001fbc:	7a7b      	ldrb	r3, [r7, #9]
 8001fbe:	041b      	lsls	r3, r3, #16
 8001fc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fc4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fd2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	0d5b      	lsrs	r3, r3, #21
 8001fde:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <I2C_TransferConfig+0x60>)
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	ea02 0103 	and.w	r1, r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001ff6:	bf00      	nop
 8001ff8:	371c      	adds	r7, #28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	03ff63ff 	.word	0x03ff63ff

08002008 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b20      	cmp	r3, #32
 800201c:	d138      	bne.n	8002090 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002024:	2b01      	cmp	r3, #1
 8002026:	d101      	bne.n	800202c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002028:	2302      	movs	r3, #2
 800202a:	e032      	b.n	8002092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2224      	movs	r2, #36	; 0x24
 8002038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0201 	bic.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800205a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6819      	ldr	r1, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	e000      	b.n	8002092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002090:	2302      	movs	r3, #2
  }
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800209e:	b480      	push	{r7}
 80020a0:	b085      	sub	sp, #20
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	d139      	bne.n	8002128 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d101      	bne.n	80020c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020be:	2302      	movs	r3, #2
 80020c0:	e033      	b.n	800212a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2224      	movs	r2, #36	; 0x24
 80020ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0201 	bic.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2220      	movs	r2, #32
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	e000      	b.n	800212a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002128:	2302      	movs	r3, #2
  }
}
 800212a:	4618      	mov	r0, r3
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002146:	6013      	str	r3, [r2, #0]
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40007000 	.word	0x40007000

08002158 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <HAL_PWREx_GetVoltageRange+0x18>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40007000 	.word	0x40007000

08002174 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002182:	d130      	bne.n	80021e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002184:	4b23      	ldr	r3, [pc, #140]	; (8002214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800218c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002190:	d038      	beq.n	8002204 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002192:	4b20      	ldr	r3, [pc, #128]	; (8002214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800219a:	4a1e      	ldr	r2, [pc, #120]	; (8002214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800219c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2232      	movs	r2, #50	; 0x32
 80021a8:	fb02 f303 	mul.w	r3, r2, r3
 80021ac:	4a1b      	ldr	r2, [pc, #108]	; (800221c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	0c9b      	lsrs	r3, r3, #18
 80021b4:	3301      	adds	r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021b8:	e002      	b.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	3b01      	subs	r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021c0:	4b14      	ldr	r3, [pc, #80]	; (8002214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021cc:	d102      	bne.n	80021d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f2      	bne.n	80021ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021d4:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e0:	d110      	bne.n	8002204 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e00f      	b.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f2:	d007      	beq.n	8002204 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021f4:	4b07      	ldr	r3, [pc, #28]	; (8002214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021fc:	4a05      	ldr	r2, [pc, #20]	; (8002214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002202:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40007000 	.word	0x40007000
 8002218:	20000000 	.word	0x20000000
 800221c:	431bde83 	.word	0x431bde83

08002220 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e3ca      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002232:	4b97      	ldr	r3, [pc, #604]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800223c:	4b94      	ldr	r3, [pc, #592]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 80e4 	beq.w	800241c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d007      	beq.n	800226a <HAL_RCC_OscConfig+0x4a>
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	2b0c      	cmp	r3, #12
 800225e:	f040 808b 	bne.w	8002378 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2b01      	cmp	r3, #1
 8002266:	f040 8087 	bne.w	8002378 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800226a:	4b89      	ldr	r3, [pc, #548]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <HAL_RCC_OscConfig+0x62>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e3a2      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1a      	ldr	r2, [r3, #32]
 8002286:	4b82      	ldr	r3, [pc, #520]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d004      	beq.n	800229c <HAL_RCC_OscConfig+0x7c>
 8002292:	4b7f      	ldr	r3, [pc, #508]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800229a:	e005      	b.n	80022a8 <HAL_RCC_OscConfig+0x88>
 800229c:	4b7c      	ldr	r3, [pc, #496]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 800229e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d223      	bcs.n	80022f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 fd55 	bl	8002d60 <RCC_SetFlashLatencyFromMSIRange>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e383      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022c0:	4b73      	ldr	r3, [pc, #460]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a72      	ldr	r2, [pc, #456]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80022c6:	f043 0308 	orr.w	r3, r3, #8
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b70      	ldr	r3, [pc, #448]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	496d      	ldr	r1, [pc, #436]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022de:	4b6c      	ldr	r3, [pc, #432]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	4968      	ldr	r1, [pc, #416]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	604b      	str	r3, [r1, #4]
 80022f2:	e025      	b.n	8002340 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022f4:	4b66      	ldr	r3, [pc, #408]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a65      	ldr	r2, [pc, #404]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80022fa:	f043 0308 	orr.w	r3, r3, #8
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	4b63      	ldr	r3, [pc, #396]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4960      	ldr	r1, [pc, #384]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002312:	4b5f      	ldr	r3, [pc, #380]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	021b      	lsls	r3, r3, #8
 8002320:	495b      	ldr	r1, [pc, #364]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 8002322:	4313      	orrs	r3, r2
 8002324:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d109      	bne.n	8002340 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4618      	mov	r0, r3
 8002332:	f000 fd15 	bl	8002d60 <RCC_SetFlashLatencyFromMSIRange>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e343      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002340:	f000 fc4a 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8002344:	4602      	mov	r2, r0
 8002346:	4b52      	ldr	r3, [pc, #328]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	091b      	lsrs	r3, r3, #4
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	4950      	ldr	r1, [pc, #320]	; (8002494 <HAL_RCC_OscConfig+0x274>)
 8002352:	5ccb      	ldrb	r3, [r1, r3]
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
 800235c:	4a4e      	ldr	r2, [pc, #312]	; (8002498 <HAL_RCC_OscConfig+0x278>)
 800235e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002360:	4b4e      	ldr	r3, [pc, #312]	; (800249c <HAL_RCC_OscConfig+0x27c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe fd93 	bl	8000e90 <HAL_InitTick>
 800236a:	4603      	mov	r3, r0
 800236c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d052      	beq.n	800241a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	e327      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d032      	beq.n	80023e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002380:	4b43      	ldr	r3, [pc, #268]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a42      	ldr	r2, [pc, #264]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800238c:	f7fe fdd0 	bl	8000f30 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002394:	f7fe fdcc 	bl	8000f30 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e310      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023a6:	4b3a      	ldr	r3, [pc, #232]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023b2:	4b37      	ldr	r3, [pc, #220]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a36      	ldr	r2, [pc, #216]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80023b8:	f043 0308 	orr.w	r3, r3, #8
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	4b34      	ldr	r3, [pc, #208]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4931      	ldr	r1, [pc, #196]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023d0:	4b2f      	ldr	r3, [pc, #188]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	492c      	ldr	r1, [pc, #176]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]
 80023e4:	e01a      	b.n	800241c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023e6:	4b2a      	ldr	r3, [pc, #168]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a29      	ldr	r2, [pc, #164]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023f2:	f7fe fd9d 	bl	8000f30 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023fa:	f7fe fd99 	bl	8000f30 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e2dd      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800240c:	4b20      	ldr	r3, [pc, #128]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f0      	bne.n	80023fa <HAL_RCC_OscConfig+0x1da>
 8002418:	e000      	b.n	800241c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800241a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d074      	beq.n	8002512 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	2b08      	cmp	r3, #8
 800242c:	d005      	beq.n	800243a <HAL_RCC_OscConfig+0x21a>
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	2b0c      	cmp	r3, #12
 8002432:	d10e      	bne.n	8002452 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2b03      	cmp	r3, #3
 8002438:	d10b      	bne.n	8002452 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d064      	beq.n	8002510 <HAL_RCC_OscConfig+0x2f0>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d160      	bne.n	8002510 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e2ba      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x24a>
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 8002462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	e026      	b.n	80024b8 <HAL_RCC_OscConfig+0x298>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002472:	d115      	bne.n	80024a0 <HAL_RCC_OscConfig+0x280>
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a05      	ldr	r2, [pc, #20]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 800247a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a02      	ldr	r2, [pc, #8]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 8002486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	e014      	b.n	80024b8 <HAL_RCC_OscConfig+0x298>
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
 8002494:	08004d50 	.word	0x08004d50
 8002498:	20000000 	.word	0x20000000
 800249c:	20000004 	.word	0x20000004
 80024a0:	4ba0      	ldr	r3, [pc, #640]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a9f      	ldr	r2, [pc, #636]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 80024a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	4b9d      	ldr	r3, [pc, #628]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a9c      	ldr	r2, [pc, #624]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 80024b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d013      	beq.n	80024e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7fe fd36 	bl	8000f30 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c8:	f7fe fd32 	bl	8000f30 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e276      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024da:	4b92      	ldr	r3, [pc, #584]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x2a8>
 80024e6:	e014      	b.n	8002512 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe fd22 	bl	8000f30 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f0:	f7fe fd1e 	bl	8000f30 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e262      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002502:	4b88      	ldr	r3, [pc, #544]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x2d0>
 800250e:	e000      	b.n	8002512 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d060      	beq.n	80025e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	2b04      	cmp	r3, #4
 8002522:	d005      	beq.n	8002530 <HAL_RCC_OscConfig+0x310>
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	2b0c      	cmp	r3, #12
 8002528:	d119      	bne.n	800255e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d116      	bne.n	800255e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002530:	4b7c      	ldr	r3, [pc, #496]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_RCC_OscConfig+0x328>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e23f      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002548:	4b76      	ldr	r3, [pc, #472]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	061b      	lsls	r3, r3, #24
 8002556:	4973      	ldr	r1, [pc, #460]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800255c:	e040      	b.n	80025e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d023      	beq.n	80025ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002566:	4b6f      	ldr	r3, [pc, #444]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a6e      	ldr	r2, [pc, #440]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 800256c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002572:	f7fe fcdd 	bl	8000f30 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257a:	f7fe fcd9 	bl	8000f30 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e21d      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800258c:	4b65      	ldr	r3, [pc, #404]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002598:	4b62      	ldr	r3, [pc, #392]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	061b      	lsls	r3, r3, #24
 80025a6:	495f      	ldr	r1, [pc, #380]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
 80025ac:	e018      	b.n	80025e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ae:	4b5d      	ldr	r3, [pc, #372]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a5c      	ldr	r2, [pc, #368]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 80025b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7fe fcb9 	bl	8000f30 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c2:	f7fe fcb5 	bl	8000f30 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e1f9      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025d4:	4b53      	ldr	r3, [pc, #332]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f0      	bne.n	80025c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d03c      	beq.n	8002666 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d01c      	beq.n	800262e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025f4:	4b4b      	ldr	r3, [pc, #300]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 80025f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025fa:	4a4a      	ldr	r2, [pc, #296]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002604:	f7fe fc94 	bl	8000f30 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800260c:	f7fe fc90 	bl	8000f30 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e1d4      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800261e:	4b41      	ldr	r3, [pc, #260]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 8002620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0ef      	beq.n	800260c <HAL_RCC_OscConfig+0x3ec>
 800262c:	e01b      	b.n	8002666 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800262e:	4b3d      	ldr	r3, [pc, #244]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 8002630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002634:	4a3b      	ldr	r2, [pc, #236]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 8002636:	f023 0301 	bic.w	r3, r3, #1
 800263a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263e:	f7fe fc77 	bl	8000f30 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002646:	f7fe fc73 	bl	8000f30 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e1b7      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002658:	4b32      	ldr	r3, [pc, #200]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 800265a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1ef      	bne.n	8002646 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 80a6 	beq.w	80027c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002674:	2300      	movs	r3, #0
 8002676:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002678:	4b2a      	ldr	r3, [pc, #168]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 800267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10d      	bne.n	80026a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002684:	4b27      	ldr	r3, [pc, #156]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 8002686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002688:	4a26      	ldr	r2, [pc, #152]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 800268a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268e:	6593      	str	r3, [r2, #88]	; 0x58
 8002690:	4b24      	ldr	r3, [pc, #144]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269c:	2301      	movs	r3, #1
 800269e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a0:	4b21      	ldr	r3, [pc, #132]	; (8002728 <HAL_RCC_OscConfig+0x508>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d118      	bne.n	80026de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026ac:	4b1e      	ldr	r3, [pc, #120]	; (8002728 <HAL_RCC_OscConfig+0x508>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <HAL_RCC_OscConfig+0x508>)
 80026b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b8:	f7fe fc3a 	bl	8000f30 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c0:	f7fe fc36 	bl	8000f30 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e17a      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <HAL_RCC_OscConfig+0x508>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d108      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4d8>
 80026e6:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 80026e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ec:	4a0d      	ldr	r2, [pc, #52]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026f6:	e029      	b.n	800274c <HAL_RCC_OscConfig+0x52c>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b05      	cmp	r3, #5
 80026fe:	d115      	bne.n	800272c <HAL_RCC_OscConfig+0x50c>
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	4a07      	ldr	r2, [pc, #28]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002716:	4a03      	ldr	r2, [pc, #12]	; (8002724 <HAL_RCC_OscConfig+0x504>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002720:	e014      	b.n	800274c <HAL_RCC_OscConfig+0x52c>
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000
 8002728:	40007000 	.word	0x40007000
 800272c:	4b9c      	ldr	r3, [pc, #624]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 800272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002732:	4a9b      	ldr	r2, [pc, #620]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800273c:	4b98      	ldr	r3, [pc, #608]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 800273e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002742:	4a97      	ldr	r2, [pc, #604]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 8002744:	f023 0304 	bic.w	r3, r3, #4
 8002748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d016      	beq.n	8002782 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002754:	f7fe fbec 	bl	8000f30 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800275a:	e00a      	b.n	8002772 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275c:	f7fe fbe8 	bl	8000f30 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	; 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e12a      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002772:	4b8b      	ldr	r3, [pc, #556]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 8002774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0ed      	beq.n	800275c <HAL_RCC_OscConfig+0x53c>
 8002780:	e015      	b.n	80027ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002782:	f7fe fbd5 	bl	8000f30 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002788:	e00a      	b.n	80027a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278a:	f7fe fbd1 	bl	8000f30 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	f241 3288 	movw	r2, #5000	; 0x1388
 8002798:	4293      	cmp	r3, r2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e113      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027a0:	4b7f      	ldr	r3, [pc, #508]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1ed      	bne.n	800278a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ae:	7ffb      	ldrb	r3, [r7, #31]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d105      	bne.n	80027c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b4:	4b7a      	ldr	r3, [pc, #488]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	4a79      	ldr	r2, [pc, #484]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 80027ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027be:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80fe 	beq.w	80029c6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	f040 80d0 	bne.w	8002974 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027d4:	4b72      	ldr	r3, [pc, #456]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f003 0203 	and.w	r2, r3, #3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d130      	bne.n	800284a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	3b01      	subs	r3, #1
 80027f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d127      	bne.n	800284a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002804:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002806:	429a      	cmp	r2, r3
 8002808:	d11f      	bne.n	800284a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002814:	2a07      	cmp	r2, #7
 8002816:	bf14      	ite	ne
 8002818:	2201      	movne	r2, #1
 800281a:	2200      	moveq	r2, #0
 800281c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800281e:	4293      	cmp	r3, r2
 8002820:	d113      	bne.n	800284a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282c:	085b      	lsrs	r3, r3, #1
 800282e:	3b01      	subs	r3, #1
 8002830:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d109      	bne.n	800284a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	085b      	lsrs	r3, r3, #1
 8002842:	3b01      	subs	r3, #1
 8002844:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002846:	429a      	cmp	r2, r3
 8002848:	d06e      	beq.n	8002928 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	2b0c      	cmp	r3, #12
 800284e:	d069      	beq.n	8002924 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002850:	4b53      	ldr	r3, [pc, #332]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d105      	bne.n	8002868 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800285c:	4b50      	ldr	r3, [pc, #320]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0ad      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800286c:	4b4c      	ldr	r3, [pc, #304]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a4b      	ldr	r2, [pc, #300]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 8002872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002876:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002878:	f7fe fb5a 	bl	8000f30 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002880:	f7fe fb56 	bl	8000f30 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e09a      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002892:	4b43      	ldr	r3, [pc, #268]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800289e:	4b40      	ldr	r3, [pc, #256]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	4b40      	ldr	r3, [pc, #256]	; (80029a4 <HAL_RCC_OscConfig+0x784>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028ae:	3a01      	subs	r2, #1
 80028b0:	0112      	lsls	r2, r2, #4
 80028b2:	4311      	orrs	r1, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028b8:	0212      	lsls	r2, r2, #8
 80028ba:	4311      	orrs	r1, r2
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028c0:	0852      	lsrs	r2, r2, #1
 80028c2:	3a01      	subs	r2, #1
 80028c4:	0552      	lsls	r2, r2, #21
 80028c6:	4311      	orrs	r1, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028cc:	0852      	lsrs	r2, r2, #1
 80028ce:	3a01      	subs	r2, #1
 80028d0:	0652      	lsls	r2, r2, #25
 80028d2:	4311      	orrs	r1, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028d8:	0912      	lsrs	r2, r2, #4
 80028da:	0452      	lsls	r2, r2, #17
 80028dc:	430a      	orrs	r2, r1
 80028de:	4930      	ldr	r1, [pc, #192]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028e4:	4b2e      	ldr	r3, [pc, #184]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a2d      	ldr	r2, [pc, #180]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 80028ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028f0:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4a2a      	ldr	r2, [pc, #168]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 80028f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028fc:	f7fe fb18 	bl	8000f30 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002904:	f7fe fb14 	bl	8000f30 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e058      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002916:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002922:	e050      	b.n	80029c6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e04f      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d148      	bne.n	80029c6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002934:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a19      	ldr	r2, [pc, #100]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 800293a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800293e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002940:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4a16      	ldr	r2, [pc, #88]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 8002946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800294a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800294c:	f7fe faf0 	bl	8000f30 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002954:	f7fe faec 	bl	8000f30 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e030      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002966:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0x734>
 8002972:	e028      	b.n	80029c6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2b0c      	cmp	r3, #12
 8002978:	d023      	beq.n	80029c2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a08      	ldr	r2, [pc, #32]	; (80029a0 <HAL_RCC_OscConfig+0x780>)
 8002980:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002986:	f7fe fad3 	bl	8000f30 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800298c:	e00c      	b.n	80029a8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298e:	f7fe facf 	bl	8000f30 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d905      	bls.n	80029a8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e013      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
 80029a0:	40021000 	.word	0x40021000
 80029a4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <HAL_RCC_OscConfig+0x7b0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1ec      	bne.n	800298e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_RCC_OscConfig+0x7b0>)
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	4905      	ldr	r1, [pc, #20]	; (80029d0 <HAL_RCC_OscConfig+0x7b0>)
 80029ba:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <HAL_RCC_OscConfig+0x7b4>)
 80029bc:	4013      	ands	r3, r2
 80029be:	60cb      	str	r3, [r1, #12]
 80029c0:	e001      	b.n	80029c6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3720      	adds	r7, #32
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40021000 	.word	0x40021000
 80029d4:	feeefffc 	.word	0xfeeefffc

080029d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0e7      	b.n	8002bbc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029ec:	4b75      	ldr	r3, [pc, #468]	; (8002bc4 <HAL_RCC_ClockConfig+0x1ec>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d910      	bls.n	8002a1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b72      	ldr	r3, [pc, #456]	; (8002bc4 <HAL_RCC_ClockConfig+0x1ec>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 0207 	bic.w	r2, r3, #7
 8002a02:	4970      	ldr	r1, [pc, #448]	; (8002bc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b6e      	ldr	r3, [pc, #440]	; (8002bc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0cf      	b.n	8002bbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d010      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	4b66      	ldr	r3, [pc, #408]	; (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d908      	bls.n	8002a4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a38:	4b63      	ldr	r3, [pc, #396]	; (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	4960      	ldr	r1, [pc, #384]	; (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d04c      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5e:	4b5a      	ldr	r3, [pc, #360]	; (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d121      	bne.n	8002aae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0a6      	b.n	8002bbc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d107      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a76:	4b54      	ldr	r3, [pc, #336]	; (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d115      	bne.n	8002aae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e09a      	b.n	8002bbc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d107      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a8e:	4b4e      	ldr	r3, [pc, #312]	; (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e08e      	b.n	8002bbc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a9e:	4b4a      	ldr	r3, [pc, #296]	; (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e086      	b.n	8002bbc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002aae:	4b46      	ldr	r3, [pc, #280]	; (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f023 0203 	bic.w	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4943      	ldr	r1, [pc, #268]	; (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac0:	f7fe fa36 	bl	8000f30 <HAL_GetTick>
 8002ac4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac8:	f7fe fa32 	bl	8000f30 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e06e      	b.n	8002bbc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ade:	4b3a      	ldr	r3, [pc, #232]	; (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 020c 	and.w	r2, r3, #12
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d1eb      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d010      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	4b31      	ldr	r3, [pc, #196]	; (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d208      	bcs.n	8002b1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b0c:	4b2e      	ldr	r3, [pc, #184]	; (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	492b      	ldr	r1, [pc, #172]	; (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b1e:	4b29      	ldr	r3, [pc, #164]	; (8002bc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d210      	bcs.n	8002b4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2c:	4b25      	ldr	r3, [pc, #148]	; (8002bc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 0207 	bic.w	r2, r3, #7
 8002b34:	4923      	ldr	r1, [pc, #140]	; (8002bc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3c:	4b21      	ldr	r3, [pc, #132]	; (8002bc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d001      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e036      	b.n	8002bbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	4918      	ldr	r1, [pc, #96]	; (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d009      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b78:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4910      	ldr	r1, [pc, #64]	; (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b8c:	f000 f824 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8002b90:	4602      	mov	r2, r0
 8002b92:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	091b      	lsrs	r3, r3, #4
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	490b      	ldr	r1, [pc, #44]	; (8002bcc <HAL_RCC_ClockConfig+0x1f4>)
 8002b9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba8:	4a09      	ldr	r2, [pc, #36]	; (8002bd0 <HAL_RCC_ClockConfig+0x1f8>)
 8002baa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bac:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <HAL_RCC_ClockConfig+0x1fc>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe f96d 	bl	8000e90 <HAL_InitTick>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bba:	7afb      	ldrb	r3, [r7, #11]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40022000 	.word	0x40022000
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	08004d50 	.word	0x08004d50
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	20000004 	.word	0x20000004

08002bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b089      	sub	sp, #36	; 0x24
 8002bdc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	2300      	movs	r3, #0
 8002be4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002be6:	4b3e      	ldr	r3, [pc, #248]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bf0:	4b3b      	ldr	r3, [pc, #236]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0x34>
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	2b0c      	cmp	r3, #12
 8002c04:	d121      	bne.n	8002c4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d11e      	bne.n	8002c4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c0c:	4b34      	ldr	r3, [pc, #208]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d107      	bne.n	8002c28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c18:	4b31      	ldr	r3, [pc, #196]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	e005      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c28:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c34:	4a2b      	ldr	r2, [pc, #172]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10d      	bne.n	8002c60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c48:	e00a      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	d102      	bne.n	8002c56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c50:	4b25      	ldr	r3, [pc, #148]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	e004      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c5c:	4b23      	ldr	r3, [pc, #140]	; (8002cec <HAL_RCC_GetSysClockFreq+0x114>)
 8002c5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	2b0c      	cmp	r3, #12
 8002c64:	d134      	bne.n	8002cd0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c66:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d003      	beq.n	8002c7e <HAL_RCC_GetSysClockFreq+0xa6>
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d003      	beq.n	8002c84 <HAL_RCC_GetSysClockFreq+0xac>
 8002c7c:	e005      	b.n	8002c8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c80:	617b      	str	r3, [r7, #20]
      break;
 8002c82:	e005      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_RCC_GetSysClockFreq+0x114>)
 8002c86:	617b      	str	r3, [r7, #20]
      break;
 8002c88:	e002      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	617b      	str	r3, [r7, #20]
      break;
 8002c8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c90:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	0a1b      	lsrs	r3, r3, #8
 8002ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	fb03 f202 	mul.w	r2, r3, r2
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	0e5b      	lsrs	r3, r3, #25
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cd0:	69bb      	ldr	r3, [r7, #24]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3724      	adds	r7, #36	; 0x24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	08004d68 	.word	0x08004d68
 8002ce8:	00f42400 	.word	0x00f42400
 8002cec:	007a1200 	.word	0x007a1200

08002cf0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000000 	.word	0x20000000

08002d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d0c:	f7ff fff0 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	0a1b      	lsrs	r3, r3, #8
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	4904      	ldr	r1, [pc, #16]	; (8002d30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	08004d60 	.word	0x08004d60

08002d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d38:	f7ff ffda 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	0adb      	lsrs	r3, r3, #11
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	4904      	ldr	r1, [pc, #16]	; (8002d5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d4a:	5ccb      	ldrb	r3, [r1, r3]
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	08004d60 	.word	0x08004d60

08002d60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d68:	2300      	movs	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d6c:	4b2a      	ldr	r3, [pc, #168]	; (8002e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d78:	f7ff f9ee 	bl	8002158 <HAL_PWREx_GetVoltageRange>
 8002d7c:	6178      	str	r0, [r7, #20]
 8002d7e:	e014      	b.n	8002daa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d80:	4b25      	ldr	r3, [pc, #148]	; (8002e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d84:	4a24      	ldr	r2, [pc, #144]	; (8002e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d8c:	4b22      	ldr	r3, [pc, #136]	; (8002e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d98:	f7ff f9de 	bl	8002158 <HAL_PWREx_GetVoltageRange>
 8002d9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d9e:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da2:	4a1d      	ldr	r2, [pc, #116]	; (8002e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002db0:	d10b      	bne.n	8002dca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b80      	cmp	r3, #128	; 0x80
 8002db6:	d919      	bls.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2ba0      	cmp	r3, #160	; 0xa0
 8002dbc:	d902      	bls.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	e013      	b.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	e010      	b.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b80      	cmp	r3, #128	; 0x80
 8002dce:	d902      	bls.n	8002dd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	e00a      	b.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b80      	cmp	r3, #128	; 0x80
 8002dda:	d102      	bne.n	8002de2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ddc:	2302      	movs	r3, #2
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	e004      	b.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b70      	cmp	r3, #112	; 0x70
 8002de6:	d101      	bne.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002de8:	2301      	movs	r3, #1
 8002dea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002dec:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f023 0207 	bic.w	r2, r3, #7
 8002df4:	4909      	ldr	r1, [pc, #36]	; (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002dfc:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d001      	beq.n	8002e0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40022000 	.word	0x40022000

08002e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e28:	2300      	movs	r3, #0
 8002e2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d041      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e44:	d02a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e4a:	d824      	bhi.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e50:	d008      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e56:	d81e      	bhi.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e60:	d010      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e62:	e018      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e64:	4b86      	ldr	r3, [pc, #536]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4a85      	ldr	r2, [pc, #532]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e70:	e015      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3304      	adds	r3, #4
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 facb 	bl	8003414 <RCCEx_PLLSAI1_Config>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e82:	e00c      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3320      	adds	r3, #32
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fbb6 	bl	80035fc <RCCEx_PLLSAI2_Config>
 8002e90:	4603      	mov	r3, r0
 8002e92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e94:	e003      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	74fb      	strb	r3, [r7, #19]
      break;
 8002e9a:	e000      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10b      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ea4:	4b76      	ldr	r3, [pc, #472]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eaa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eb2:	4973      	ldr	r1, [pc, #460]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002eba:	e001      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ebc:	7cfb      	ldrb	r3, [r7, #19]
 8002ebe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d041      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ed0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ed4:	d02a      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002ed6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002eda:	d824      	bhi.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002edc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ee0:	d008      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ee2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ee6:	d81e      	bhi.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ef0:	d010      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ef2:	e018      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ef4:	4b62      	ldr	r3, [pc, #392]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4a61      	ldr	r2, [pc, #388]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002efe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f00:	e015      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3304      	adds	r3, #4
 8002f06:	2100      	movs	r1, #0
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fa83 	bl	8003414 <RCCEx_PLLSAI1_Config>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f12:	e00c      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3320      	adds	r3, #32
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fb6e 	bl	80035fc <RCCEx_PLLSAI2_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f24:	e003      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	74fb      	strb	r3, [r7, #19]
      break;
 8002f2a:	e000      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f2e:	7cfb      	ldrb	r3, [r7, #19]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10b      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f34:	4b52      	ldr	r3, [pc, #328]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f42:	494f      	ldr	r1, [pc, #316]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f4a:	e001      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f4c:	7cfb      	ldrb	r3, [r7, #19]
 8002f4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80a0 	beq.w	800309e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f62:	4b47      	ldr	r3, [pc, #284]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f72:	2300      	movs	r3, #0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00d      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f78:	4b41      	ldr	r3, [pc, #260]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7c:	4a40      	ldr	r2, [pc, #256]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f82:	6593      	str	r3, [r2, #88]	; 0x58
 8002f84:	4b3e      	ldr	r3, [pc, #248]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f90:	2301      	movs	r3, #1
 8002f92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f94:	4b3b      	ldr	r3, [pc, #236]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a3a      	ldr	r2, [pc, #232]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fa0:	f7fd ffc6 	bl	8000f30 <HAL_GetTick>
 8002fa4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fa6:	e009      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa8:	f7fd ffc2 	bl	8000f30 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d902      	bls.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	74fb      	strb	r3, [r7, #19]
        break;
 8002fba:	e005      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fbc:	4b31      	ldr	r3, [pc, #196]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0ef      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d15c      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fce:	4b2c      	ldr	r3, [pc, #176]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01f      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d019      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fec:	4b24      	ldr	r3, [pc, #144]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ff8:	4b21      	ldr	r3, [pc, #132]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffe:	4a20      	ldr	r2, [pc, #128]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300e:	4a1c      	ldr	r2, [pc, #112]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003018:	4a19      	ldr	r2, [pc, #100]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d016      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302a:	f7fd ff81 	bl	8000f30 <HAL_GetTick>
 800302e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003030:	e00b      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003032:	f7fd ff7d 	bl	8000f30 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003040:	4293      	cmp	r3, r2
 8003042:	d902      	bls.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	74fb      	strb	r3, [r7, #19]
            break;
 8003048:	e006      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800304c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0ec      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10c      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800305e:	4b08      	ldr	r3, [pc, #32]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800306e:	4904      	ldr	r1, [pc, #16]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003076:	e009      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	74bb      	strb	r3, [r7, #18]
 800307c:	e006      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800307e:	bf00      	nop
 8003080:	40021000 	.word	0x40021000
 8003084:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003088:	7cfb      	ldrb	r3, [r7, #19]
 800308a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800308c:	7c7b      	ldrb	r3, [r7, #17]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d105      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003092:	4b9e      	ldr	r3, [pc, #632]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003096:	4a9d      	ldr	r2, [pc, #628]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800309c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030aa:	4b98      	ldr	r3, [pc, #608]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b0:	f023 0203 	bic.w	r2, r3, #3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	4994      	ldr	r1, [pc, #592]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030cc:	4b8f      	ldr	r3, [pc, #572]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d2:	f023 020c 	bic.w	r2, r3, #12
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030da:	498c      	ldr	r1, [pc, #560]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030ee:	4b87      	ldr	r3, [pc, #540]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	4983      	ldr	r1, [pc, #524]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00a      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003110:	4b7e      	ldr	r3, [pc, #504]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003116:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	497b      	ldr	r1, [pc, #492]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0310 	and.w	r3, r3, #16
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003132:	4b76      	ldr	r3, [pc, #472]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003138:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003140:	4972      	ldr	r1, [pc, #456]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00a      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003154:	4b6d      	ldr	r3, [pc, #436]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003162:	496a      	ldr	r1, [pc, #424]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003176:	4b65      	ldr	r3, [pc, #404]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003184:	4961      	ldr	r1, [pc, #388]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003198:	4b5c      	ldr	r3, [pc, #368]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a6:	4959      	ldr	r1, [pc, #356]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031ba:	4b54      	ldr	r3, [pc, #336]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c8:	4950      	ldr	r1, [pc, #320]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031dc:	4b4b      	ldr	r3, [pc, #300]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ea:	4948      	ldr	r1, [pc, #288]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031fe:	4b43      	ldr	r3, [pc, #268]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003204:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320c:	493f      	ldr	r1, [pc, #252]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d028      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003220:	4b3a      	ldr	r3, [pc, #232]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800322e:	4937      	ldr	r1, [pc, #220]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800323a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800323e:	d106      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003240:	4b32      	ldr	r3, [pc, #200]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4a31      	ldr	r2, [pc, #196]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800324a:	60d3      	str	r3, [r2, #12]
 800324c:	e011      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003252:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003256:	d10c      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3304      	adds	r3, #4
 800325c:	2101      	movs	r1, #1
 800325e:	4618      	mov	r0, r3
 8003260:	f000 f8d8 	bl	8003414 <RCCEx_PLLSAI1_Config>
 8003264:	4603      	mov	r3, r0
 8003266:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003268:	7cfb      	ldrb	r3, [r7, #19]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800326e:	7cfb      	ldrb	r3, [r7, #19]
 8003270:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d028      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800327e:	4b23      	ldr	r3, [pc, #140]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003284:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	491f      	ldr	r1, [pc, #124]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003298:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800329c:	d106      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	4a1a      	ldr	r2, [pc, #104]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032a8:	60d3      	str	r3, [r2, #12]
 80032aa:	e011      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032b4:	d10c      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3304      	adds	r3, #4
 80032ba:	2101      	movs	r1, #1
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 f8a9 	bl	8003414 <RCCEx_PLLSAI1_Config>
 80032c2:	4603      	mov	r3, r0
 80032c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032c6:	7cfb      	ldrb	r3, [r7, #19]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d02b      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ea:	4908      	ldr	r1, [pc, #32]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032fa:	d109      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032fc:	4b03      	ldr	r3, [pc, #12]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	4a02      	ldr	r2, [pc, #8]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003306:	60d3      	str	r3, [r2, #12]
 8003308:	e014      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003314:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003318:	d10c      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3304      	adds	r3, #4
 800331e:	2101      	movs	r1, #1
 8003320:	4618      	mov	r0, r3
 8003322:	f000 f877 	bl	8003414 <RCCEx_PLLSAI1_Config>
 8003326:	4603      	mov	r3, r0
 8003328:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800332a:	7cfb      	ldrb	r3, [r7, #19]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003330:	7cfb      	ldrb	r3, [r7, #19]
 8003332:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d02f      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003340:	4b2b      	ldr	r3, [pc, #172]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003346:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800334e:	4928      	ldr	r1, [pc, #160]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800335a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800335e:	d10d      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3304      	adds	r3, #4
 8003364:	2102      	movs	r1, #2
 8003366:	4618      	mov	r0, r3
 8003368:	f000 f854 	bl	8003414 <RCCEx_PLLSAI1_Config>
 800336c:	4603      	mov	r3, r0
 800336e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003370:	7cfb      	ldrb	r3, [r7, #19]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d014      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003376:	7cfb      	ldrb	r3, [r7, #19]
 8003378:	74bb      	strb	r3, [r7, #18]
 800337a:	e011      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3320      	adds	r3, #32
 800338a:	2102      	movs	r1, #2
 800338c:	4618      	mov	r0, r3
 800338e:	f000 f935 	bl	80035fc <RCCEx_PLLSAI2_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003396:	7cfb      	ldrb	r3, [r7, #19]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800339c:	7cfb      	ldrb	r3, [r7, #19]
 800339e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033ac:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ba:	490d      	ldr	r1, [pc, #52]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00b      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033ce:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033de:	4904      	ldr	r1, [pc, #16]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40021000 	.word	0x40021000

080033f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a04      	ldr	r2, [pc, #16]	; (8003410 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80033fe:	f043 0304 	orr.w	r3, r3, #4
 8003402:	6013      	str	r3, [r2, #0]
}
 8003404:	bf00      	nop
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40021000 	.word	0x40021000

08003414 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003422:	4b75      	ldr	r3, [pc, #468]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d018      	beq.n	8003460 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800342e:	4b72      	ldr	r3, [pc, #456]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 0203 	and.w	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d10d      	bne.n	800345a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
       ||
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003446:	4b6c      	ldr	r3, [pc, #432]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
       ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d047      	beq.n	80034ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
 800345e:	e044      	b.n	80034ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b03      	cmp	r3, #3
 8003466:	d018      	beq.n	800349a <RCCEx_PLLSAI1_Config+0x86>
 8003468:	2b03      	cmp	r3, #3
 800346a:	d825      	bhi.n	80034b8 <RCCEx_PLLSAI1_Config+0xa4>
 800346c:	2b01      	cmp	r3, #1
 800346e:	d002      	beq.n	8003476 <RCCEx_PLLSAI1_Config+0x62>
 8003470:	2b02      	cmp	r3, #2
 8003472:	d009      	beq.n	8003488 <RCCEx_PLLSAI1_Config+0x74>
 8003474:	e020      	b.n	80034b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003476:	4b60      	ldr	r3, [pc, #384]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d11d      	bne.n	80034be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003486:	e01a      	b.n	80034be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003488:	4b5b      	ldr	r3, [pc, #364]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003490:	2b00      	cmp	r3, #0
 8003492:	d116      	bne.n	80034c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003498:	e013      	b.n	80034c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800349a:	4b57      	ldr	r3, [pc, #348]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10f      	bne.n	80034c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034a6:	4b54      	ldr	r3, [pc, #336]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d109      	bne.n	80034c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034b6:	e006      	b.n	80034c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
      break;
 80034bc:	e004      	b.n	80034c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034be:	bf00      	nop
 80034c0:	e002      	b.n	80034c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10d      	bne.n	80034ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034ce:	4b4a      	ldr	r3, [pc, #296]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6819      	ldr	r1, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	3b01      	subs	r3, #1
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	430b      	orrs	r3, r1
 80034e4:	4944      	ldr	r1, [pc, #272]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d17d      	bne.n	80035ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034f0:	4b41      	ldr	r3, [pc, #260]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a40      	ldr	r2, [pc, #256]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034fc:	f7fd fd18 	bl	8000f30 <HAL_GetTick>
 8003500:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003502:	e009      	b.n	8003518 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003504:	f7fd fd14 	bl	8000f30 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d902      	bls.n	8003518 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	73fb      	strb	r3, [r7, #15]
        break;
 8003516:	e005      	b.n	8003524 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003518:	4b37      	ldr	r3, [pc, #220]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1ef      	bne.n	8003504 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d160      	bne.n	80035ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d111      	bne.n	8003554 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003530:	4b31      	ldr	r3, [pc, #196]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6892      	ldr	r2, [r2, #8]
 8003540:	0211      	lsls	r1, r2, #8
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68d2      	ldr	r2, [r2, #12]
 8003546:	0912      	lsrs	r2, r2, #4
 8003548:	0452      	lsls	r2, r2, #17
 800354a:	430a      	orrs	r2, r1
 800354c:	492a      	ldr	r1, [pc, #168]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800354e:	4313      	orrs	r3, r2
 8003550:	610b      	str	r3, [r1, #16]
 8003552:	e027      	b.n	80035a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d112      	bne.n	8003580 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800355a:	4b27      	ldr	r3, [pc, #156]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003562:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6892      	ldr	r2, [r2, #8]
 800356a:	0211      	lsls	r1, r2, #8
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6912      	ldr	r2, [r2, #16]
 8003570:	0852      	lsrs	r2, r2, #1
 8003572:	3a01      	subs	r2, #1
 8003574:	0552      	lsls	r2, r2, #21
 8003576:	430a      	orrs	r2, r1
 8003578:	491f      	ldr	r1, [pc, #124]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357a:	4313      	orrs	r3, r2
 800357c:	610b      	str	r3, [r1, #16]
 800357e:	e011      	b.n	80035a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003580:	4b1d      	ldr	r3, [pc, #116]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003588:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6892      	ldr	r2, [r2, #8]
 8003590:	0211      	lsls	r1, r2, #8
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6952      	ldr	r2, [r2, #20]
 8003596:	0852      	lsrs	r2, r2, #1
 8003598:	3a01      	subs	r2, #1
 800359a:	0652      	lsls	r2, r2, #25
 800359c:	430a      	orrs	r2, r1
 800359e:	4916      	ldr	r1, [pc, #88]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035a4:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a13      	ldr	r2, [pc, #76]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b0:	f7fd fcbe 	bl	8000f30 <HAL_GetTick>
 80035b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035b6:	e009      	b.n	80035cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035b8:	f7fd fcba 	bl	8000f30 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d902      	bls.n	80035cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	73fb      	strb	r3, [r7, #15]
          break;
 80035ca:	e005      	b.n	80035d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035cc:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0ef      	beq.n	80035b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035de:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e0:	691a      	ldr	r2, [r3, #16]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	4904      	ldr	r1, [pc, #16]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000

080035fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800360a:	4b6a      	ldr	r3, [pc, #424]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d018      	beq.n	8003648 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003616:	4b67      	ldr	r3, [pc, #412]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f003 0203 	and.w	r2, r3, #3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d10d      	bne.n	8003642 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
       ||
 800362a:	2b00      	cmp	r3, #0
 800362c:	d009      	beq.n	8003642 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800362e:	4b61      	ldr	r3, [pc, #388]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	091b      	lsrs	r3, r3, #4
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
       ||
 800363e:	429a      	cmp	r2, r3
 8003640:	d047      	beq.n	80036d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	73fb      	strb	r3, [r7, #15]
 8003646:	e044      	b.n	80036d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b03      	cmp	r3, #3
 800364e:	d018      	beq.n	8003682 <RCCEx_PLLSAI2_Config+0x86>
 8003650:	2b03      	cmp	r3, #3
 8003652:	d825      	bhi.n	80036a0 <RCCEx_PLLSAI2_Config+0xa4>
 8003654:	2b01      	cmp	r3, #1
 8003656:	d002      	beq.n	800365e <RCCEx_PLLSAI2_Config+0x62>
 8003658:	2b02      	cmp	r3, #2
 800365a:	d009      	beq.n	8003670 <RCCEx_PLLSAI2_Config+0x74>
 800365c:	e020      	b.n	80036a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800365e:	4b55      	ldr	r3, [pc, #340]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d11d      	bne.n	80036a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800366e:	e01a      	b.n	80036a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003670:	4b50      	ldr	r3, [pc, #320]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003678:	2b00      	cmp	r3, #0
 800367a:	d116      	bne.n	80036aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003680:	e013      	b.n	80036aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003682:	4b4c      	ldr	r3, [pc, #304]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10f      	bne.n	80036ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800368e:	4b49      	ldr	r3, [pc, #292]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800369e:	e006      	b.n	80036ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      break;
 80036a4:	e004      	b.n	80036b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036a6:	bf00      	nop
 80036a8:	e002      	b.n	80036b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036aa:	bf00      	nop
 80036ac:	e000      	b.n	80036b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10d      	bne.n	80036d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036b6:	4b3f      	ldr	r3, [pc, #252]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6819      	ldr	r1, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	430b      	orrs	r3, r1
 80036cc:	4939      	ldr	r1, [pc, #228]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d167      	bne.n	80037a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036d8:	4b36      	ldr	r3, [pc, #216]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a35      	ldr	r2, [pc, #212]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e4:	f7fd fc24 	bl	8000f30 <HAL_GetTick>
 80036e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036ea:	e009      	b.n	8003700 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036ec:	f7fd fc20 	bl	8000f30 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d902      	bls.n	8003700 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	73fb      	strb	r3, [r7, #15]
        break;
 80036fe:	e005      	b.n	800370c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003700:	4b2c      	ldr	r3, [pc, #176]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1ef      	bne.n	80036ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d14a      	bne.n	80037a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d111      	bne.n	800373c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003718:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6892      	ldr	r2, [r2, #8]
 8003728:	0211      	lsls	r1, r2, #8
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68d2      	ldr	r2, [r2, #12]
 800372e:	0912      	lsrs	r2, r2, #4
 8003730:	0452      	lsls	r2, r2, #17
 8003732:	430a      	orrs	r2, r1
 8003734:	491f      	ldr	r1, [pc, #124]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003736:	4313      	orrs	r3, r2
 8003738:	614b      	str	r3, [r1, #20]
 800373a:	e011      	b.n	8003760 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800373c:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003744:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6892      	ldr	r2, [r2, #8]
 800374c:	0211      	lsls	r1, r2, #8
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6912      	ldr	r2, [r2, #16]
 8003752:	0852      	lsrs	r2, r2, #1
 8003754:	3a01      	subs	r2, #1
 8003756:	0652      	lsls	r2, r2, #25
 8003758:	430a      	orrs	r2, r1
 800375a:	4916      	ldr	r1, [pc, #88]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800375c:	4313      	orrs	r3, r2
 800375e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003760:	4b14      	ldr	r3, [pc, #80]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376c:	f7fd fbe0 	bl	8000f30 <HAL_GetTick>
 8003770:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003772:	e009      	b.n	8003788 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003774:	f7fd fbdc 	bl	8000f30 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d902      	bls.n	8003788 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	73fb      	strb	r3, [r7, #15]
          break;
 8003786:	e005      	b.n	8003794 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003788:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0ef      	beq.n	8003774 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003794:	7bfb      	ldrb	r3, [r7, #15]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	4904      	ldr	r1, [pc, #16]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40021000 	.word	0x40021000

080037b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e040      	b.n	800384c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fd f8b2 	bl	8000944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2224      	movs	r2, #36	; 0x24
 80037e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0201 	bic.w	r2, r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fb6a 	bl	8003ed8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f8af 	bl	8003968 <UART_SetConfig>
 800380a:	4603      	mov	r3, r0
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e01b      	b.n	800384c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003822:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003832:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 fbe9 	bl	800401c <UART_CheckIdleState>
 800384a:	4603      	mov	r3, r0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08a      	sub	sp, #40	; 0x28
 8003858:	af02      	add	r7, sp, #8
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	4613      	mov	r3, r2
 8003862:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003868:	2b20      	cmp	r3, #32
 800386a:	d178      	bne.n	800395e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <HAL_UART_Transmit+0x24>
 8003872:	88fb      	ldrh	r3, [r7, #6]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e071      	b.n	8003960 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2221      	movs	r2, #33	; 0x21
 8003888:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800388a:	f7fd fb51 	bl	8000f30 <HAL_GetTick>
 800388e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	88fa      	ldrh	r2, [r7, #6]
 8003894:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	88fa      	ldrh	r2, [r7, #6]
 800389c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a8:	d108      	bne.n	80038bc <HAL_UART_Transmit+0x68>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d104      	bne.n	80038bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	e003      	b.n	80038c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038c4:	e030      	b.n	8003928 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2200      	movs	r2, #0
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 fc4b 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d004      	beq.n	80038e6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e03c      	b.n	8003960 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10b      	bne.n	8003904 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	881a      	ldrh	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038f8:	b292      	uxth	r2, r2
 80038fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	3302      	adds	r3, #2
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	e008      	b.n	8003916 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	781a      	ldrb	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	b292      	uxth	r2, r2
 800390e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	3301      	adds	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1c8      	bne.n	80038c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2200      	movs	r2, #0
 800393c:	2140      	movs	r1, #64	; 0x40
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 fc14 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d004      	beq.n	8003954 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e005      	b.n	8003960 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2220      	movs	r2, #32
 8003958:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	e000      	b.n	8003960 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800395e:	2302      	movs	r3, #2
  }
}
 8003960:	4618      	mov	r0, r3
 8003962:	3720      	adds	r7, #32
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800396c:	b08a      	sub	sp, #40	; 0x28
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	431a      	orrs	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	431a      	orrs	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	4313      	orrs	r3, r2
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4ba4      	ldr	r3, [pc, #656]	; (8003c28 <UART_SetConfig+0x2c0>)
 8003998:	4013      	ands	r3, r2
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a99      	ldr	r2, [pc, #612]	; (8003c2c <UART_SetConfig+0x2c4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d004      	beq.n	80039d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d0:	4313      	orrs	r3, r2
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e4:	430a      	orrs	r2, r1
 80039e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a90      	ldr	r2, [pc, #576]	; (8003c30 <UART_SetConfig+0x2c8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d126      	bne.n	8003a40 <UART_SetConfig+0xd8>
 80039f2:	4b90      	ldr	r3, [pc, #576]	; (8003c34 <UART_SetConfig+0x2cc>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d81b      	bhi.n	8003a38 <UART_SetConfig+0xd0>
 8003a00:	a201      	add	r2, pc, #4	; (adr r2, 8003a08 <UART_SetConfig+0xa0>)
 8003a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a06:	bf00      	nop
 8003a08:	08003a19 	.word	0x08003a19
 8003a0c:	08003a29 	.word	0x08003a29
 8003a10:	08003a21 	.word	0x08003a21
 8003a14:	08003a31 	.word	0x08003a31
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1e:	e116      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003a20:	2302      	movs	r3, #2
 8003a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a26:	e112      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003a28:	2304      	movs	r3, #4
 8003a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2e:	e10e      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003a30:	2308      	movs	r3, #8
 8003a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a36:	e10a      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003a38:	2310      	movs	r3, #16
 8003a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3e:	e106      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a7c      	ldr	r2, [pc, #496]	; (8003c38 <UART_SetConfig+0x2d0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d138      	bne.n	8003abc <UART_SetConfig+0x154>
 8003a4a:	4b7a      	ldr	r3, [pc, #488]	; (8003c34 <UART_SetConfig+0x2cc>)
 8003a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a50:	f003 030c 	and.w	r3, r3, #12
 8003a54:	2b0c      	cmp	r3, #12
 8003a56:	d82d      	bhi.n	8003ab4 <UART_SetConfig+0x14c>
 8003a58:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <UART_SetConfig+0xf8>)
 8003a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5e:	bf00      	nop
 8003a60:	08003a95 	.word	0x08003a95
 8003a64:	08003ab5 	.word	0x08003ab5
 8003a68:	08003ab5 	.word	0x08003ab5
 8003a6c:	08003ab5 	.word	0x08003ab5
 8003a70:	08003aa5 	.word	0x08003aa5
 8003a74:	08003ab5 	.word	0x08003ab5
 8003a78:	08003ab5 	.word	0x08003ab5
 8003a7c:	08003ab5 	.word	0x08003ab5
 8003a80:	08003a9d 	.word	0x08003a9d
 8003a84:	08003ab5 	.word	0x08003ab5
 8003a88:	08003ab5 	.word	0x08003ab5
 8003a8c:	08003ab5 	.word	0x08003ab5
 8003a90:	08003aad 	.word	0x08003aad
 8003a94:	2300      	movs	r3, #0
 8003a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9a:	e0d8      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa2:	e0d4      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003aa4:	2304      	movs	r3, #4
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aaa:	e0d0      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003aac:	2308      	movs	r3, #8
 8003aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab2:	e0cc      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003ab4:	2310      	movs	r3, #16
 8003ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aba:	e0c8      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a5e      	ldr	r2, [pc, #376]	; (8003c3c <UART_SetConfig+0x2d4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d125      	bne.n	8003b12 <UART_SetConfig+0x1aa>
 8003ac6:	4b5b      	ldr	r3, [pc, #364]	; (8003c34 <UART_SetConfig+0x2cc>)
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003acc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ad0:	2b30      	cmp	r3, #48	; 0x30
 8003ad2:	d016      	beq.n	8003b02 <UART_SetConfig+0x19a>
 8003ad4:	2b30      	cmp	r3, #48	; 0x30
 8003ad6:	d818      	bhi.n	8003b0a <UART_SetConfig+0x1a2>
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d00a      	beq.n	8003af2 <UART_SetConfig+0x18a>
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d814      	bhi.n	8003b0a <UART_SetConfig+0x1a2>
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <UART_SetConfig+0x182>
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d008      	beq.n	8003afa <UART_SetConfig+0x192>
 8003ae8:	e00f      	b.n	8003b0a <UART_SetConfig+0x1a2>
 8003aea:	2300      	movs	r3, #0
 8003aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af0:	e0ad      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003af2:	2302      	movs	r3, #2
 8003af4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af8:	e0a9      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003afa:	2304      	movs	r3, #4
 8003afc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b00:	e0a5      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003b02:	2308      	movs	r3, #8
 8003b04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b08:	e0a1      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003b0a:	2310      	movs	r3, #16
 8003b0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b10:	e09d      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a4a      	ldr	r2, [pc, #296]	; (8003c40 <UART_SetConfig+0x2d8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d125      	bne.n	8003b68 <UART_SetConfig+0x200>
 8003b1c:	4b45      	ldr	r3, [pc, #276]	; (8003c34 <UART_SetConfig+0x2cc>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b26:	2bc0      	cmp	r3, #192	; 0xc0
 8003b28:	d016      	beq.n	8003b58 <UART_SetConfig+0x1f0>
 8003b2a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b2c:	d818      	bhi.n	8003b60 <UART_SetConfig+0x1f8>
 8003b2e:	2b80      	cmp	r3, #128	; 0x80
 8003b30:	d00a      	beq.n	8003b48 <UART_SetConfig+0x1e0>
 8003b32:	2b80      	cmp	r3, #128	; 0x80
 8003b34:	d814      	bhi.n	8003b60 <UART_SetConfig+0x1f8>
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <UART_SetConfig+0x1d8>
 8003b3a:	2b40      	cmp	r3, #64	; 0x40
 8003b3c:	d008      	beq.n	8003b50 <UART_SetConfig+0x1e8>
 8003b3e:	e00f      	b.n	8003b60 <UART_SetConfig+0x1f8>
 8003b40:	2300      	movs	r3, #0
 8003b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b46:	e082      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4e:	e07e      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003b50:	2304      	movs	r3, #4
 8003b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b56:	e07a      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003b58:	2308      	movs	r3, #8
 8003b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5e:	e076      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003b60:	2310      	movs	r3, #16
 8003b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b66:	e072      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a35      	ldr	r2, [pc, #212]	; (8003c44 <UART_SetConfig+0x2dc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d12a      	bne.n	8003bc8 <UART_SetConfig+0x260>
 8003b72:	4b30      	ldr	r3, [pc, #192]	; (8003c34 <UART_SetConfig+0x2cc>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b80:	d01a      	beq.n	8003bb8 <UART_SetConfig+0x250>
 8003b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b86:	d81b      	bhi.n	8003bc0 <UART_SetConfig+0x258>
 8003b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b8c:	d00c      	beq.n	8003ba8 <UART_SetConfig+0x240>
 8003b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b92:	d815      	bhi.n	8003bc0 <UART_SetConfig+0x258>
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <UART_SetConfig+0x238>
 8003b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b9c:	d008      	beq.n	8003bb0 <UART_SetConfig+0x248>
 8003b9e:	e00f      	b.n	8003bc0 <UART_SetConfig+0x258>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba6:	e052      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bae:	e04e      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb6:	e04a      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003bb8:	2308      	movs	r3, #8
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bbe:	e046      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003bc0:	2310      	movs	r3, #16
 8003bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc6:	e042      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <UART_SetConfig+0x2c4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d13a      	bne.n	8003c48 <UART_SetConfig+0x2e0>
 8003bd2:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <UART_SetConfig+0x2cc>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003be0:	d01a      	beq.n	8003c18 <UART_SetConfig+0x2b0>
 8003be2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003be6:	d81b      	bhi.n	8003c20 <UART_SetConfig+0x2b8>
 8003be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bec:	d00c      	beq.n	8003c08 <UART_SetConfig+0x2a0>
 8003bee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf2:	d815      	bhi.n	8003c20 <UART_SetConfig+0x2b8>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <UART_SetConfig+0x298>
 8003bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfc:	d008      	beq.n	8003c10 <UART_SetConfig+0x2a8>
 8003bfe:	e00f      	b.n	8003c20 <UART_SetConfig+0x2b8>
 8003c00:	2300      	movs	r3, #0
 8003c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c06:	e022      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c0e:	e01e      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003c10:	2304      	movs	r3, #4
 8003c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c16:	e01a      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003c18:	2308      	movs	r3, #8
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c1e:	e016      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003c20:	2310      	movs	r3, #16
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c26:	e012      	b.n	8003c4e <UART_SetConfig+0x2e6>
 8003c28:	efff69f3 	.word	0xefff69f3
 8003c2c:	40008000 	.word	0x40008000
 8003c30:	40013800 	.word	0x40013800
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40004400 	.word	0x40004400
 8003c3c:	40004800 	.word	0x40004800
 8003c40:	40004c00 	.word	0x40004c00
 8003c44:	40005000 	.word	0x40005000
 8003c48:	2310      	movs	r3, #16
 8003c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a9f      	ldr	r2, [pc, #636]	; (8003ed0 <UART_SetConfig+0x568>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d17a      	bne.n	8003d4e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d824      	bhi.n	8003caa <UART_SetConfig+0x342>
 8003c60:	a201      	add	r2, pc, #4	; (adr r2, 8003c68 <UART_SetConfig+0x300>)
 8003c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c66:	bf00      	nop
 8003c68:	08003c8d 	.word	0x08003c8d
 8003c6c:	08003cab 	.word	0x08003cab
 8003c70:	08003c95 	.word	0x08003c95
 8003c74:	08003cab 	.word	0x08003cab
 8003c78:	08003c9b 	.word	0x08003c9b
 8003c7c:	08003cab 	.word	0x08003cab
 8003c80:	08003cab 	.word	0x08003cab
 8003c84:	08003cab 	.word	0x08003cab
 8003c88:	08003ca3 	.word	0x08003ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c8c:	f7ff f83c 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 8003c90:	61f8      	str	r0, [r7, #28]
        break;
 8003c92:	e010      	b.n	8003cb6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c94:	4b8f      	ldr	r3, [pc, #572]	; (8003ed4 <UART_SetConfig+0x56c>)
 8003c96:	61fb      	str	r3, [r7, #28]
        break;
 8003c98:	e00d      	b.n	8003cb6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c9a:	f7fe ff9d 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8003c9e:	61f8      	str	r0, [r7, #28]
        break;
 8003ca0:	e009      	b.n	8003cb6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca6:	61fb      	str	r3, [r7, #28]
        break;
 8003ca8:	e005      	b.n	8003cb6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80fb 	beq.w	8003eb4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	4413      	add	r3, r2
 8003cc8:	69fa      	ldr	r2, [r7, #28]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d305      	bcc.n	8003cda <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d903      	bls.n	8003ce2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ce0:	e0e8      	b.n	8003eb4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	461c      	mov	r4, r3
 8003ce8:	4615      	mov	r5, r2
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	022b      	lsls	r3, r5, #8
 8003cf4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003cf8:	0222      	lsls	r2, r4, #8
 8003cfa:	68f9      	ldr	r1, [r7, #12]
 8003cfc:	6849      	ldr	r1, [r1, #4]
 8003cfe:	0849      	lsrs	r1, r1, #1
 8003d00:	2000      	movs	r0, #0
 8003d02:	4688      	mov	r8, r1
 8003d04:	4681      	mov	r9, r0
 8003d06:	eb12 0a08 	adds.w	sl, r2, r8
 8003d0a:	eb43 0b09 	adc.w	fp, r3, r9
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	603b      	str	r3, [r7, #0]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d1c:	4650      	mov	r0, sl
 8003d1e:	4659      	mov	r1, fp
 8003d20:	f7fc faae 	bl	8000280 <__aeabi_uldivmod>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4613      	mov	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d32:	d308      	bcc.n	8003d46 <UART_SetConfig+0x3de>
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d3a:	d204      	bcs.n	8003d46 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	60da      	str	r2, [r3, #12]
 8003d44:	e0b6      	b.n	8003eb4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d4c:	e0b2      	b.n	8003eb4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d56:	d15e      	bne.n	8003e16 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003d58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d828      	bhi.n	8003db2 <UART_SetConfig+0x44a>
 8003d60:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <UART_SetConfig+0x400>)
 8003d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d66:	bf00      	nop
 8003d68:	08003d8d 	.word	0x08003d8d
 8003d6c:	08003d95 	.word	0x08003d95
 8003d70:	08003d9d 	.word	0x08003d9d
 8003d74:	08003db3 	.word	0x08003db3
 8003d78:	08003da3 	.word	0x08003da3
 8003d7c:	08003db3 	.word	0x08003db3
 8003d80:	08003db3 	.word	0x08003db3
 8003d84:	08003db3 	.word	0x08003db3
 8003d88:	08003dab 	.word	0x08003dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d8c:	f7fe ffbc 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 8003d90:	61f8      	str	r0, [r7, #28]
        break;
 8003d92:	e014      	b.n	8003dbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d94:	f7fe ffce 	bl	8002d34 <HAL_RCC_GetPCLK2Freq>
 8003d98:	61f8      	str	r0, [r7, #28]
        break;
 8003d9a:	e010      	b.n	8003dbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d9c:	4b4d      	ldr	r3, [pc, #308]	; (8003ed4 <UART_SetConfig+0x56c>)
 8003d9e:	61fb      	str	r3, [r7, #28]
        break;
 8003da0:	e00d      	b.n	8003dbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003da2:	f7fe ff19 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8003da6:	61f8      	str	r0, [r7, #28]
        break;
 8003da8:	e009      	b.n	8003dbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dae:	61fb      	str	r3, [r7, #28]
        break;
 8003db0:	e005      	b.n	8003dbe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003dbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d077      	beq.n	8003eb4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	005a      	lsls	r2, r3, #1
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	085b      	lsrs	r3, r3, #1
 8003dce:	441a      	add	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	2b0f      	cmp	r3, #15
 8003dde:	d916      	bls.n	8003e0e <UART_SetConfig+0x4a6>
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de6:	d212      	bcs.n	8003e0e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	f023 030f 	bic.w	r3, r3, #15
 8003df0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	085b      	lsrs	r3, r3, #1
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	8afb      	ldrh	r3, [r7, #22]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	8afa      	ldrh	r2, [r7, #22]
 8003e0a:	60da      	str	r2, [r3, #12]
 8003e0c:	e052      	b.n	8003eb4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e14:	e04e      	b.n	8003eb4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d827      	bhi.n	8003e6e <UART_SetConfig+0x506>
 8003e1e:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <UART_SetConfig+0x4bc>)
 8003e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e24:	08003e49 	.word	0x08003e49
 8003e28:	08003e51 	.word	0x08003e51
 8003e2c:	08003e59 	.word	0x08003e59
 8003e30:	08003e6f 	.word	0x08003e6f
 8003e34:	08003e5f 	.word	0x08003e5f
 8003e38:	08003e6f 	.word	0x08003e6f
 8003e3c:	08003e6f 	.word	0x08003e6f
 8003e40:	08003e6f 	.word	0x08003e6f
 8003e44:	08003e67 	.word	0x08003e67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e48:	f7fe ff5e 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 8003e4c:	61f8      	str	r0, [r7, #28]
        break;
 8003e4e:	e014      	b.n	8003e7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e50:	f7fe ff70 	bl	8002d34 <HAL_RCC_GetPCLK2Freq>
 8003e54:	61f8      	str	r0, [r7, #28]
        break;
 8003e56:	e010      	b.n	8003e7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e58:	4b1e      	ldr	r3, [pc, #120]	; (8003ed4 <UART_SetConfig+0x56c>)
 8003e5a:	61fb      	str	r3, [r7, #28]
        break;
 8003e5c:	e00d      	b.n	8003e7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e5e:	f7fe febb 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8003e62:	61f8      	str	r0, [r7, #28]
        break;
 8003e64:	e009      	b.n	8003e7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e6a:	61fb      	str	r3, [r7, #28]
        break;
 8003e6c:	e005      	b.n	8003e7a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e78:	bf00      	nop
    }

    if (pclk != 0U)
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d019      	beq.n	8003eb4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	085a      	lsrs	r2, r3, #1
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	441a      	add	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e92:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	2b0f      	cmp	r3, #15
 8003e98:	d909      	bls.n	8003eae <UART_SetConfig+0x546>
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea0:	d205      	bcs.n	8003eae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60da      	str	r2, [r3, #12]
 8003eac:	e002      	b.n	8003eb4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ec0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3728      	adds	r7, #40	; 0x28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ece:	bf00      	nop
 8003ed0:	40008000 	.word	0x40008000
 8003ed4:	00f42400 	.word	0x00f42400

08003ed8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d01a      	beq.n	8003fee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fd6:	d10a      	bne.n	8003fee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	605a      	str	r2, [r3, #4]
  }
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b098      	sub	sp, #96	; 0x60
 8004020:	af02      	add	r7, sp, #8
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800402c:	f7fc ff80 	bl	8000f30 <HAL_GetTick>
 8004030:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b08      	cmp	r3, #8
 800403e:	d12e      	bne.n	800409e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004048:	2200      	movs	r2, #0
 800404a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f88c 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d021      	beq.n	800409e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004062:	e853 3f00 	ldrex	r3, [r3]
 8004066:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800406e:	653b      	str	r3, [r7, #80]	; 0x50
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	461a      	mov	r2, r3
 8004076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004078:	647b      	str	r3, [r7, #68]	; 0x44
 800407a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800407e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004080:	e841 2300 	strex	r3, r2, [r1]
 8004084:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e6      	bne.n	800405a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e062      	b.n	8004164 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d149      	bne.n	8004140 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b4:	2200      	movs	r2, #0
 80040b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f856 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d03c      	beq.n	8004140 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	623b      	str	r3, [r7, #32]
   return(result);
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e4:	633b      	str	r3, [r7, #48]	; 0x30
 80040e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e6      	bne.n	80040c6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3308      	adds	r3, #8
 80040fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	e853 3f00 	ldrex	r3, [r3]
 8004106:	60fb      	str	r3, [r7, #12]
   return(result);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0301 	bic.w	r3, r3, #1
 800410e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3308      	adds	r3, #8
 8004116:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004118:	61fa      	str	r2, [r7, #28]
 800411a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	69b9      	ldr	r1, [r7, #24]
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	617b      	str	r3, [r7, #20]
   return(result);
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e5      	bne.n	80040f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e011      	b.n	8004164 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3758      	adds	r7, #88	; 0x58
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	4613      	mov	r3, r2
 800417a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800417c:	e049      	b.n	8004212 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	d045      	beq.n	8004212 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004186:	f7fc fed3 	bl	8000f30 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	429a      	cmp	r2, r3
 8004194:	d302      	bcc.n	800419c <UART_WaitOnFlagUntilTimeout+0x30>
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e048      	b.n	8004232 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0304 	and.w	r3, r3, #4
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d031      	beq.n	8004212 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d110      	bne.n	80041de <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2208      	movs	r2, #8
 80041c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f838 	bl	800423a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2208      	movs	r2, #8
 80041ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e029      	b.n	8004232 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ec:	d111      	bne.n	8004212 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f81e 	bl	800423a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2220      	movs	r2, #32
 8004202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e00f      	b.n	8004232 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4013      	ands	r3, r2
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	429a      	cmp	r2, r3
 8004220:	bf0c      	ite	eq
 8004222:	2301      	moveq	r3, #1
 8004224:	2300      	movne	r3, #0
 8004226:	b2db      	uxtb	r3, r3
 8004228:	461a      	mov	r2, r3
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	429a      	cmp	r2, r3
 800422e:	d0a6      	beq.n	800417e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800423a:	b480      	push	{r7}
 800423c:	b095      	sub	sp, #84	; 0x54
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004252:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004260:	643b      	str	r3, [r7, #64]	; 0x40
 8004262:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004266:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800426e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e6      	bne.n	8004242 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3308      	adds	r3, #8
 800427a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	61fb      	str	r3, [r7, #28]
   return(result);
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f023 0301 	bic.w	r3, r3, #1
 800428a:	64bb      	str	r3, [r7, #72]	; 0x48
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3308      	adds	r3, #8
 8004292:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004294:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800429a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800429c:	e841 2300 	strex	r3, r2, [r1]
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e5      	bne.n	8004274 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d118      	bne.n	80042e2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	e853 3f00 	ldrex	r3, [r3]
 80042bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f023 0310 	bic.w	r3, r3, #16
 80042c4:	647b      	str	r3, [r7, #68]	; 0x44
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ce:	61bb      	str	r3, [r7, #24]
 80042d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d2:	6979      	ldr	r1, [r7, #20]
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	613b      	str	r3, [r7, #16]
   return(result);
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1e6      	bne.n	80042b0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042f6:	bf00      	nop
 80042f8:	3754      	adds	r7, #84	; 0x54
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
	...

08004304 <sniprintf>:
 8004304:	b40c      	push	{r2, r3}
 8004306:	b530      	push	{r4, r5, lr}
 8004308:	4b17      	ldr	r3, [pc, #92]	; (8004368 <sniprintf+0x64>)
 800430a:	1e0c      	subs	r4, r1, #0
 800430c:	681d      	ldr	r5, [r3, #0]
 800430e:	b09d      	sub	sp, #116	; 0x74
 8004310:	da08      	bge.n	8004324 <sniprintf+0x20>
 8004312:	238b      	movs	r3, #139	; 0x8b
 8004314:	602b      	str	r3, [r5, #0]
 8004316:	f04f 30ff 	mov.w	r0, #4294967295
 800431a:	b01d      	add	sp, #116	; 0x74
 800431c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004320:	b002      	add	sp, #8
 8004322:	4770      	bx	lr
 8004324:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004328:	f8ad 3014 	strh.w	r3, [sp, #20]
 800432c:	bf14      	ite	ne
 800432e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004332:	4623      	moveq	r3, r4
 8004334:	9304      	str	r3, [sp, #16]
 8004336:	9307      	str	r3, [sp, #28]
 8004338:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800433c:	9002      	str	r0, [sp, #8]
 800433e:	9006      	str	r0, [sp, #24]
 8004340:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004344:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004346:	ab21      	add	r3, sp, #132	; 0x84
 8004348:	a902      	add	r1, sp, #8
 800434a:	4628      	mov	r0, r5
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	f000 f9d1 	bl	80046f4 <_svfiprintf_r>
 8004352:	1c43      	adds	r3, r0, #1
 8004354:	bfbc      	itt	lt
 8004356:	238b      	movlt	r3, #139	; 0x8b
 8004358:	602b      	strlt	r3, [r5, #0]
 800435a:	2c00      	cmp	r4, #0
 800435c:	d0dd      	beq.n	800431a <sniprintf+0x16>
 800435e:	9b02      	ldr	r3, [sp, #8]
 8004360:	2200      	movs	r2, #0
 8004362:	701a      	strb	r2, [r3, #0]
 8004364:	e7d9      	b.n	800431a <sniprintf+0x16>
 8004366:	bf00      	nop
 8004368:	20000058 	.word	0x20000058

0800436c <siprintf>:
 800436c:	b40e      	push	{r1, r2, r3}
 800436e:	b500      	push	{lr}
 8004370:	b09c      	sub	sp, #112	; 0x70
 8004372:	ab1d      	add	r3, sp, #116	; 0x74
 8004374:	9002      	str	r0, [sp, #8]
 8004376:	9006      	str	r0, [sp, #24]
 8004378:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800437c:	4809      	ldr	r0, [pc, #36]	; (80043a4 <siprintf+0x38>)
 800437e:	9107      	str	r1, [sp, #28]
 8004380:	9104      	str	r1, [sp, #16]
 8004382:	4909      	ldr	r1, [pc, #36]	; (80043a8 <siprintf+0x3c>)
 8004384:	f853 2b04 	ldr.w	r2, [r3], #4
 8004388:	9105      	str	r1, [sp, #20]
 800438a:	6800      	ldr	r0, [r0, #0]
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	a902      	add	r1, sp, #8
 8004390:	f000 f9b0 	bl	80046f4 <_svfiprintf_r>
 8004394:	9b02      	ldr	r3, [sp, #8]
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]
 800439a:	b01c      	add	sp, #112	; 0x70
 800439c:	f85d eb04 	ldr.w	lr, [sp], #4
 80043a0:	b003      	add	sp, #12
 80043a2:	4770      	bx	lr
 80043a4:	20000058 	.word	0x20000058
 80043a8:	ffff0208 	.word	0xffff0208

080043ac <memset>:
 80043ac:	4402      	add	r2, r0
 80043ae:	4603      	mov	r3, r0
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d100      	bne.n	80043b6 <memset+0xa>
 80043b4:	4770      	bx	lr
 80043b6:	f803 1b01 	strb.w	r1, [r3], #1
 80043ba:	e7f9      	b.n	80043b0 <memset+0x4>

080043bc <strcat>:
 80043bc:	b510      	push	{r4, lr}
 80043be:	4602      	mov	r2, r0
 80043c0:	7814      	ldrb	r4, [r2, #0]
 80043c2:	4613      	mov	r3, r2
 80043c4:	3201      	adds	r2, #1
 80043c6:	2c00      	cmp	r4, #0
 80043c8:	d1fa      	bne.n	80043c0 <strcat+0x4>
 80043ca:	3b01      	subs	r3, #1
 80043cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043d4:	2a00      	cmp	r2, #0
 80043d6:	d1f9      	bne.n	80043cc <strcat+0x10>
 80043d8:	bd10      	pop	{r4, pc}
	...

080043dc <__errno>:
 80043dc:	4b01      	ldr	r3, [pc, #4]	; (80043e4 <__errno+0x8>)
 80043de:	6818      	ldr	r0, [r3, #0]
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	20000058 	.word	0x20000058

080043e8 <__libc_init_array>:
 80043e8:	b570      	push	{r4, r5, r6, lr}
 80043ea:	4d0d      	ldr	r5, [pc, #52]	; (8004420 <__libc_init_array+0x38>)
 80043ec:	4c0d      	ldr	r4, [pc, #52]	; (8004424 <__libc_init_array+0x3c>)
 80043ee:	1b64      	subs	r4, r4, r5
 80043f0:	10a4      	asrs	r4, r4, #2
 80043f2:	2600      	movs	r6, #0
 80043f4:	42a6      	cmp	r6, r4
 80043f6:	d109      	bne.n	800440c <__libc_init_array+0x24>
 80043f8:	4d0b      	ldr	r5, [pc, #44]	; (8004428 <__libc_init_array+0x40>)
 80043fa:	4c0c      	ldr	r4, [pc, #48]	; (800442c <__libc_init_array+0x44>)
 80043fc:	f000 fc6a 	bl	8004cd4 <_init>
 8004400:	1b64      	subs	r4, r4, r5
 8004402:	10a4      	asrs	r4, r4, #2
 8004404:	2600      	movs	r6, #0
 8004406:	42a6      	cmp	r6, r4
 8004408:	d105      	bne.n	8004416 <__libc_init_array+0x2e>
 800440a:	bd70      	pop	{r4, r5, r6, pc}
 800440c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004410:	4798      	blx	r3
 8004412:	3601      	adds	r6, #1
 8004414:	e7ee      	b.n	80043f4 <__libc_init_array+0xc>
 8004416:	f855 3b04 	ldr.w	r3, [r5], #4
 800441a:	4798      	blx	r3
 800441c:	3601      	adds	r6, #1
 800441e:	e7f2      	b.n	8004406 <__libc_init_array+0x1e>
 8004420:	08004dd4 	.word	0x08004dd4
 8004424:	08004dd4 	.word	0x08004dd4
 8004428:	08004dd4 	.word	0x08004dd4
 800442c:	08004dd8 	.word	0x08004dd8

08004430 <__retarget_lock_acquire_recursive>:
 8004430:	4770      	bx	lr

08004432 <__retarget_lock_release_recursive>:
 8004432:	4770      	bx	lr

08004434 <memcpy>:
 8004434:	440a      	add	r2, r1
 8004436:	4291      	cmp	r1, r2
 8004438:	f100 33ff 	add.w	r3, r0, #4294967295
 800443c:	d100      	bne.n	8004440 <memcpy+0xc>
 800443e:	4770      	bx	lr
 8004440:	b510      	push	{r4, lr}
 8004442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800444a:	4291      	cmp	r1, r2
 800444c:	d1f9      	bne.n	8004442 <memcpy+0xe>
 800444e:	bd10      	pop	{r4, pc}

08004450 <_free_r>:
 8004450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004452:	2900      	cmp	r1, #0
 8004454:	d044      	beq.n	80044e0 <_free_r+0x90>
 8004456:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800445a:	9001      	str	r0, [sp, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	f1a1 0404 	sub.w	r4, r1, #4
 8004462:	bfb8      	it	lt
 8004464:	18e4      	addlt	r4, r4, r3
 8004466:	f000 f8df 	bl	8004628 <__malloc_lock>
 800446a:	4a1e      	ldr	r2, [pc, #120]	; (80044e4 <_free_r+0x94>)
 800446c:	9801      	ldr	r0, [sp, #4]
 800446e:	6813      	ldr	r3, [r2, #0]
 8004470:	b933      	cbnz	r3, 8004480 <_free_r+0x30>
 8004472:	6063      	str	r3, [r4, #4]
 8004474:	6014      	str	r4, [r2, #0]
 8004476:	b003      	add	sp, #12
 8004478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800447c:	f000 b8da 	b.w	8004634 <__malloc_unlock>
 8004480:	42a3      	cmp	r3, r4
 8004482:	d908      	bls.n	8004496 <_free_r+0x46>
 8004484:	6825      	ldr	r5, [r4, #0]
 8004486:	1961      	adds	r1, r4, r5
 8004488:	428b      	cmp	r3, r1
 800448a:	bf01      	itttt	eq
 800448c:	6819      	ldreq	r1, [r3, #0]
 800448e:	685b      	ldreq	r3, [r3, #4]
 8004490:	1949      	addeq	r1, r1, r5
 8004492:	6021      	streq	r1, [r4, #0]
 8004494:	e7ed      	b.n	8004472 <_free_r+0x22>
 8004496:	461a      	mov	r2, r3
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	b10b      	cbz	r3, 80044a0 <_free_r+0x50>
 800449c:	42a3      	cmp	r3, r4
 800449e:	d9fa      	bls.n	8004496 <_free_r+0x46>
 80044a0:	6811      	ldr	r1, [r2, #0]
 80044a2:	1855      	adds	r5, r2, r1
 80044a4:	42a5      	cmp	r5, r4
 80044a6:	d10b      	bne.n	80044c0 <_free_r+0x70>
 80044a8:	6824      	ldr	r4, [r4, #0]
 80044aa:	4421      	add	r1, r4
 80044ac:	1854      	adds	r4, r2, r1
 80044ae:	42a3      	cmp	r3, r4
 80044b0:	6011      	str	r1, [r2, #0]
 80044b2:	d1e0      	bne.n	8004476 <_free_r+0x26>
 80044b4:	681c      	ldr	r4, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	6053      	str	r3, [r2, #4]
 80044ba:	440c      	add	r4, r1
 80044bc:	6014      	str	r4, [r2, #0]
 80044be:	e7da      	b.n	8004476 <_free_r+0x26>
 80044c0:	d902      	bls.n	80044c8 <_free_r+0x78>
 80044c2:	230c      	movs	r3, #12
 80044c4:	6003      	str	r3, [r0, #0]
 80044c6:	e7d6      	b.n	8004476 <_free_r+0x26>
 80044c8:	6825      	ldr	r5, [r4, #0]
 80044ca:	1961      	adds	r1, r4, r5
 80044cc:	428b      	cmp	r3, r1
 80044ce:	bf04      	itt	eq
 80044d0:	6819      	ldreq	r1, [r3, #0]
 80044d2:	685b      	ldreq	r3, [r3, #4]
 80044d4:	6063      	str	r3, [r4, #4]
 80044d6:	bf04      	itt	eq
 80044d8:	1949      	addeq	r1, r1, r5
 80044da:	6021      	streq	r1, [r4, #0]
 80044dc:	6054      	str	r4, [r2, #4]
 80044de:	e7ca      	b.n	8004476 <_free_r+0x26>
 80044e0:	b003      	add	sp, #12
 80044e2:	bd30      	pop	{r4, r5, pc}
 80044e4:	200006f0 	.word	0x200006f0

080044e8 <sbrk_aligned>:
 80044e8:	b570      	push	{r4, r5, r6, lr}
 80044ea:	4e0e      	ldr	r6, [pc, #56]	; (8004524 <sbrk_aligned+0x3c>)
 80044ec:	460c      	mov	r4, r1
 80044ee:	6831      	ldr	r1, [r6, #0]
 80044f0:	4605      	mov	r5, r0
 80044f2:	b911      	cbnz	r1, 80044fa <sbrk_aligned+0x12>
 80044f4:	f000 fba6 	bl	8004c44 <_sbrk_r>
 80044f8:	6030      	str	r0, [r6, #0]
 80044fa:	4621      	mov	r1, r4
 80044fc:	4628      	mov	r0, r5
 80044fe:	f000 fba1 	bl	8004c44 <_sbrk_r>
 8004502:	1c43      	adds	r3, r0, #1
 8004504:	d00a      	beq.n	800451c <sbrk_aligned+0x34>
 8004506:	1cc4      	adds	r4, r0, #3
 8004508:	f024 0403 	bic.w	r4, r4, #3
 800450c:	42a0      	cmp	r0, r4
 800450e:	d007      	beq.n	8004520 <sbrk_aligned+0x38>
 8004510:	1a21      	subs	r1, r4, r0
 8004512:	4628      	mov	r0, r5
 8004514:	f000 fb96 	bl	8004c44 <_sbrk_r>
 8004518:	3001      	adds	r0, #1
 800451a:	d101      	bne.n	8004520 <sbrk_aligned+0x38>
 800451c:	f04f 34ff 	mov.w	r4, #4294967295
 8004520:	4620      	mov	r0, r4
 8004522:	bd70      	pop	{r4, r5, r6, pc}
 8004524:	200006f4 	.word	0x200006f4

08004528 <_malloc_r>:
 8004528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800452c:	1ccd      	adds	r5, r1, #3
 800452e:	f025 0503 	bic.w	r5, r5, #3
 8004532:	3508      	adds	r5, #8
 8004534:	2d0c      	cmp	r5, #12
 8004536:	bf38      	it	cc
 8004538:	250c      	movcc	r5, #12
 800453a:	2d00      	cmp	r5, #0
 800453c:	4607      	mov	r7, r0
 800453e:	db01      	blt.n	8004544 <_malloc_r+0x1c>
 8004540:	42a9      	cmp	r1, r5
 8004542:	d905      	bls.n	8004550 <_malloc_r+0x28>
 8004544:	230c      	movs	r3, #12
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	2600      	movs	r6, #0
 800454a:	4630      	mov	r0, r6
 800454c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004550:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004624 <_malloc_r+0xfc>
 8004554:	f000 f868 	bl	8004628 <__malloc_lock>
 8004558:	f8d8 3000 	ldr.w	r3, [r8]
 800455c:	461c      	mov	r4, r3
 800455e:	bb5c      	cbnz	r4, 80045b8 <_malloc_r+0x90>
 8004560:	4629      	mov	r1, r5
 8004562:	4638      	mov	r0, r7
 8004564:	f7ff ffc0 	bl	80044e8 <sbrk_aligned>
 8004568:	1c43      	adds	r3, r0, #1
 800456a:	4604      	mov	r4, r0
 800456c:	d155      	bne.n	800461a <_malloc_r+0xf2>
 800456e:	f8d8 4000 	ldr.w	r4, [r8]
 8004572:	4626      	mov	r6, r4
 8004574:	2e00      	cmp	r6, #0
 8004576:	d145      	bne.n	8004604 <_malloc_r+0xdc>
 8004578:	2c00      	cmp	r4, #0
 800457a:	d048      	beq.n	800460e <_malloc_r+0xe6>
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	4631      	mov	r1, r6
 8004580:	4638      	mov	r0, r7
 8004582:	eb04 0903 	add.w	r9, r4, r3
 8004586:	f000 fb5d 	bl	8004c44 <_sbrk_r>
 800458a:	4581      	cmp	r9, r0
 800458c:	d13f      	bne.n	800460e <_malloc_r+0xe6>
 800458e:	6821      	ldr	r1, [r4, #0]
 8004590:	1a6d      	subs	r5, r5, r1
 8004592:	4629      	mov	r1, r5
 8004594:	4638      	mov	r0, r7
 8004596:	f7ff ffa7 	bl	80044e8 <sbrk_aligned>
 800459a:	3001      	adds	r0, #1
 800459c:	d037      	beq.n	800460e <_malloc_r+0xe6>
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	442b      	add	r3, r5
 80045a2:	6023      	str	r3, [r4, #0]
 80045a4:	f8d8 3000 	ldr.w	r3, [r8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d038      	beq.n	800461e <_malloc_r+0xf6>
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	42a2      	cmp	r2, r4
 80045b0:	d12b      	bne.n	800460a <_malloc_r+0xe2>
 80045b2:	2200      	movs	r2, #0
 80045b4:	605a      	str	r2, [r3, #4]
 80045b6:	e00f      	b.n	80045d8 <_malloc_r+0xb0>
 80045b8:	6822      	ldr	r2, [r4, #0]
 80045ba:	1b52      	subs	r2, r2, r5
 80045bc:	d41f      	bmi.n	80045fe <_malloc_r+0xd6>
 80045be:	2a0b      	cmp	r2, #11
 80045c0:	d917      	bls.n	80045f2 <_malloc_r+0xca>
 80045c2:	1961      	adds	r1, r4, r5
 80045c4:	42a3      	cmp	r3, r4
 80045c6:	6025      	str	r5, [r4, #0]
 80045c8:	bf18      	it	ne
 80045ca:	6059      	strne	r1, [r3, #4]
 80045cc:	6863      	ldr	r3, [r4, #4]
 80045ce:	bf08      	it	eq
 80045d0:	f8c8 1000 	streq.w	r1, [r8]
 80045d4:	5162      	str	r2, [r4, r5]
 80045d6:	604b      	str	r3, [r1, #4]
 80045d8:	4638      	mov	r0, r7
 80045da:	f104 060b 	add.w	r6, r4, #11
 80045de:	f000 f829 	bl	8004634 <__malloc_unlock>
 80045e2:	f026 0607 	bic.w	r6, r6, #7
 80045e6:	1d23      	adds	r3, r4, #4
 80045e8:	1af2      	subs	r2, r6, r3
 80045ea:	d0ae      	beq.n	800454a <_malloc_r+0x22>
 80045ec:	1b9b      	subs	r3, r3, r6
 80045ee:	50a3      	str	r3, [r4, r2]
 80045f0:	e7ab      	b.n	800454a <_malloc_r+0x22>
 80045f2:	42a3      	cmp	r3, r4
 80045f4:	6862      	ldr	r2, [r4, #4]
 80045f6:	d1dd      	bne.n	80045b4 <_malloc_r+0x8c>
 80045f8:	f8c8 2000 	str.w	r2, [r8]
 80045fc:	e7ec      	b.n	80045d8 <_malloc_r+0xb0>
 80045fe:	4623      	mov	r3, r4
 8004600:	6864      	ldr	r4, [r4, #4]
 8004602:	e7ac      	b.n	800455e <_malloc_r+0x36>
 8004604:	4634      	mov	r4, r6
 8004606:	6876      	ldr	r6, [r6, #4]
 8004608:	e7b4      	b.n	8004574 <_malloc_r+0x4c>
 800460a:	4613      	mov	r3, r2
 800460c:	e7cc      	b.n	80045a8 <_malloc_r+0x80>
 800460e:	230c      	movs	r3, #12
 8004610:	603b      	str	r3, [r7, #0]
 8004612:	4638      	mov	r0, r7
 8004614:	f000 f80e 	bl	8004634 <__malloc_unlock>
 8004618:	e797      	b.n	800454a <_malloc_r+0x22>
 800461a:	6025      	str	r5, [r4, #0]
 800461c:	e7dc      	b.n	80045d8 <_malloc_r+0xb0>
 800461e:	605b      	str	r3, [r3, #4]
 8004620:	deff      	udf	#255	; 0xff
 8004622:	bf00      	nop
 8004624:	200006f0 	.word	0x200006f0

08004628 <__malloc_lock>:
 8004628:	4801      	ldr	r0, [pc, #4]	; (8004630 <__malloc_lock+0x8>)
 800462a:	f7ff bf01 	b.w	8004430 <__retarget_lock_acquire_recursive>
 800462e:	bf00      	nop
 8004630:	200006ec 	.word	0x200006ec

08004634 <__malloc_unlock>:
 8004634:	4801      	ldr	r0, [pc, #4]	; (800463c <__malloc_unlock+0x8>)
 8004636:	f7ff befc 	b.w	8004432 <__retarget_lock_release_recursive>
 800463a:	bf00      	nop
 800463c:	200006ec 	.word	0x200006ec

08004640 <__ssputs_r>:
 8004640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004644:	688e      	ldr	r6, [r1, #8]
 8004646:	461f      	mov	r7, r3
 8004648:	42be      	cmp	r6, r7
 800464a:	680b      	ldr	r3, [r1, #0]
 800464c:	4682      	mov	sl, r0
 800464e:	460c      	mov	r4, r1
 8004650:	4690      	mov	r8, r2
 8004652:	d82c      	bhi.n	80046ae <__ssputs_r+0x6e>
 8004654:	898a      	ldrh	r2, [r1, #12]
 8004656:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800465a:	d026      	beq.n	80046aa <__ssputs_r+0x6a>
 800465c:	6965      	ldr	r5, [r4, #20]
 800465e:	6909      	ldr	r1, [r1, #16]
 8004660:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004664:	eba3 0901 	sub.w	r9, r3, r1
 8004668:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800466c:	1c7b      	adds	r3, r7, #1
 800466e:	444b      	add	r3, r9
 8004670:	106d      	asrs	r5, r5, #1
 8004672:	429d      	cmp	r5, r3
 8004674:	bf38      	it	cc
 8004676:	461d      	movcc	r5, r3
 8004678:	0553      	lsls	r3, r2, #21
 800467a:	d527      	bpl.n	80046cc <__ssputs_r+0x8c>
 800467c:	4629      	mov	r1, r5
 800467e:	f7ff ff53 	bl	8004528 <_malloc_r>
 8004682:	4606      	mov	r6, r0
 8004684:	b360      	cbz	r0, 80046e0 <__ssputs_r+0xa0>
 8004686:	6921      	ldr	r1, [r4, #16]
 8004688:	464a      	mov	r2, r9
 800468a:	f7ff fed3 	bl	8004434 <memcpy>
 800468e:	89a3      	ldrh	r3, [r4, #12]
 8004690:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004698:	81a3      	strh	r3, [r4, #12]
 800469a:	6126      	str	r6, [r4, #16]
 800469c:	6165      	str	r5, [r4, #20]
 800469e:	444e      	add	r6, r9
 80046a0:	eba5 0509 	sub.w	r5, r5, r9
 80046a4:	6026      	str	r6, [r4, #0]
 80046a6:	60a5      	str	r5, [r4, #8]
 80046a8:	463e      	mov	r6, r7
 80046aa:	42be      	cmp	r6, r7
 80046ac:	d900      	bls.n	80046b0 <__ssputs_r+0x70>
 80046ae:	463e      	mov	r6, r7
 80046b0:	6820      	ldr	r0, [r4, #0]
 80046b2:	4632      	mov	r2, r6
 80046b4:	4641      	mov	r1, r8
 80046b6:	f000 faab 	bl	8004c10 <memmove>
 80046ba:	68a3      	ldr	r3, [r4, #8]
 80046bc:	1b9b      	subs	r3, r3, r6
 80046be:	60a3      	str	r3, [r4, #8]
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	4433      	add	r3, r6
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	2000      	movs	r0, #0
 80046c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046cc:	462a      	mov	r2, r5
 80046ce:	f000 fac9 	bl	8004c64 <_realloc_r>
 80046d2:	4606      	mov	r6, r0
 80046d4:	2800      	cmp	r0, #0
 80046d6:	d1e0      	bne.n	800469a <__ssputs_r+0x5a>
 80046d8:	6921      	ldr	r1, [r4, #16]
 80046da:	4650      	mov	r0, sl
 80046dc:	f7ff feb8 	bl	8004450 <_free_r>
 80046e0:	230c      	movs	r3, #12
 80046e2:	f8ca 3000 	str.w	r3, [sl]
 80046e6:	89a3      	ldrh	r3, [r4, #12]
 80046e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ec:	81a3      	strh	r3, [r4, #12]
 80046ee:	f04f 30ff 	mov.w	r0, #4294967295
 80046f2:	e7e9      	b.n	80046c8 <__ssputs_r+0x88>

080046f4 <_svfiprintf_r>:
 80046f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046f8:	4698      	mov	r8, r3
 80046fa:	898b      	ldrh	r3, [r1, #12]
 80046fc:	061b      	lsls	r3, r3, #24
 80046fe:	b09d      	sub	sp, #116	; 0x74
 8004700:	4607      	mov	r7, r0
 8004702:	460d      	mov	r5, r1
 8004704:	4614      	mov	r4, r2
 8004706:	d50e      	bpl.n	8004726 <_svfiprintf_r+0x32>
 8004708:	690b      	ldr	r3, [r1, #16]
 800470a:	b963      	cbnz	r3, 8004726 <_svfiprintf_r+0x32>
 800470c:	2140      	movs	r1, #64	; 0x40
 800470e:	f7ff ff0b 	bl	8004528 <_malloc_r>
 8004712:	6028      	str	r0, [r5, #0]
 8004714:	6128      	str	r0, [r5, #16]
 8004716:	b920      	cbnz	r0, 8004722 <_svfiprintf_r+0x2e>
 8004718:	230c      	movs	r3, #12
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	f04f 30ff 	mov.w	r0, #4294967295
 8004720:	e0d0      	b.n	80048c4 <_svfiprintf_r+0x1d0>
 8004722:	2340      	movs	r3, #64	; 0x40
 8004724:	616b      	str	r3, [r5, #20]
 8004726:	2300      	movs	r3, #0
 8004728:	9309      	str	r3, [sp, #36]	; 0x24
 800472a:	2320      	movs	r3, #32
 800472c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004730:	f8cd 800c 	str.w	r8, [sp, #12]
 8004734:	2330      	movs	r3, #48	; 0x30
 8004736:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80048dc <_svfiprintf_r+0x1e8>
 800473a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800473e:	f04f 0901 	mov.w	r9, #1
 8004742:	4623      	mov	r3, r4
 8004744:	469a      	mov	sl, r3
 8004746:	f813 2b01 	ldrb.w	r2, [r3], #1
 800474a:	b10a      	cbz	r2, 8004750 <_svfiprintf_r+0x5c>
 800474c:	2a25      	cmp	r2, #37	; 0x25
 800474e:	d1f9      	bne.n	8004744 <_svfiprintf_r+0x50>
 8004750:	ebba 0b04 	subs.w	fp, sl, r4
 8004754:	d00b      	beq.n	800476e <_svfiprintf_r+0x7a>
 8004756:	465b      	mov	r3, fp
 8004758:	4622      	mov	r2, r4
 800475a:	4629      	mov	r1, r5
 800475c:	4638      	mov	r0, r7
 800475e:	f7ff ff6f 	bl	8004640 <__ssputs_r>
 8004762:	3001      	adds	r0, #1
 8004764:	f000 80a9 	beq.w	80048ba <_svfiprintf_r+0x1c6>
 8004768:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800476a:	445a      	add	r2, fp
 800476c:	9209      	str	r2, [sp, #36]	; 0x24
 800476e:	f89a 3000 	ldrb.w	r3, [sl]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 80a1 	beq.w	80048ba <_svfiprintf_r+0x1c6>
 8004778:	2300      	movs	r3, #0
 800477a:	f04f 32ff 	mov.w	r2, #4294967295
 800477e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004782:	f10a 0a01 	add.w	sl, sl, #1
 8004786:	9304      	str	r3, [sp, #16]
 8004788:	9307      	str	r3, [sp, #28]
 800478a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800478e:	931a      	str	r3, [sp, #104]	; 0x68
 8004790:	4654      	mov	r4, sl
 8004792:	2205      	movs	r2, #5
 8004794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004798:	4850      	ldr	r0, [pc, #320]	; (80048dc <_svfiprintf_r+0x1e8>)
 800479a:	f7fb fd21 	bl	80001e0 <memchr>
 800479e:	9a04      	ldr	r2, [sp, #16]
 80047a0:	b9d8      	cbnz	r0, 80047da <_svfiprintf_r+0xe6>
 80047a2:	06d0      	lsls	r0, r2, #27
 80047a4:	bf44      	itt	mi
 80047a6:	2320      	movmi	r3, #32
 80047a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047ac:	0711      	lsls	r1, r2, #28
 80047ae:	bf44      	itt	mi
 80047b0:	232b      	movmi	r3, #43	; 0x2b
 80047b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047b6:	f89a 3000 	ldrb.w	r3, [sl]
 80047ba:	2b2a      	cmp	r3, #42	; 0x2a
 80047bc:	d015      	beq.n	80047ea <_svfiprintf_r+0xf6>
 80047be:	9a07      	ldr	r2, [sp, #28]
 80047c0:	4654      	mov	r4, sl
 80047c2:	2000      	movs	r0, #0
 80047c4:	f04f 0c0a 	mov.w	ip, #10
 80047c8:	4621      	mov	r1, r4
 80047ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047ce:	3b30      	subs	r3, #48	; 0x30
 80047d0:	2b09      	cmp	r3, #9
 80047d2:	d94d      	bls.n	8004870 <_svfiprintf_r+0x17c>
 80047d4:	b1b0      	cbz	r0, 8004804 <_svfiprintf_r+0x110>
 80047d6:	9207      	str	r2, [sp, #28]
 80047d8:	e014      	b.n	8004804 <_svfiprintf_r+0x110>
 80047da:	eba0 0308 	sub.w	r3, r0, r8
 80047de:	fa09 f303 	lsl.w	r3, r9, r3
 80047e2:	4313      	orrs	r3, r2
 80047e4:	9304      	str	r3, [sp, #16]
 80047e6:	46a2      	mov	sl, r4
 80047e8:	e7d2      	b.n	8004790 <_svfiprintf_r+0x9c>
 80047ea:	9b03      	ldr	r3, [sp, #12]
 80047ec:	1d19      	adds	r1, r3, #4
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	9103      	str	r1, [sp, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	bfbb      	ittet	lt
 80047f6:	425b      	neglt	r3, r3
 80047f8:	f042 0202 	orrlt.w	r2, r2, #2
 80047fc:	9307      	strge	r3, [sp, #28]
 80047fe:	9307      	strlt	r3, [sp, #28]
 8004800:	bfb8      	it	lt
 8004802:	9204      	strlt	r2, [sp, #16]
 8004804:	7823      	ldrb	r3, [r4, #0]
 8004806:	2b2e      	cmp	r3, #46	; 0x2e
 8004808:	d10c      	bne.n	8004824 <_svfiprintf_r+0x130>
 800480a:	7863      	ldrb	r3, [r4, #1]
 800480c:	2b2a      	cmp	r3, #42	; 0x2a
 800480e:	d134      	bne.n	800487a <_svfiprintf_r+0x186>
 8004810:	9b03      	ldr	r3, [sp, #12]
 8004812:	1d1a      	adds	r2, r3, #4
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	9203      	str	r2, [sp, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	bfb8      	it	lt
 800481c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004820:	3402      	adds	r4, #2
 8004822:	9305      	str	r3, [sp, #20]
 8004824:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80048ec <_svfiprintf_r+0x1f8>
 8004828:	7821      	ldrb	r1, [r4, #0]
 800482a:	2203      	movs	r2, #3
 800482c:	4650      	mov	r0, sl
 800482e:	f7fb fcd7 	bl	80001e0 <memchr>
 8004832:	b138      	cbz	r0, 8004844 <_svfiprintf_r+0x150>
 8004834:	9b04      	ldr	r3, [sp, #16]
 8004836:	eba0 000a 	sub.w	r0, r0, sl
 800483a:	2240      	movs	r2, #64	; 0x40
 800483c:	4082      	lsls	r2, r0
 800483e:	4313      	orrs	r3, r2
 8004840:	3401      	adds	r4, #1
 8004842:	9304      	str	r3, [sp, #16]
 8004844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004848:	4825      	ldr	r0, [pc, #148]	; (80048e0 <_svfiprintf_r+0x1ec>)
 800484a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800484e:	2206      	movs	r2, #6
 8004850:	f7fb fcc6 	bl	80001e0 <memchr>
 8004854:	2800      	cmp	r0, #0
 8004856:	d038      	beq.n	80048ca <_svfiprintf_r+0x1d6>
 8004858:	4b22      	ldr	r3, [pc, #136]	; (80048e4 <_svfiprintf_r+0x1f0>)
 800485a:	bb1b      	cbnz	r3, 80048a4 <_svfiprintf_r+0x1b0>
 800485c:	9b03      	ldr	r3, [sp, #12]
 800485e:	3307      	adds	r3, #7
 8004860:	f023 0307 	bic.w	r3, r3, #7
 8004864:	3308      	adds	r3, #8
 8004866:	9303      	str	r3, [sp, #12]
 8004868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800486a:	4433      	add	r3, r6
 800486c:	9309      	str	r3, [sp, #36]	; 0x24
 800486e:	e768      	b.n	8004742 <_svfiprintf_r+0x4e>
 8004870:	fb0c 3202 	mla	r2, ip, r2, r3
 8004874:	460c      	mov	r4, r1
 8004876:	2001      	movs	r0, #1
 8004878:	e7a6      	b.n	80047c8 <_svfiprintf_r+0xd4>
 800487a:	2300      	movs	r3, #0
 800487c:	3401      	adds	r4, #1
 800487e:	9305      	str	r3, [sp, #20]
 8004880:	4619      	mov	r1, r3
 8004882:	f04f 0c0a 	mov.w	ip, #10
 8004886:	4620      	mov	r0, r4
 8004888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800488c:	3a30      	subs	r2, #48	; 0x30
 800488e:	2a09      	cmp	r2, #9
 8004890:	d903      	bls.n	800489a <_svfiprintf_r+0x1a6>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0c6      	beq.n	8004824 <_svfiprintf_r+0x130>
 8004896:	9105      	str	r1, [sp, #20]
 8004898:	e7c4      	b.n	8004824 <_svfiprintf_r+0x130>
 800489a:	fb0c 2101 	mla	r1, ip, r1, r2
 800489e:	4604      	mov	r4, r0
 80048a0:	2301      	movs	r3, #1
 80048a2:	e7f0      	b.n	8004886 <_svfiprintf_r+0x192>
 80048a4:	ab03      	add	r3, sp, #12
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	462a      	mov	r2, r5
 80048aa:	4b0f      	ldr	r3, [pc, #60]	; (80048e8 <_svfiprintf_r+0x1f4>)
 80048ac:	a904      	add	r1, sp, #16
 80048ae:	4638      	mov	r0, r7
 80048b0:	f3af 8000 	nop.w
 80048b4:	1c42      	adds	r2, r0, #1
 80048b6:	4606      	mov	r6, r0
 80048b8:	d1d6      	bne.n	8004868 <_svfiprintf_r+0x174>
 80048ba:	89ab      	ldrh	r3, [r5, #12]
 80048bc:	065b      	lsls	r3, r3, #25
 80048be:	f53f af2d 	bmi.w	800471c <_svfiprintf_r+0x28>
 80048c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048c4:	b01d      	add	sp, #116	; 0x74
 80048c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ca:	ab03      	add	r3, sp, #12
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	462a      	mov	r2, r5
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <_svfiprintf_r+0x1f4>)
 80048d2:	a904      	add	r1, sp, #16
 80048d4:	4638      	mov	r0, r7
 80048d6:	f000 f879 	bl	80049cc <_printf_i>
 80048da:	e7eb      	b.n	80048b4 <_svfiprintf_r+0x1c0>
 80048dc:	08004d98 	.word	0x08004d98
 80048e0:	08004da2 	.word	0x08004da2
 80048e4:	00000000 	.word	0x00000000
 80048e8:	08004641 	.word	0x08004641
 80048ec:	08004d9e 	.word	0x08004d9e

080048f0 <_printf_common>:
 80048f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048f4:	4616      	mov	r6, r2
 80048f6:	4699      	mov	r9, r3
 80048f8:	688a      	ldr	r2, [r1, #8]
 80048fa:	690b      	ldr	r3, [r1, #16]
 80048fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004900:	4293      	cmp	r3, r2
 8004902:	bfb8      	it	lt
 8004904:	4613      	movlt	r3, r2
 8004906:	6033      	str	r3, [r6, #0]
 8004908:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800490c:	4607      	mov	r7, r0
 800490e:	460c      	mov	r4, r1
 8004910:	b10a      	cbz	r2, 8004916 <_printf_common+0x26>
 8004912:	3301      	adds	r3, #1
 8004914:	6033      	str	r3, [r6, #0]
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	0699      	lsls	r1, r3, #26
 800491a:	bf42      	ittt	mi
 800491c:	6833      	ldrmi	r3, [r6, #0]
 800491e:	3302      	addmi	r3, #2
 8004920:	6033      	strmi	r3, [r6, #0]
 8004922:	6825      	ldr	r5, [r4, #0]
 8004924:	f015 0506 	ands.w	r5, r5, #6
 8004928:	d106      	bne.n	8004938 <_printf_common+0x48>
 800492a:	f104 0a19 	add.w	sl, r4, #25
 800492e:	68e3      	ldr	r3, [r4, #12]
 8004930:	6832      	ldr	r2, [r6, #0]
 8004932:	1a9b      	subs	r3, r3, r2
 8004934:	42ab      	cmp	r3, r5
 8004936:	dc26      	bgt.n	8004986 <_printf_common+0x96>
 8004938:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800493c:	1e13      	subs	r3, r2, #0
 800493e:	6822      	ldr	r2, [r4, #0]
 8004940:	bf18      	it	ne
 8004942:	2301      	movne	r3, #1
 8004944:	0692      	lsls	r2, r2, #26
 8004946:	d42b      	bmi.n	80049a0 <_printf_common+0xb0>
 8004948:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800494c:	4649      	mov	r1, r9
 800494e:	4638      	mov	r0, r7
 8004950:	47c0      	blx	r8
 8004952:	3001      	adds	r0, #1
 8004954:	d01e      	beq.n	8004994 <_printf_common+0xa4>
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	6922      	ldr	r2, [r4, #16]
 800495a:	f003 0306 	and.w	r3, r3, #6
 800495e:	2b04      	cmp	r3, #4
 8004960:	bf02      	ittt	eq
 8004962:	68e5      	ldreq	r5, [r4, #12]
 8004964:	6833      	ldreq	r3, [r6, #0]
 8004966:	1aed      	subeq	r5, r5, r3
 8004968:	68a3      	ldr	r3, [r4, #8]
 800496a:	bf0c      	ite	eq
 800496c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004970:	2500      	movne	r5, #0
 8004972:	4293      	cmp	r3, r2
 8004974:	bfc4      	itt	gt
 8004976:	1a9b      	subgt	r3, r3, r2
 8004978:	18ed      	addgt	r5, r5, r3
 800497a:	2600      	movs	r6, #0
 800497c:	341a      	adds	r4, #26
 800497e:	42b5      	cmp	r5, r6
 8004980:	d11a      	bne.n	80049b8 <_printf_common+0xc8>
 8004982:	2000      	movs	r0, #0
 8004984:	e008      	b.n	8004998 <_printf_common+0xa8>
 8004986:	2301      	movs	r3, #1
 8004988:	4652      	mov	r2, sl
 800498a:	4649      	mov	r1, r9
 800498c:	4638      	mov	r0, r7
 800498e:	47c0      	blx	r8
 8004990:	3001      	adds	r0, #1
 8004992:	d103      	bne.n	800499c <_printf_common+0xac>
 8004994:	f04f 30ff 	mov.w	r0, #4294967295
 8004998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800499c:	3501      	adds	r5, #1
 800499e:	e7c6      	b.n	800492e <_printf_common+0x3e>
 80049a0:	18e1      	adds	r1, r4, r3
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	2030      	movs	r0, #48	; 0x30
 80049a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049aa:	4422      	add	r2, r4
 80049ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049b4:	3302      	adds	r3, #2
 80049b6:	e7c7      	b.n	8004948 <_printf_common+0x58>
 80049b8:	2301      	movs	r3, #1
 80049ba:	4622      	mov	r2, r4
 80049bc:	4649      	mov	r1, r9
 80049be:	4638      	mov	r0, r7
 80049c0:	47c0      	blx	r8
 80049c2:	3001      	adds	r0, #1
 80049c4:	d0e6      	beq.n	8004994 <_printf_common+0xa4>
 80049c6:	3601      	adds	r6, #1
 80049c8:	e7d9      	b.n	800497e <_printf_common+0x8e>
	...

080049cc <_printf_i>:
 80049cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049d0:	7e0f      	ldrb	r7, [r1, #24]
 80049d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049d4:	2f78      	cmp	r7, #120	; 0x78
 80049d6:	4691      	mov	r9, r2
 80049d8:	4680      	mov	r8, r0
 80049da:	460c      	mov	r4, r1
 80049dc:	469a      	mov	sl, r3
 80049de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049e2:	d807      	bhi.n	80049f4 <_printf_i+0x28>
 80049e4:	2f62      	cmp	r7, #98	; 0x62
 80049e6:	d80a      	bhi.n	80049fe <_printf_i+0x32>
 80049e8:	2f00      	cmp	r7, #0
 80049ea:	f000 80d4 	beq.w	8004b96 <_printf_i+0x1ca>
 80049ee:	2f58      	cmp	r7, #88	; 0x58
 80049f0:	f000 80c0 	beq.w	8004b74 <_printf_i+0x1a8>
 80049f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049fc:	e03a      	b.n	8004a74 <_printf_i+0xa8>
 80049fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a02:	2b15      	cmp	r3, #21
 8004a04:	d8f6      	bhi.n	80049f4 <_printf_i+0x28>
 8004a06:	a101      	add	r1, pc, #4	; (adr r1, 8004a0c <_printf_i+0x40>)
 8004a08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a0c:	08004a65 	.word	0x08004a65
 8004a10:	08004a79 	.word	0x08004a79
 8004a14:	080049f5 	.word	0x080049f5
 8004a18:	080049f5 	.word	0x080049f5
 8004a1c:	080049f5 	.word	0x080049f5
 8004a20:	080049f5 	.word	0x080049f5
 8004a24:	08004a79 	.word	0x08004a79
 8004a28:	080049f5 	.word	0x080049f5
 8004a2c:	080049f5 	.word	0x080049f5
 8004a30:	080049f5 	.word	0x080049f5
 8004a34:	080049f5 	.word	0x080049f5
 8004a38:	08004b7d 	.word	0x08004b7d
 8004a3c:	08004aa5 	.word	0x08004aa5
 8004a40:	08004b37 	.word	0x08004b37
 8004a44:	080049f5 	.word	0x080049f5
 8004a48:	080049f5 	.word	0x080049f5
 8004a4c:	08004b9f 	.word	0x08004b9f
 8004a50:	080049f5 	.word	0x080049f5
 8004a54:	08004aa5 	.word	0x08004aa5
 8004a58:	080049f5 	.word	0x080049f5
 8004a5c:	080049f5 	.word	0x080049f5
 8004a60:	08004b3f 	.word	0x08004b3f
 8004a64:	682b      	ldr	r3, [r5, #0]
 8004a66:	1d1a      	adds	r2, r3, #4
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	602a      	str	r2, [r5, #0]
 8004a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a74:	2301      	movs	r3, #1
 8004a76:	e09f      	b.n	8004bb8 <_printf_i+0x1ec>
 8004a78:	6820      	ldr	r0, [r4, #0]
 8004a7a:	682b      	ldr	r3, [r5, #0]
 8004a7c:	0607      	lsls	r7, r0, #24
 8004a7e:	f103 0104 	add.w	r1, r3, #4
 8004a82:	6029      	str	r1, [r5, #0]
 8004a84:	d501      	bpl.n	8004a8a <_printf_i+0xbe>
 8004a86:	681e      	ldr	r6, [r3, #0]
 8004a88:	e003      	b.n	8004a92 <_printf_i+0xc6>
 8004a8a:	0646      	lsls	r6, r0, #25
 8004a8c:	d5fb      	bpl.n	8004a86 <_printf_i+0xba>
 8004a8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a92:	2e00      	cmp	r6, #0
 8004a94:	da03      	bge.n	8004a9e <_printf_i+0xd2>
 8004a96:	232d      	movs	r3, #45	; 0x2d
 8004a98:	4276      	negs	r6, r6
 8004a9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a9e:	485a      	ldr	r0, [pc, #360]	; (8004c08 <_printf_i+0x23c>)
 8004aa0:	230a      	movs	r3, #10
 8004aa2:	e012      	b.n	8004aca <_printf_i+0xfe>
 8004aa4:	682b      	ldr	r3, [r5, #0]
 8004aa6:	6820      	ldr	r0, [r4, #0]
 8004aa8:	1d19      	adds	r1, r3, #4
 8004aaa:	6029      	str	r1, [r5, #0]
 8004aac:	0605      	lsls	r5, r0, #24
 8004aae:	d501      	bpl.n	8004ab4 <_printf_i+0xe8>
 8004ab0:	681e      	ldr	r6, [r3, #0]
 8004ab2:	e002      	b.n	8004aba <_printf_i+0xee>
 8004ab4:	0641      	lsls	r1, r0, #25
 8004ab6:	d5fb      	bpl.n	8004ab0 <_printf_i+0xe4>
 8004ab8:	881e      	ldrh	r6, [r3, #0]
 8004aba:	4853      	ldr	r0, [pc, #332]	; (8004c08 <_printf_i+0x23c>)
 8004abc:	2f6f      	cmp	r7, #111	; 0x6f
 8004abe:	bf0c      	ite	eq
 8004ac0:	2308      	moveq	r3, #8
 8004ac2:	230a      	movne	r3, #10
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aca:	6865      	ldr	r5, [r4, #4]
 8004acc:	60a5      	str	r5, [r4, #8]
 8004ace:	2d00      	cmp	r5, #0
 8004ad0:	bfa2      	ittt	ge
 8004ad2:	6821      	ldrge	r1, [r4, #0]
 8004ad4:	f021 0104 	bicge.w	r1, r1, #4
 8004ad8:	6021      	strge	r1, [r4, #0]
 8004ada:	b90e      	cbnz	r6, 8004ae0 <_printf_i+0x114>
 8004adc:	2d00      	cmp	r5, #0
 8004ade:	d04b      	beq.n	8004b78 <_printf_i+0x1ac>
 8004ae0:	4615      	mov	r5, r2
 8004ae2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ae6:	fb03 6711 	mls	r7, r3, r1, r6
 8004aea:	5dc7      	ldrb	r7, [r0, r7]
 8004aec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004af0:	4637      	mov	r7, r6
 8004af2:	42bb      	cmp	r3, r7
 8004af4:	460e      	mov	r6, r1
 8004af6:	d9f4      	bls.n	8004ae2 <_printf_i+0x116>
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d10b      	bne.n	8004b14 <_printf_i+0x148>
 8004afc:	6823      	ldr	r3, [r4, #0]
 8004afe:	07de      	lsls	r6, r3, #31
 8004b00:	d508      	bpl.n	8004b14 <_printf_i+0x148>
 8004b02:	6923      	ldr	r3, [r4, #16]
 8004b04:	6861      	ldr	r1, [r4, #4]
 8004b06:	4299      	cmp	r1, r3
 8004b08:	bfde      	ittt	le
 8004b0a:	2330      	movle	r3, #48	; 0x30
 8004b0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b14:	1b52      	subs	r2, r2, r5
 8004b16:	6122      	str	r2, [r4, #16]
 8004b18:	f8cd a000 	str.w	sl, [sp]
 8004b1c:	464b      	mov	r3, r9
 8004b1e:	aa03      	add	r2, sp, #12
 8004b20:	4621      	mov	r1, r4
 8004b22:	4640      	mov	r0, r8
 8004b24:	f7ff fee4 	bl	80048f0 <_printf_common>
 8004b28:	3001      	adds	r0, #1
 8004b2a:	d14a      	bne.n	8004bc2 <_printf_i+0x1f6>
 8004b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b30:	b004      	add	sp, #16
 8004b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	f043 0320 	orr.w	r3, r3, #32
 8004b3c:	6023      	str	r3, [r4, #0]
 8004b3e:	4833      	ldr	r0, [pc, #204]	; (8004c0c <_printf_i+0x240>)
 8004b40:	2778      	movs	r7, #120	; 0x78
 8004b42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	6829      	ldr	r1, [r5, #0]
 8004b4a:	061f      	lsls	r7, r3, #24
 8004b4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b50:	d402      	bmi.n	8004b58 <_printf_i+0x18c>
 8004b52:	065f      	lsls	r7, r3, #25
 8004b54:	bf48      	it	mi
 8004b56:	b2b6      	uxthmi	r6, r6
 8004b58:	07df      	lsls	r7, r3, #31
 8004b5a:	bf48      	it	mi
 8004b5c:	f043 0320 	orrmi.w	r3, r3, #32
 8004b60:	6029      	str	r1, [r5, #0]
 8004b62:	bf48      	it	mi
 8004b64:	6023      	strmi	r3, [r4, #0]
 8004b66:	b91e      	cbnz	r6, 8004b70 <_printf_i+0x1a4>
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	f023 0320 	bic.w	r3, r3, #32
 8004b6e:	6023      	str	r3, [r4, #0]
 8004b70:	2310      	movs	r3, #16
 8004b72:	e7a7      	b.n	8004ac4 <_printf_i+0xf8>
 8004b74:	4824      	ldr	r0, [pc, #144]	; (8004c08 <_printf_i+0x23c>)
 8004b76:	e7e4      	b.n	8004b42 <_printf_i+0x176>
 8004b78:	4615      	mov	r5, r2
 8004b7a:	e7bd      	b.n	8004af8 <_printf_i+0x12c>
 8004b7c:	682b      	ldr	r3, [r5, #0]
 8004b7e:	6826      	ldr	r6, [r4, #0]
 8004b80:	6961      	ldr	r1, [r4, #20]
 8004b82:	1d18      	adds	r0, r3, #4
 8004b84:	6028      	str	r0, [r5, #0]
 8004b86:	0635      	lsls	r5, r6, #24
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	d501      	bpl.n	8004b90 <_printf_i+0x1c4>
 8004b8c:	6019      	str	r1, [r3, #0]
 8004b8e:	e002      	b.n	8004b96 <_printf_i+0x1ca>
 8004b90:	0670      	lsls	r0, r6, #25
 8004b92:	d5fb      	bpl.n	8004b8c <_printf_i+0x1c0>
 8004b94:	8019      	strh	r1, [r3, #0]
 8004b96:	2300      	movs	r3, #0
 8004b98:	6123      	str	r3, [r4, #16]
 8004b9a:	4615      	mov	r5, r2
 8004b9c:	e7bc      	b.n	8004b18 <_printf_i+0x14c>
 8004b9e:	682b      	ldr	r3, [r5, #0]
 8004ba0:	1d1a      	adds	r2, r3, #4
 8004ba2:	602a      	str	r2, [r5, #0]
 8004ba4:	681d      	ldr	r5, [r3, #0]
 8004ba6:	6862      	ldr	r2, [r4, #4]
 8004ba8:	2100      	movs	r1, #0
 8004baa:	4628      	mov	r0, r5
 8004bac:	f7fb fb18 	bl	80001e0 <memchr>
 8004bb0:	b108      	cbz	r0, 8004bb6 <_printf_i+0x1ea>
 8004bb2:	1b40      	subs	r0, r0, r5
 8004bb4:	6060      	str	r0, [r4, #4]
 8004bb6:	6863      	ldr	r3, [r4, #4]
 8004bb8:	6123      	str	r3, [r4, #16]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bc0:	e7aa      	b.n	8004b18 <_printf_i+0x14c>
 8004bc2:	6923      	ldr	r3, [r4, #16]
 8004bc4:	462a      	mov	r2, r5
 8004bc6:	4649      	mov	r1, r9
 8004bc8:	4640      	mov	r0, r8
 8004bca:	47d0      	blx	sl
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d0ad      	beq.n	8004b2c <_printf_i+0x160>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	079b      	lsls	r3, r3, #30
 8004bd4:	d413      	bmi.n	8004bfe <_printf_i+0x232>
 8004bd6:	68e0      	ldr	r0, [r4, #12]
 8004bd8:	9b03      	ldr	r3, [sp, #12]
 8004bda:	4298      	cmp	r0, r3
 8004bdc:	bfb8      	it	lt
 8004bde:	4618      	movlt	r0, r3
 8004be0:	e7a6      	b.n	8004b30 <_printf_i+0x164>
 8004be2:	2301      	movs	r3, #1
 8004be4:	4632      	mov	r2, r6
 8004be6:	4649      	mov	r1, r9
 8004be8:	4640      	mov	r0, r8
 8004bea:	47d0      	blx	sl
 8004bec:	3001      	adds	r0, #1
 8004bee:	d09d      	beq.n	8004b2c <_printf_i+0x160>
 8004bf0:	3501      	adds	r5, #1
 8004bf2:	68e3      	ldr	r3, [r4, #12]
 8004bf4:	9903      	ldr	r1, [sp, #12]
 8004bf6:	1a5b      	subs	r3, r3, r1
 8004bf8:	42ab      	cmp	r3, r5
 8004bfa:	dcf2      	bgt.n	8004be2 <_printf_i+0x216>
 8004bfc:	e7eb      	b.n	8004bd6 <_printf_i+0x20a>
 8004bfe:	2500      	movs	r5, #0
 8004c00:	f104 0619 	add.w	r6, r4, #25
 8004c04:	e7f5      	b.n	8004bf2 <_printf_i+0x226>
 8004c06:	bf00      	nop
 8004c08:	08004da9 	.word	0x08004da9
 8004c0c:	08004dba 	.word	0x08004dba

08004c10 <memmove>:
 8004c10:	4288      	cmp	r0, r1
 8004c12:	b510      	push	{r4, lr}
 8004c14:	eb01 0402 	add.w	r4, r1, r2
 8004c18:	d902      	bls.n	8004c20 <memmove+0x10>
 8004c1a:	4284      	cmp	r4, r0
 8004c1c:	4623      	mov	r3, r4
 8004c1e:	d807      	bhi.n	8004c30 <memmove+0x20>
 8004c20:	1e43      	subs	r3, r0, #1
 8004c22:	42a1      	cmp	r1, r4
 8004c24:	d008      	beq.n	8004c38 <memmove+0x28>
 8004c26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c2e:	e7f8      	b.n	8004c22 <memmove+0x12>
 8004c30:	4402      	add	r2, r0
 8004c32:	4601      	mov	r1, r0
 8004c34:	428a      	cmp	r2, r1
 8004c36:	d100      	bne.n	8004c3a <memmove+0x2a>
 8004c38:	bd10      	pop	{r4, pc}
 8004c3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c42:	e7f7      	b.n	8004c34 <memmove+0x24>

08004c44 <_sbrk_r>:
 8004c44:	b538      	push	{r3, r4, r5, lr}
 8004c46:	4d06      	ldr	r5, [pc, #24]	; (8004c60 <_sbrk_r+0x1c>)
 8004c48:	2300      	movs	r3, #0
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	4608      	mov	r0, r1
 8004c4e:	602b      	str	r3, [r5, #0]
 8004c50:	f7fb ff76 	bl	8000b40 <_sbrk>
 8004c54:	1c43      	adds	r3, r0, #1
 8004c56:	d102      	bne.n	8004c5e <_sbrk_r+0x1a>
 8004c58:	682b      	ldr	r3, [r5, #0]
 8004c5a:	b103      	cbz	r3, 8004c5e <_sbrk_r+0x1a>
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	bd38      	pop	{r3, r4, r5, pc}
 8004c60:	200006e8 	.word	0x200006e8

08004c64 <_realloc_r>:
 8004c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c68:	4680      	mov	r8, r0
 8004c6a:	4614      	mov	r4, r2
 8004c6c:	460e      	mov	r6, r1
 8004c6e:	b921      	cbnz	r1, 8004c7a <_realloc_r+0x16>
 8004c70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c74:	4611      	mov	r1, r2
 8004c76:	f7ff bc57 	b.w	8004528 <_malloc_r>
 8004c7a:	b92a      	cbnz	r2, 8004c88 <_realloc_r+0x24>
 8004c7c:	f7ff fbe8 	bl	8004450 <_free_r>
 8004c80:	4625      	mov	r5, r4
 8004c82:	4628      	mov	r0, r5
 8004c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c88:	f000 f81b 	bl	8004cc2 <_malloc_usable_size_r>
 8004c8c:	4284      	cmp	r4, r0
 8004c8e:	4607      	mov	r7, r0
 8004c90:	d802      	bhi.n	8004c98 <_realloc_r+0x34>
 8004c92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c96:	d812      	bhi.n	8004cbe <_realloc_r+0x5a>
 8004c98:	4621      	mov	r1, r4
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	f7ff fc44 	bl	8004528 <_malloc_r>
 8004ca0:	4605      	mov	r5, r0
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	d0ed      	beq.n	8004c82 <_realloc_r+0x1e>
 8004ca6:	42bc      	cmp	r4, r7
 8004ca8:	4622      	mov	r2, r4
 8004caa:	4631      	mov	r1, r6
 8004cac:	bf28      	it	cs
 8004cae:	463a      	movcs	r2, r7
 8004cb0:	f7ff fbc0 	bl	8004434 <memcpy>
 8004cb4:	4631      	mov	r1, r6
 8004cb6:	4640      	mov	r0, r8
 8004cb8:	f7ff fbca 	bl	8004450 <_free_r>
 8004cbc:	e7e1      	b.n	8004c82 <_realloc_r+0x1e>
 8004cbe:	4635      	mov	r5, r6
 8004cc0:	e7df      	b.n	8004c82 <_realloc_r+0x1e>

08004cc2 <_malloc_usable_size_r>:
 8004cc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cc6:	1f18      	subs	r0, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	bfbc      	itt	lt
 8004ccc:	580b      	ldrlt	r3, [r1, r0]
 8004cce:	18c0      	addlt	r0, r0, r3
 8004cd0:	4770      	bx	lr
	...

08004cd4 <_init>:
 8004cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd6:	bf00      	nop
 8004cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cda:	bc08      	pop	{r3}
 8004cdc:	469e      	mov	lr, r3
 8004cde:	4770      	bx	lr

08004ce0 <_fini>:
 8004ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce2:	bf00      	nop
 8004ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ce6:	bc08      	pop	{r3}
 8004ce8:	469e      	mov	lr, r3
 8004cea:	4770      	bx	lr


garage_door_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006694  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006824  08006824  00016824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068b8  080068b8  000201d0  2**0
                  CONTENTS
  4 .ARM          00000008  080068b8  080068b8  000168b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068c0  080068c0  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068c0  080068c0  000168c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068c4  080068c4  000168c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  080068c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f4  200001d0  08006a98  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ac4  08006a98  00020ac4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017df7  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034da  00000000  00000000  0003803a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a8  00000000  00000000  0003b518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a4  00000000  00000000  0003cac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b99  00000000  00000000  0003db64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019f8f  00000000  00000000  000666fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4f3f  00000000  00000000  0008068c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060ec  00000000  00000000  001755cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0017b6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d0 	.word	0x200001d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800680c 	.word	0x0800680c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	0800680c 	.word	0x0800680c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2iz>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d215      	bcs.n	800061e <__aeabi_d2iz+0x36>
 80005f2:	d511      	bpl.n	8000618 <__aeabi_d2iz+0x30>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d912      	bls.n	8000624 <__aeabi_d2iz+0x3c>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800060e:	fa23 f002 	lsr.w	r0, r3, r2
 8000612:	bf18      	it	ne
 8000614:	4240      	negne	r0, r0
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000622:	d105      	bne.n	8000630 <__aeabi_d2iz+0x48>
 8000624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b970 	b.w	8000930 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9e08      	ldr	r6, [sp, #32]
 800066e:	460d      	mov	r5, r1
 8000670:	4604      	mov	r4, r0
 8000672:	460f      	mov	r7, r1
 8000674:	2b00      	cmp	r3, #0
 8000676:	d14a      	bne.n	800070e <__udivmoddi4+0xa6>
 8000678:	428a      	cmp	r2, r1
 800067a:	4694      	mov	ip, r2
 800067c:	d965      	bls.n	800074a <__udivmoddi4+0xe2>
 800067e:	fab2 f382 	clz	r3, r2
 8000682:	b143      	cbz	r3, 8000696 <__udivmoddi4+0x2e>
 8000684:	fa02 fc03 	lsl.w	ip, r2, r3
 8000688:	f1c3 0220 	rsb	r2, r3, #32
 800068c:	409f      	lsls	r7, r3
 800068e:	fa20 f202 	lsr.w	r2, r0, r2
 8000692:	4317      	orrs	r7, r2
 8000694:	409c      	lsls	r4, r3
 8000696:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800069a:	fa1f f58c 	uxth.w	r5, ip
 800069e:	fbb7 f1fe 	udiv	r1, r7, lr
 80006a2:	0c22      	lsrs	r2, r4, #16
 80006a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80006a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80006ac:	fb01 f005 	mul.w	r0, r1, r5
 80006b0:	4290      	cmp	r0, r2
 80006b2:	d90a      	bls.n	80006ca <__udivmoddi4+0x62>
 80006b4:	eb1c 0202 	adds.w	r2, ip, r2
 80006b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80006bc:	f080 811c 	bcs.w	80008f8 <__udivmoddi4+0x290>
 80006c0:	4290      	cmp	r0, r2
 80006c2:	f240 8119 	bls.w	80008f8 <__udivmoddi4+0x290>
 80006c6:	3902      	subs	r1, #2
 80006c8:	4462      	add	r2, ip
 80006ca:	1a12      	subs	r2, r2, r0
 80006cc:	b2a4      	uxth	r4, r4
 80006ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80006d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006da:	fb00 f505 	mul.w	r5, r0, r5
 80006de:	42a5      	cmp	r5, r4
 80006e0:	d90a      	bls.n	80006f8 <__udivmoddi4+0x90>
 80006e2:	eb1c 0404 	adds.w	r4, ip, r4
 80006e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80006ea:	f080 8107 	bcs.w	80008fc <__udivmoddi4+0x294>
 80006ee:	42a5      	cmp	r5, r4
 80006f0:	f240 8104 	bls.w	80008fc <__udivmoddi4+0x294>
 80006f4:	4464      	add	r4, ip
 80006f6:	3802      	subs	r0, #2
 80006f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006fc:	1b64      	subs	r4, r4, r5
 80006fe:	2100      	movs	r1, #0
 8000700:	b11e      	cbz	r6, 800070a <__udivmoddi4+0xa2>
 8000702:	40dc      	lsrs	r4, r3
 8000704:	2300      	movs	r3, #0
 8000706:	e9c6 4300 	strd	r4, r3, [r6]
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	428b      	cmp	r3, r1
 8000710:	d908      	bls.n	8000724 <__udivmoddi4+0xbc>
 8000712:	2e00      	cmp	r6, #0
 8000714:	f000 80ed 	beq.w	80008f2 <__udivmoddi4+0x28a>
 8000718:	2100      	movs	r1, #0
 800071a:	e9c6 0500 	strd	r0, r5, [r6]
 800071e:	4608      	mov	r0, r1
 8000720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000724:	fab3 f183 	clz	r1, r3
 8000728:	2900      	cmp	r1, #0
 800072a:	d149      	bne.n	80007c0 <__udivmoddi4+0x158>
 800072c:	42ab      	cmp	r3, r5
 800072e:	d302      	bcc.n	8000736 <__udivmoddi4+0xce>
 8000730:	4282      	cmp	r2, r0
 8000732:	f200 80f8 	bhi.w	8000926 <__udivmoddi4+0x2be>
 8000736:	1a84      	subs	r4, r0, r2
 8000738:	eb65 0203 	sbc.w	r2, r5, r3
 800073c:	2001      	movs	r0, #1
 800073e:	4617      	mov	r7, r2
 8000740:	2e00      	cmp	r6, #0
 8000742:	d0e2      	beq.n	800070a <__udivmoddi4+0xa2>
 8000744:	e9c6 4700 	strd	r4, r7, [r6]
 8000748:	e7df      	b.n	800070a <__udivmoddi4+0xa2>
 800074a:	b902      	cbnz	r2, 800074e <__udivmoddi4+0xe6>
 800074c:	deff      	udf	#255	; 0xff
 800074e:	fab2 f382 	clz	r3, r2
 8000752:	2b00      	cmp	r3, #0
 8000754:	f040 8090 	bne.w	8000878 <__udivmoddi4+0x210>
 8000758:	1a8a      	subs	r2, r1, r2
 800075a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800075e:	fa1f fe8c 	uxth.w	lr, ip
 8000762:	2101      	movs	r1, #1
 8000764:	fbb2 f5f7 	udiv	r5, r2, r7
 8000768:	fb07 2015 	mls	r0, r7, r5, r2
 800076c:	0c22      	lsrs	r2, r4, #16
 800076e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000772:	fb0e f005 	mul.w	r0, lr, r5
 8000776:	4290      	cmp	r0, r2
 8000778:	d908      	bls.n	800078c <__udivmoddi4+0x124>
 800077a:	eb1c 0202 	adds.w	r2, ip, r2
 800077e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000782:	d202      	bcs.n	800078a <__udivmoddi4+0x122>
 8000784:	4290      	cmp	r0, r2
 8000786:	f200 80cb 	bhi.w	8000920 <__udivmoddi4+0x2b8>
 800078a:	4645      	mov	r5, r8
 800078c:	1a12      	subs	r2, r2, r0
 800078e:	b2a4      	uxth	r4, r4
 8000790:	fbb2 f0f7 	udiv	r0, r2, r7
 8000794:	fb07 2210 	mls	r2, r7, r0, r2
 8000798:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800079c:	fb0e fe00 	mul.w	lr, lr, r0
 80007a0:	45a6      	cmp	lr, r4
 80007a2:	d908      	bls.n	80007b6 <__udivmoddi4+0x14e>
 80007a4:	eb1c 0404 	adds.w	r4, ip, r4
 80007a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80007ac:	d202      	bcs.n	80007b4 <__udivmoddi4+0x14c>
 80007ae:	45a6      	cmp	lr, r4
 80007b0:	f200 80bb 	bhi.w	800092a <__udivmoddi4+0x2c2>
 80007b4:	4610      	mov	r0, r2
 80007b6:	eba4 040e 	sub.w	r4, r4, lr
 80007ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007be:	e79f      	b.n	8000700 <__udivmoddi4+0x98>
 80007c0:	f1c1 0720 	rsb	r7, r1, #32
 80007c4:	408b      	lsls	r3, r1
 80007c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80007ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80007ce:	fa05 f401 	lsl.w	r4, r5, r1
 80007d2:	fa20 f307 	lsr.w	r3, r0, r7
 80007d6:	40fd      	lsrs	r5, r7
 80007d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007dc:	4323      	orrs	r3, r4
 80007de:	fbb5 f8f9 	udiv	r8, r5, r9
 80007e2:	fa1f fe8c 	uxth.w	lr, ip
 80007e6:	fb09 5518 	mls	r5, r9, r8, r5
 80007ea:	0c1c      	lsrs	r4, r3, #16
 80007ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007f0:	fb08 f50e 	mul.w	r5, r8, lr
 80007f4:	42a5      	cmp	r5, r4
 80007f6:	fa02 f201 	lsl.w	r2, r2, r1
 80007fa:	fa00 f001 	lsl.w	r0, r0, r1
 80007fe:	d90b      	bls.n	8000818 <__udivmoddi4+0x1b0>
 8000800:	eb1c 0404 	adds.w	r4, ip, r4
 8000804:	f108 3aff 	add.w	sl, r8, #4294967295
 8000808:	f080 8088 	bcs.w	800091c <__udivmoddi4+0x2b4>
 800080c:	42a5      	cmp	r5, r4
 800080e:	f240 8085 	bls.w	800091c <__udivmoddi4+0x2b4>
 8000812:	f1a8 0802 	sub.w	r8, r8, #2
 8000816:	4464      	add	r4, ip
 8000818:	1b64      	subs	r4, r4, r5
 800081a:	b29d      	uxth	r5, r3
 800081c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000820:	fb09 4413 	mls	r4, r9, r3, r4
 8000824:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000828:	fb03 fe0e 	mul.w	lr, r3, lr
 800082c:	45a6      	cmp	lr, r4
 800082e:	d908      	bls.n	8000842 <__udivmoddi4+0x1da>
 8000830:	eb1c 0404 	adds.w	r4, ip, r4
 8000834:	f103 35ff 	add.w	r5, r3, #4294967295
 8000838:	d26c      	bcs.n	8000914 <__udivmoddi4+0x2ac>
 800083a:	45a6      	cmp	lr, r4
 800083c:	d96a      	bls.n	8000914 <__udivmoddi4+0x2ac>
 800083e:	3b02      	subs	r3, #2
 8000840:	4464      	add	r4, ip
 8000842:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000846:	fba3 9502 	umull	r9, r5, r3, r2
 800084a:	eba4 040e 	sub.w	r4, r4, lr
 800084e:	42ac      	cmp	r4, r5
 8000850:	46c8      	mov	r8, r9
 8000852:	46ae      	mov	lr, r5
 8000854:	d356      	bcc.n	8000904 <__udivmoddi4+0x29c>
 8000856:	d053      	beq.n	8000900 <__udivmoddi4+0x298>
 8000858:	b156      	cbz	r6, 8000870 <__udivmoddi4+0x208>
 800085a:	ebb0 0208 	subs.w	r2, r0, r8
 800085e:	eb64 040e 	sbc.w	r4, r4, lr
 8000862:	fa04 f707 	lsl.w	r7, r4, r7
 8000866:	40ca      	lsrs	r2, r1
 8000868:	40cc      	lsrs	r4, r1
 800086a:	4317      	orrs	r7, r2
 800086c:	e9c6 7400 	strd	r7, r4, [r6]
 8000870:	4618      	mov	r0, r3
 8000872:	2100      	movs	r1, #0
 8000874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000878:	f1c3 0120 	rsb	r1, r3, #32
 800087c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000880:	fa20 f201 	lsr.w	r2, r0, r1
 8000884:	fa25 f101 	lsr.w	r1, r5, r1
 8000888:	409d      	lsls	r5, r3
 800088a:	432a      	orrs	r2, r5
 800088c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fbb1 f0f7 	udiv	r0, r1, r7
 8000898:	fb07 1510 	mls	r5, r7, r0, r1
 800089c:	0c11      	lsrs	r1, r2, #16
 800089e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80008a2:	fb00 f50e 	mul.w	r5, r0, lr
 80008a6:	428d      	cmp	r5, r1
 80008a8:	fa04 f403 	lsl.w	r4, r4, r3
 80008ac:	d908      	bls.n	80008c0 <__udivmoddi4+0x258>
 80008ae:	eb1c 0101 	adds.w	r1, ip, r1
 80008b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80008b6:	d22f      	bcs.n	8000918 <__udivmoddi4+0x2b0>
 80008b8:	428d      	cmp	r5, r1
 80008ba:	d92d      	bls.n	8000918 <__udivmoddi4+0x2b0>
 80008bc:	3802      	subs	r0, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1b49      	subs	r1, r1, r5
 80008c2:	b292      	uxth	r2, r2
 80008c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80008c8:	fb07 1115 	mls	r1, r7, r5, r1
 80008cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008d0:	fb05 f10e 	mul.w	r1, r5, lr
 80008d4:	4291      	cmp	r1, r2
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x282>
 80008d8:	eb1c 0202 	adds.w	r2, ip, r2
 80008dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80008e0:	d216      	bcs.n	8000910 <__udivmoddi4+0x2a8>
 80008e2:	4291      	cmp	r1, r2
 80008e4:	d914      	bls.n	8000910 <__udivmoddi4+0x2a8>
 80008e6:	3d02      	subs	r5, #2
 80008e8:	4462      	add	r2, ip
 80008ea:	1a52      	subs	r2, r2, r1
 80008ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80008f0:	e738      	b.n	8000764 <__udivmoddi4+0xfc>
 80008f2:	4631      	mov	r1, r6
 80008f4:	4630      	mov	r0, r6
 80008f6:	e708      	b.n	800070a <__udivmoddi4+0xa2>
 80008f8:	4639      	mov	r1, r7
 80008fa:	e6e6      	b.n	80006ca <__udivmoddi4+0x62>
 80008fc:	4610      	mov	r0, r2
 80008fe:	e6fb      	b.n	80006f8 <__udivmoddi4+0x90>
 8000900:	4548      	cmp	r0, r9
 8000902:	d2a9      	bcs.n	8000858 <__udivmoddi4+0x1f0>
 8000904:	ebb9 0802 	subs.w	r8, r9, r2
 8000908:	eb65 0e0c 	sbc.w	lr, r5, ip
 800090c:	3b01      	subs	r3, #1
 800090e:	e7a3      	b.n	8000858 <__udivmoddi4+0x1f0>
 8000910:	4645      	mov	r5, r8
 8000912:	e7ea      	b.n	80008ea <__udivmoddi4+0x282>
 8000914:	462b      	mov	r3, r5
 8000916:	e794      	b.n	8000842 <__udivmoddi4+0x1da>
 8000918:	4640      	mov	r0, r8
 800091a:	e7d1      	b.n	80008c0 <__udivmoddi4+0x258>
 800091c:	46d0      	mov	r8, sl
 800091e:	e77b      	b.n	8000818 <__udivmoddi4+0x1b0>
 8000920:	3d02      	subs	r5, #2
 8000922:	4462      	add	r2, ip
 8000924:	e732      	b.n	800078c <__udivmoddi4+0x124>
 8000926:	4608      	mov	r0, r1
 8000928:	e70a      	b.n	8000740 <__udivmoddi4+0xd8>
 800092a:	4464      	add	r4, ip
 800092c:	3802      	subs	r0, #2
 800092e:	e742      	b.n	80007b6 <__udivmoddi4+0x14e>

08000930 <__aeabi_idiv0>:
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093a:	f001 fa25 	bl	8001d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093e:	f000 f89b 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000942:	f000 f9e7 	bl	8000d14 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000946:	f000 f8f9 	bl	8000b3c <MX_DFSDM1_Init>
  MX_QUADSPI_Init();
 800094a:	f000 f92f 	bl	8000bac <MX_QUADSPI_Init>
  MX_USART3_UART_Init();
 800094e:	f000 f983 	bl	8000c58 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000952:	f000 f9b1 	bl	8000cb8 <MX_USB_OTG_FS_PCD_Init>
  MX_USART1_UART_Init();
 8000956:	f000 f94f 	bl	8000bf8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1,tmp_msg1,sizeof(tmp_msg1),1000);
 800095a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095e:	2230      	movs	r2, #48	; 0x30
 8000960:	4939      	ldr	r1, [pc, #228]	; (8000a48 <main+0x114>)
 8000962:	483a      	ldr	r0, [pc, #232]	; (8000a4c <main+0x118>)
 8000964:	f004 fa5e 	bl	8004e24 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,tmp_msg2,sizeof(tmp_msg2),1000);
 8000968:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096c:	222f      	movs	r2, #47	; 0x2f
 800096e:	4938      	ldr	r1, [pc, #224]	; (8000a50 <main+0x11c>)
 8000970:	4836      	ldr	r0, [pc, #216]	; (8000a4c <main+0x118>)
 8000972:	f004 fa57 	bl	8004e24 <HAL_UART_Transmit>
  BSP_TSENSOR_Init();
 8000976:	f001 f811 	bl	800199c <BSP_TSENSOR_Init>
  HAL_UART_Transmit(&huart1,tmp_msg3,sizeof(tmp_msg3),1000);
 800097a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097e:	2231      	movs	r2, #49	; 0x31
 8000980:	4934      	ldr	r1, [pc, #208]	; (8000a54 <main+0x120>)
 8000982:	4832      	ldr	r0, [pc, #200]	; (8000a4c <main+0x118>)
 8000984:	f004 fa4e 	bl	8004e24 <HAL_UART_Transmit>

  HAL_UART_Transmit(&huart1,accel_msg1,sizeof(accel_msg1),1000);
 8000988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098c:	2232      	movs	r2, #50	; 0x32
 800098e:	4932      	ldr	r1, [pc, #200]	; (8000a58 <main+0x124>)
 8000990:	482e      	ldr	r0, [pc, #184]	; (8000a4c <main+0x118>)
 8000992:	f004 fa47 	bl	8004e24 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,accel_msg2,sizeof(accel_msg2),1000);
 8000996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099a:	2232      	movs	r2, #50	; 0x32
 800099c:	492f      	ldr	r1, [pc, #188]	; (8000a5c <main+0x128>)
 800099e:	482b      	ldr	r0, [pc, #172]	; (8000a4c <main+0x118>)
 80009a0:	f004 fa40 	bl	8004e24 <HAL_UART_Transmit>
  BSP_ACCELERO_Init();
 80009a4:	f000 ffa4 	bl	80018f0 <BSP_ACCELERO_Init>
  HAL_UART_Transmit(&huart1,accel_msg3,sizeof(accel_msg3),1000);
 80009a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ac:	2234      	movs	r2, #52	; 0x34
 80009ae:	492c      	ldr	r1, [pc, #176]	; (8000a60 <main+0x12c>)
 80009b0:	4826      	ldr	r0, [pc, #152]	; (8000a4c <main+0x118>)
 80009b2:	f004 fa37 	bl	8004e24 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  temp_value = BSP_TSENSOR_ReadTemp();
 80009b6:	f001 f80d 	bl	80019d4 <BSP_TSENSOR_ReadTemp>
 80009ba:	eef0 7a40 	vmov.f32	s15, s0
 80009be:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <main+0x130>)
 80009c0:	edc3 7a00 	vstr	s15, [r3]
	  BSP_ACCELERO_AccGetXYZ(&accel_value);
 80009c4:	4828      	ldr	r0, [pc, #160]	; (8000a68 <main+0x134>)
 80009c6:	f000 ffd1 	bl	800196c <BSP_ACCELERO_AccGetXYZ>
	  int tmpInt1 = temp_value;
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <main+0x130>)
 80009cc:	edd3 7a00 	vldr	s15, [r3]
 80009d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009d4:	ee17 3a90 	vmov	r3, s15
 80009d8:	60fb      	str	r3, [r7, #12]
	  float tmpFrac = temp_value - tmpInt1;
 80009da:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <main+0x130>)
 80009dc:	ed93 7a00 	vldr	s14, [r3]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	ee07 3a90 	vmov	s15, r3
 80009e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009ee:	edc7 7a02 	vstr	s15, [r7, #8]
	  int tmpInt2 = trunc(tmpFrac * 100);
 80009f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80009f6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000a6c <main+0x138>
 80009fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009fe:	ee17 0a90 	vmov	r0, s15
 8000a02:	f7ff fd99 	bl	8000538 <__aeabi_f2d>
 8000a06:	4602      	mov	r2, r0
 8000a08:	460b      	mov	r3, r1
 8000a0a:	ec43 2b10 	vmov	d0, r2, r3
 8000a0e:	f005 fec3 	bl	8006798 <trunc>
 8000a12:	ec53 2b10 	vmov	r2, r3, d0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f7ff fde5 	bl	80005e8 <__aeabi_d2iz>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	607b      	str	r3, [r7, #4]
//	  snprintf(str_tmp,100," TEMPERATURE = %d.%02d\n\r", tmpInt1, tmpInt2);
//	  HAL_UART_Transmit(&huart1,( uint8_t *)str_tmp,sizeof(str_tmp),1000);

	  snprintf(str_accel,100," ACCELERATION = %i\n\r", accel_value);
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <main+0x134>)
 8000a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a28:	4a11      	ldr	r2, [pc, #68]	; (8000a70 <main+0x13c>)
 8000a2a:	2164      	movs	r1, #100	; 0x64
 8000a2c:	4811      	ldr	r0, [pc, #68]	; (8000a74 <main+0x140>)
 8000a2e:	f005 f9fb 	bl	8005e28 <sniprintf>
	  HAL_UART_Transmit(&huart1,( uint8_t *)str_accel,sizeof(str_accel),1000);
 8000a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a36:	2264      	movs	r2, #100	; 0x64
 8000a38:	490e      	ldr	r1, [pc, #56]	; (8000a74 <main+0x140>)
 8000a3a:	4804      	ldr	r0, [pc, #16]	; (8000a4c <main+0x118>)
 8000a3c:	f004 f9f2 	bl	8004e24 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000a40:	2064      	movs	r0, #100	; 0x64
 8000a42:	f001 fa15 	bl	8001e70 <HAL_Delay>
  {
 8000a46:	e7b6      	b.n	80009b6 <main+0x82>
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000268 	.word	0x20000268
 8000a50:	20000030 	.word	0x20000030
 8000a54:	20000060 	.word	0x20000060
 8000a58:	20000094 	.word	0x20000094
 8000a5c:	200000c8 	.word	0x200000c8
 8000a60:	200000fc 	.word	0x200000fc
 8000a64:	20000884 	.word	0x20000884
 8000a68:	20000888 	.word	0x20000888
 8000a6c:	42c80000 	.word	0x42c80000
 8000a70:	08006824 	.word	0x08006824
 8000a74:	2000088c 	.word	0x2000088c

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b096      	sub	sp, #88	; 0x58
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	2244      	movs	r2, #68	; 0x44
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f005 fa02 	bl	8005e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a9e:	f002 fd85 	bl	80035ac <HAL_PWREx_ControlVoltageScaling>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000aa8:	f000 fb06 	bl	80010b8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000aac:	f002 fd60 	bl	8003570 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ab0:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <SystemClock_Config+0xc0>)
 8000ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ab6:	4a20      	ldr	r2, [pc, #128]	; (8000b38 <SystemClock_Config+0xc0>)
 8000ab8:	f023 0318 	bic.w	r3, r3, #24
 8000abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000ac0:	2314      	movs	r3, #20
 8000ac2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ad0:	2360      	movs	r3, #96	; 0x60
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ae0:	2328      	movs	r3, #40	; 0x28
 8000ae2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ae4:	2307      	movs	r3, #7
 8000ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4618      	mov	r0, r3
 8000af6:	f002 fe7b 	bl	80037f0 <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b00:	f000 fada 	bl	80010b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f003 fa43 	bl	8003fa8 <HAL_RCC_ClockConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b28:	f000 fac6 	bl	80010b8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b2c:	f003 ff4a 	bl	80049c4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b30:	bf00      	nop
 8000b32:	3758      	adds	r7, #88	; 0x58
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40021000 	.word	0x40021000

08000b3c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b42:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <MX_DFSDM1_Init+0x6c>)
 8000b44:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b54:	2202      	movs	r2, #2
 8000b56:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b6a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b74:	2204      	movs	r2, #4
 8000b76:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b92:	f001 faa3 	bl	80020dc <HAL_DFSDM_ChannelInit>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000b9c:	f000 fa8c 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200001ec 	.word	0x200001ec
 8000ba8:	40016020 	.word	0x40016020

08000bac <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_QUADSPI_Init+0x44>)
 8000bb2:	4a10      	ldr	r2, [pc, #64]	; (8000bf4 <MX_QUADSPI_Init+0x48>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_QUADSPI_Init+0x44>)
 8000bb8:	2202      	movs	r2, #2
 8000bba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_QUADSPI_Init+0x44>)
 8000bbe:	2204      	movs	r2, #4
 8000bc0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <MX_QUADSPI_Init+0x44>)
 8000bc4:	2210      	movs	r2, #16
 8000bc6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_QUADSPI_Init+0x44>)
 8000bca:	2217      	movs	r2, #23
 8000bcc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <MX_QUADSPI_Init+0x44>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_QUADSPI_Init+0x44>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_QUADSPI_Init+0x44>)
 8000bdc:	f002 fd4c 	bl	8003678 <HAL_QSPI_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000be6:	f000 fa67 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000224 	.word	0x20000224
 8000bf4:	a0001000 	.word	0xa0001000

08000bf8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_USART1_UART_Init+0x58>)
 8000bfe:	4a15      	ldr	r2, [pc, #84]	; (8000c54 <MX_USART1_UART_Init+0x5c>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_USART1_UART_Init+0x58>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <MX_USART1_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <MX_USART1_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MX_USART1_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_USART1_UART_Init+0x58>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <MX_USART1_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_USART1_UART_Init+0x58>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <MX_USART1_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_USART1_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_USART1_UART_Init+0x58>)
 8000c3c:	f004 f8a4 	bl	8004d88 <HAL_UART_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c46:	f000 fa37 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000268 	.word	0x20000268
 8000c54:	40013800 	.word	0x40013800

08000c58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c5e:	4a15      	ldr	r2, [pc, #84]	; (8000cb4 <MX_USART3_UART_Init+0x5c>)
 8000c60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c7e:	220c      	movs	r2, #12
 8000c80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c9c:	f004 f874 	bl	8004d88 <HAL_UART_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ca6:	f000 fa07 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200002f0 	.word	0x200002f0
 8000cb4:	40004800 	.word	0x40004800

08000cb8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cbe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cc2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc6:	2206      	movs	r2, #6
 8000cc8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ccc:	2202      	movs	r2, #2
 8000cce:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cfc:	f002 faef 	bl	80032de <HAL_PCD_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d06:	f000 f9d7 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000378 	.word	0x20000378

08000d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2a:	4bbd      	ldr	r3, [pc, #756]	; (8001020 <MX_GPIO_Init+0x30c>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	4abc      	ldr	r2, [pc, #752]	; (8001020 <MX_GPIO_Init+0x30c>)
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d36:	4bba      	ldr	r3, [pc, #744]	; (8001020 <MX_GPIO_Init+0x30c>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	f003 0310 	and.w	r3, r3, #16
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d42:	4bb7      	ldr	r3, [pc, #732]	; (8001020 <MX_GPIO_Init+0x30c>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	4ab6      	ldr	r2, [pc, #728]	; (8001020 <MX_GPIO_Init+0x30c>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4e:	4bb4      	ldr	r3, [pc, #720]	; (8001020 <MX_GPIO_Init+0x30c>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4bb1      	ldr	r3, [pc, #708]	; (8001020 <MX_GPIO_Init+0x30c>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5e:	4ab0      	ldr	r2, [pc, #704]	; (8001020 <MX_GPIO_Init+0x30c>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d66:	4bae      	ldr	r3, [pc, #696]	; (8001020 <MX_GPIO_Init+0x30c>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	4bab      	ldr	r3, [pc, #684]	; (8001020 <MX_GPIO_Init+0x30c>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	4aaa      	ldr	r2, [pc, #680]	; (8001020 <MX_GPIO_Init+0x30c>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7e:	4ba8      	ldr	r3, [pc, #672]	; (8001020 <MX_GPIO_Init+0x30c>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8a:	4ba5      	ldr	r3, [pc, #660]	; (8001020 <MX_GPIO_Init+0x30c>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	4aa4      	ldr	r2, [pc, #656]	; (8001020 <MX_GPIO_Init+0x30c>)
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d96:	4ba2      	ldr	r3, [pc, #648]	; (8001020 <MX_GPIO_Init+0x30c>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000da8:	489e      	ldr	r0, [pc, #632]	; (8001024 <MX_GPIO_Init+0x310>)
 8000daa:	f001 fc4d 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f248 1104 	movw	r1, #33028	; 0x8104
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f001 fc46 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN_C_Pin|I2C_RST_C_Pin|LPn_C_Pin, GPIO_PIN_SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2119      	movs	r1, #25
 8000dc0:	4899      	ldr	r0, [pc, #612]	; (8001028 <MX_GPIO_Init+0x314>)
 8000dc2:	f001 fc41 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f24f 0104 	movw	r1, #61444	; 0xf004
 8000dcc:	4896      	ldr	r0, [pc, #600]	; (8001028 <MX_GPIO_Init+0x314>)
 8000dce:	f001 fc3b 	bl	8002648 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f241 0181 	movw	r1, #4225	; 0x1081
 8000dd8:	4894      	ldr	r0, [pc, #592]	; (800102c <MX_GPIO_Init+0x318>)
 8000dda:	f001 fc35 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000dde:	2201      	movs	r2, #1
 8000de0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de4:	4891      	ldr	r0, [pc, #580]	; (800102c <MX_GPIO_Init+0x318>)
 8000de6:	f001 fc2f 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000df0:	488f      	ldr	r0, [pc, #572]	; (8001030 <MX_GPIO_Init+0x31c>)
 8000df2:	f001 fc29 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	2101      	movs	r1, #1
 8000dfa:	488a      	ldr	r0, [pc, #552]	; (8001024 <MX_GPIO_Init+0x310>)
 8000dfc:	f001 fc24 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e00:	f240 1315 	movw	r3, #277	; 0x115
 8000e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	4882      	ldr	r0, [pc, #520]	; (8001024 <MX_GPIO_Init+0x310>)
 8000e1a:	f001 fa6b 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000e1e:	236a      	movs	r3, #106	; 0x6a
 8000e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	487c      	ldr	r0, [pc, #496]	; (8001024 <MX_GPIO_Init+0x310>)
 8000e34:	f001 fa5e 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000e38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e3e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4878      	ldr	r0, [pc, #480]	; (8001030 <MX_GPIO_Init+0x31c>)
 8000e50:	f001 fa50 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000e54:	233f      	movs	r3, #63	; 0x3f
 8000e56:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e58:	230b      	movs	r3, #11
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	4872      	ldr	r0, [pc, #456]	; (8001030 <MX_GPIO_Init+0x31c>)
 8000e68:	f001 fa44 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8a:	f001 fa33 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000e8e:	f248 1304 	movw	r3, #33028	; 0x8104
 8000e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eaa:	f001 fa23 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000eae:	2308      	movs	r3, #8
 8000eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f001 fa12 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_C_Pin */
  GPIO_InitStruct.Pin = INT_C_Pin;
 8000ed0:	2310      	movs	r3, #16
 8000ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ed4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_C_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee8:	f001 fa04 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000eec:	23e0      	movs	r3, #224	; 0xe0
 8000eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000efc:	2305      	movs	r3, #5
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f001 f9f3 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN_C_Pin ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin
                           LED2_Pin SPSGRF_915_SDN_Pin I2C_RST_C_Pin LPn_C_Pin */
  GPIO_InitStruct.Pin = PWR_EN_C_Pin|ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8000f0e:	f24f 031d 	movw	r3, #61469	; 0xf01d
 8000f12:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|I2C_RST_C_Pin|LPn_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	4840      	ldr	r0, [pc, #256]	; (8001028 <MX_GPIO_Init+0x314>)
 8000f28:	f001 f9e4 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f30:	230b      	movs	r3, #11
 8000f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	483a      	ldr	r0, [pc, #232]	; (8001028 <MX_GPIO_Init+0x314>)
 8000f40:	f001 f9d8 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000f44:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f4a:	2312      	movs	r3, #18
 8000f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f56:	2304      	movs	r3, #4
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4831      	ldr	r0, [pc, #196]	; (8001028 <MX_GPIO_Init+0x314>)
 8000f62:	f001 f9c7 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000f66:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000f6a:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f6c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	482b      	ldr	r0, [pc, #172]	; (800102c <MX_GPIO_Init+0x318>)
 8000f7e:	f001 f9b9 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000f82:	f243 0381 	movw	r3, #12417	; 0x3081
 8000f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4824      	ldr	r0, [pc, #144]	; (800102c <MX_GPIO_Init+0x318>)
 8000f9c:	f001 f9aa 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000fa0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	481d      	ldr	r0, [pc, #116]	; (8001030 <MX_GPIO_Init+0x31c>)
 8000fba:	f001 f99b 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000fbe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4816      	ldr	r0, [pc, #88]	; (8001030 <MX_GPIO_Init+0x31c>)
 8000fd6:	f001 f98d 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000fda:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fec:	2306      	movs	r3, #6
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480e      	ldr	r0, [pc, #56]	; (8001030 <MX_GPIO_Init+0x31c>)
 8000ff8:	f001 f97c 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800100c:	2305      	movs	r3, #5
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_GPIO_Init+0x318>)
 8001018:	f001 f96c 	bl	80022f4 <HAL_GPIO_Init>
 800101c:	e00a      	b.n	8001034 <MX_GPIO_Init+0x320>
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000
 8001024:	48001000 	.word	0x48001000
 8001028:	48000400 	.word	0x48000400
 800102c:	48000c00 	.word	0x48000c00
 8001030:	48000800 	.word	0x48000800

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001034:	2378      	movs	r3, #120	; 0x78
 8001036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001044:	2307      	movs	r3, #7
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	4818      	ldr	r0, [pc, #96]	; (80010b0 <MX_GPIO_Init+0x39c>)
 8001050:	f001 f950 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001054:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800105a:	2312      	movs	r3, #18
 800105c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001066:	2304      	movs	r3, #4
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	4810      	ldr	r0, [pc, #64]	; (80010b4 <MX_GPIO_Init+0x3a0>)
 8001072:	f001 f93f 	bl	80022f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	200a      	movs	r0, #10
 800107c:	f000 fff7 	bl	800206e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001080:	200a      	movs	r0, #10
 8001082:	f001 f810 	bl	80020a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	2017      	movs	r0, #23
 800108c:	f000 ffef 	bl	800206e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001090:	2017      	movs	r0, #23
 8001092:	f001 f808 	bl	80020a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	2028      	movs	r0, #40	; 0x28
 800109c:	f000 ffe7 	bl	800206e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010a0:	2028      	movs	r0, #40	; 0x28
 80010a2:	f001 f800 	bl	80020a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a6:	bf00      	nop
 80010a8:	3728      	adds	r7, #40	; 0x28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	48000c00 	.word	0x48000c00
 80010b4:	48000400 	.word	0x48000400

080010b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <Error_Handler+0x8>
	...

080010c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <HAL_MspInit+0x44>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <HAL_MspInit+0x44>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6613      	str	r3, [r2, #96]	; 0x60
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <HAL_MspInit+0x44>)
 80010d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <HAL_MspInit+0x44>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	4a08      	ldr	r2, [pc, #32]	; (8001108 <HAL_MspInit+0x44>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ec:	6593      	str	r3, [r2, #88]	; 0x58
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_MspInit+0x44>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000

0800110c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0ac      	sub	sp, #176	; 0xb0
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2288      	movs	r2, #136	; 0x88
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f004 feaf 	bl	8005e90 <memset>
  if(DFSDM1_Init == 0)
 8001132:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d142      	bne.n	80011c0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800113a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800113e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4618      	mov	r0, r3
 800114c:	f003 f950 	bl	80043f0 <HAL_RCCEx_PeriphCLKConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001156:	f7ff ffaf 	bl	80010b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 800115c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115e:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001160:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001164:	6613      	str	r3, [r2, #96]	; 0x60
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800116a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	4a15      	ldr	r2, [pc, #84]	; (80011cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001178:	f043 0310 	orr.w	r3, r3, #16
 800117c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800118a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800118e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80011a4:	2306      	movs	r3, #6
 80011a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011ae:	4619      	mov	r1, r3
 80011b0:	4807      	ldr	r0, [pc, #28]	; (80011d0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80011b2:	f001 f89f 	bl	80022f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	3301      	adds	r3, #1
 80011bc:	4a02      	ldr	r2, [pc, #8]	; (80011c8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80011be:	6013      	str	r3, [r2, #0]
  }

}
 80011c0:	bf00      	nop
 80011c2:	37b0      	adds	r7, #176	; 0xb0
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200008f0 	.word	0x200008f0
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48001000 	.word	0x48001000

080011d4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a17      	ldr	r2, [pc, #92]	; (8001250 <HAL_QSPI_MspInit+0x7c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d128      	bne.n	8001248 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HAL_QSPI_MspInit+0x80>)
 80011f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011fa:	4a16      	ldr	r2, [pc, #88]	; (8001254 <HAL_QSPI_MspInit+0x80>)
 80011fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001200:	6513      	str	r3, [r2, #80]	; 0x50
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_QSPI_MspInit+0x80>)
 8001204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_QSPI_MspInit+0x80>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	4a10      	ldr	r2, [pc, #64]	; (8001254 <HAL_QSPI_MspInit+0x80>)
 8001214:	f043 0310 	orr.w	r3, r3, #16
 8001218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <HAL_QSPI_MspInit+0x80>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	f003 0310 	and.w	r3, r3, #16
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001226:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800122a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001238:	230a      	movs	r3, #10
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <HAL_QSPI_MspInit+0x84>)
 8001244:	f001 f856 	bl	80022f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	; 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	a0001000 	.word	0xa0001000
 8001254:	40021000 	.word	0x40021000
 8001258:	48001000 	.word	0x48001000

0800125c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b0ae      	sub	sp, #184	; 0xb8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	2288      	movs	r2, #136	; 0x88
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f004 fe07 	bl	8005e90 <memset>
  if(huart->Instance==USART1)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a42      	ldr	r2, [pc, #264]	; (8001390 <HAL_UART_MspInit+0x134>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d13b      	bne.n	8001304 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800128c:	2301      	movs	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001290:	2300      	movs	r3, #0
 8001292:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	4618      	mov	r0, r3
 800129a:	f003 f8a9 	bl	80043f0 <HAL_RCCEx_PeriphCLKConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012a4:	f7ff ff08 	bl	80010b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012a8:	4b3a      	ldr	r3, [pc, #232]	; (8001394 <HAL_UART_MspInit+0x138>)
 80012aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ac:	4a39      	ldr	r2, [pc, #228]	; (8001394 <HAL_UART_MspInit+0x138>)
 80012ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b2:	6613      	str	r3, [r2, #96]	; 0x60
 80012b4:	4b37      	ldr	r3, [pc, #220]	; (8001394 <HAL_UART_MspInit+0x138>)
 80012b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b34      	ldr	r3, [pc, #208]	; (8001394 <HAL_UART_MspInit+0x138>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c4:	4a33      	ldr	r2, [pc, #204]	; (8001394 <HAL_UART_MspInit+0x138>)
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012cc:	4b31      	ldr	r3, [pc, #196]	; (8001394 <HAL_UART_MspInit+0x138>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|GPIO_PIN_7;
 80012d8:	23c0      	movs	r3, #192	; 0xc0
 80012da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012f0:	2307      	movs	r3, #7
 80012f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012fa:	4619      	mov	r1, r3
 80012fc:	4826      	ldr	r0, [pc, #152]	; (8001398 <HAL_UART_MspInit+0x13c>)
 80012fe:	f000 fff9 	bl	80022f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001302:	e040      	b.n	8001386 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a24      	ldr	r2, [pc, #144]	; (800139c <HAL_UART_MspInit+0x140>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d13b      	bne.n	8001386 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800130e:	2304      	movs	r3, #4
 8001310:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001312:	2300      	movs	r3, #0
 8001314:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4618      	mov	r0, r3
 800131c:	f003 f868 	bl	80043f0 <HAL_RCCEx_PeriphCLKConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001326:	f7ff fec7 	bl	80010b8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <HAL_UART_MspInit+0x138>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	4a19      	ldr	r2, [pc, #100]	; (8001394 <HAL_UART_MspInit+0x138>)
 8001330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001334:	6593      	str	r3, [r2, #88]	; 0x58
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <HAL_UART_MspInit+0x138>)
 8001338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_UART_MspInit+0x138>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a13      	ldr	r2, [pc, #76]	; (8001394 <HAL_UART_MspInit+0x138>)
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_UART_MspInit+0x138>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800135a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800135e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001374:	2307      	movs	r3, #7
 8001376:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800137e:	4619      	mov	r1, r3
 8001380:	4807      	ldr	r0, [pc, #28]	; (80013a0 <HAL_UART_MspInit+0x144>)
 8001382:	f000 ffb7 	bl	80022f4 <HAL_GPIO_Init>
}
 8001386:	bf00      	nop
 8001388:	37b8      	adds	r7, #184	; 0xb8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40013800 	.word	0x40013800
 8001394:	40021000 	.word	0x40021000
 8001398:	48000400 	.word	0x48000400
 800139c:	40004800 	.word	0x40004800
 80013a0:	48000c00 	.word	0x48000c00

080013a4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0ac      	sub	sp, #176	; 0xb0
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2288      	movs	r2, #136	; 0x88
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f004 fd63 	bl	8005e90 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013d2:	d16b      	bne.n	80014ac <HAL_PCD_MspInit+0x108>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80013da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80013e2:	2301      	movs	r3, #1
 80013e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013e6:	2301      	movs	r3, #1
 80013e8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80013ea:	2318      	movs	r3, #24
 80013ec:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80013ee:	2307      	movs	r3, #7
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013f2:	2302      	movs	r3, #2
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013f6:	2302      	movs	r3, #2
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80013fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013fe:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fff3 	bl	80043f0 <HAL_RCCEx_PeriphCLKConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001410:	f7ff fe52 	bl	80010b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <HAL_PCD_MspInit+0x110>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001418:	4a26      	ldr	r2, [pc, #152]	; (80014b4 <HAL_PCD_MspInit+0x110>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001420:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <HAL_PCD_MspInit+0x110>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800142c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001430:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001446:	230a      	movs	r3, #10
 8001448:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001450:	4619      	mov	r1, r3
 8001452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001456:	f000 ff4d 	bl	80022f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <HAL_PCD_MspInit+0x110>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	4a15      	ldr	r2, [pc, #84]	; (80014b4 <HAL_PCD_MspInit+0x110>)
 8001460:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <HAL_PCD_MspInit+0x110>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <HAL_PCD_MspInit+0x110>)
 8001474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d114      	bne.n	80014a8 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_PCD_MspInit+0x110>)
 8001480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001482:	4a0c      	ldr	r2, [pc, #48]	; (80014b4 <HAL_PCD_MspInit+0x110>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001488:	6593      	str	r3, [r2, #88]	; 0x58
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_PCD_MspInit+0x110>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001496:	f002 f8df 	bl	8003658 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_PCD_MspInit+0x110>)
 800149c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <HAL_PCD_MspInit+0x110>)
 80014a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a4:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80014a6:	e001      	b.n	80014ac <HAL_PCD_MspInit+0x108>
      HAL_PWREx_EnableVddUSB();
 80014a8:	f002 f8d6 	bl	8003658 <HAL_PWREx_EnableVddUSB>
}
 80014ac:	bf00      	nop
 80014ae:	37b0      	adds	r7, #176	; 0xb0
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40021000 	.word	0x40021000

080014b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <NMI_Handler+0x4>

080014be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <MemManage_Handler+0x4>

080014ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001504:	f000 fc94 	bl	8001e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}

0800150c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_C_Pin);
 8001510:	2010      	movs	r0, #16
 8001512:	f001 f8b1 	bl	8002678 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}

0800151a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800151e:	2020      	movs	r0, #32
 8001520:	f001 f8aa 	bl	8002678 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001524:	2040      	movs	r0, #64	; 0x40
 8001526:	f001 f8a7 	bl	8002678 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800152a:	2080      	movs	r0, #128	; 0x80
 800152c:	f001 f8a4 	bl	8002678 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001530:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001534:	f001 f8a0 	bl	8002678 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}

0800153c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001540:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001544:	f001 f898 	bl	8002678 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001548:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800154c:	f001 f894 	bl	8002678 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001550:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001554:	f001 f890 	bl	8002678 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001558:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800155c:	f001 f88c 	bl	8002678 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001560:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001564:	f001 f888 	bl	8002678 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001574:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <_sbrk+0x5c>)
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <_sbrk+0x60>)
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d102      	bne.n	800158e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <_sbrk+0x64>)
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <_sbrk+0x68>)
 800158c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	429a      	cmp	r2, r3
 800159a:	d207      	bcs.n	80015ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800159c:	f004 fc80 	bl	8005ea0 <__errno>
 80015a0:	4603      	mov	r3, r0
 80015a2:	220c      	movs	r2, #12
 80015a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	e009      	b.n	80015c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <_sbrk+0x64>)
 80015bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015be:	68fb      	ldr	r3, [r7, #12]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20018000 	.word	0x20018000
 80015cc:	00000400 	.word	0x00000400
 80015d0:	200008f4 	.word	0x200008f4
 80015d4:	20000ac8 	.word	0x20000ac8

080015d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <SystemInit+0x20>)
 80015de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e2:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <SystemInit+0x20>)
 80015e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001634 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001600:	f7ff ffea 	bl	80015d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <LoopForever+0x6>)
  ldr r1, =_edata
 8001606:	490d      	ldr	r1, [pc, #52]	; (800163c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <LoopForever+0xe>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800161c:	4c0a      	ldr	r4, [pc, #40]	; (8001648 <LoopForever+0x16>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162a:	f004 fc3f 	bl	8005eac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800162e:	f7ff f981 	bl	8000934 <main>

08001632 <LoopForever>:

LoopForever:
    b LoopForever
 8001632:	e7fe      	b.n	8001632 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001634:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800163c:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001640:	080068c8 	.word	0x080068c8
  ldr r2, =_sbss
 8001644:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001648:	20000ac4 	.word	0x20000ac4

0800164c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC1_2_IRQHandler>
	...

08001650 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001658:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <I2Cx_MspInit+0xa8>)
 800165a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165c:	4a26      	ldr	r2, [pc, #152]	; (80016f8 <I2Cx_MspInit+0xa8>)
 800165e:	f043 0302 	orr.w	r3, r3, #2
 8001662:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001664:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <I2Cx_MspInit+0xa8>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001670:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001674:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001676:	2312      	movs	r3, #18
 8001678:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800167a:	2301      	movs	r3, #1
 800167c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001682:	2304      	movs	r3, #4
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	481b      	ldr	r0, [pc, #108]	; (80016fc <I2Cx_MspInit+0xac>)
 800168e:	f000 fe31 	bl	80022f4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	4818      	ldr	r0, [pc, #96]	; (80016fc <I2Cx_MspInit+0xac>)
 800169a:	f000 fe2b 	bl	80022f4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <I2Cx_MspInit+0xa8>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a2:	4a15      	ldr	r2, [pc, #84]	; (80016f8 <I2Cx_MspInit+0xa8>)
 80016a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016a8:	6593      	str	r3, [r2, #88]	; 0x58
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <I2Cx_MspInit+0xa8>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <I2Cx_MspInit+0xa8>)
 80016b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ba:	4a0f      	ldr	r2, [pc, #60]	; (80016f8 <I2Cx_MspInit+0xa8>)
 80016bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016c0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <I2Cx_MspInit+0xa8>)
 80016c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c6:	4a0c      	ldr	r2, [pc, #48]	; (80016f8 <I2Cx_MspInit+0xa8>)
 80016c8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016cc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	210f      	movs	r1, #15
 80016d2:	2021      	movs	r0, #33	; 0x21
 80016d4:	f000 fccb 	bl	800206e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80016d8:	2021      	movs	r0, #33	; 0x21
 80016da:	f000 fce4 	bl	80020a6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	210f      	movs	r1, #15
 80016e2:	2022      	movs	r0, #34	; 0x22
 80016e4:	f000 fcc3 	bl	800206e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80016e8:	2022      	movs	r0, #34	; 0x22
 80016ea:	f000 fcdc 	bl	80020a6 <HAL_NVIC_EnableIRQ>
}
 80016ee:	bf00      	nop
 80016f0:	3728      	adds	r7, #40	; 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000
 80016fc:	48000400 	.word	0x48000400

08001700 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <I2Cx_Init+0x54>)
 800170c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a11      	ldr	r2, [pc, #68]	; (8001758 <I2Cx_Init+0x58>)
 8001712:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff89 	bl	8001650 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 ffbd 	bl	80026be <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001744:	2100      	movs	r1, #0
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f001 fd7e 	bl	8003248 <HAL_I2CEx_ConfigAnalogFilter>
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40005800 	.word	0x40005800
 8001758:	00702681 	.word	0x00702681

0800175c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af04      	add	r7, sp, #16
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	4608      	mov	r0, r1
 8001766:	4611      	mov	r1, r2
 8001768:	461a      	mov	r2, r3
 800176a:	4603      	mov	r3, r0
 800176c:	72fb      	strb	r3, [r7, #11]
 800176e:	460b      	mov	r3, r1
 8001770:	813b      	strh	r3, [r7, #8]
 8001772:	4613      	mov	r3, r2
 8001774:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001776:	2300      	movs	r3, #0
 8001778:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800177a:	7afb      	ldrb	r3, [r7, #11]
 800177c:	b299      	uxth	r1, r3
 800177e:	88f8      	ldrh	r0, [r7, #6]
 8001780:	893a      	ldrh	r2, [r7, #8]
 8001782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	4603      	mov	r3, r0
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f001 f986 	bl	8002aa4 <HAL_I2C_Mem_Read>
 8001798:	4603      	mov	r3, r0
 800179a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800179c:	7dfb      	ldrb	r3, [r7, #23]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d004      	beq.n	80017ac <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80017a2:	7afb      	ldrb	r3, [r7, #11]
 80017a4:	4619      	mov	r1, r3
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 f832 	bl	8001810 <I2Cx_Error>
  }
  return status;
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b08a      	sub	sp, #40	; 0x28
 80017ba:	af04      	add	r7, sp, #16
 80017bc:	60f8      	str	r0, [r7, #12]
 80017be:	4608      	mov	r0, r1
 80017c0:	4611      	mov	r1, r2
 80017c2:	461a      	mov	r2, r3
 80017c4:	4603      	mov	r3, r0
 80017c6:	72fb      	strb	r3, [r7, #11]
 80017c8:	460b      	mov	r3, r1
 80017ca:	813b      	strh	r3, [r7, #8]
 80017cc:	4613      	mov	r3, r2
 80017ce:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80017d4:	7afb      	ldrb	r3, [r7, #11]
 80017d6:	b299      	uxth	r1, r3
 80017d8:	88f8      	ldrh	r0, [r7, #6]
 80017da:	893a      	ldrh	r2, [r7, #8]
 80017dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e0:	9302      	str	r3, [sp, #8]
 80017e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	6a3b      	ldr	r3, [r7, #32]
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	4603      	mov	r3, r0
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f001 f845 	bl	800287c <HAL_I2C_Mem_Write>
 80017f2:	4603      	mov	r3, r0
 80017f4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80017f6:	7dfb      	ldrb	r3, [r7, #23]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d004      	beq.n	8001806 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80017fc:	7afb      	ldrb	r3, [r7, #11]
 80017fe:	4619      	mov	r1, r3
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f000 f805 	bl	8001810 <I2Cx_Error>
  }
  return status;
 8001806:	7dfb      	ldrb	r3, [r7, #23]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 ffe9 	bl	80027f4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ff6c 	bl	8001700 <I2Cx_Init>
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <SENSOR_IO_Init+0x10>)
 8001836:	f7ff ff63 	bl	8001700 <I2Cx_Init>
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200008f8 	.word	0x200008f8

08001844 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af02      	add	r7, sp, #8
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
 800184e:	460b      	mov	r3, r1
 8001850:	71bb      	strb	r3, [r7, #6]
 8001852:	4613      	mov	r3, r2
 8001854:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001856:	79bb      	ldrb	r3, [r7, #6]
 8001858:	b29a      	uxth	r2, r3
 800185a:	79f9      	ldrb	r1, [r7, #7]
 800185c:	2301      	movs	r3, #1
 800185e:	9301      	str	r3, [sp, #4]
 8001860:	1d7b      	adds	r3, r7, #5
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2301      	movs	r3, #1
 8001866:	4803      	ldr	r0, [pc, #12]	; (8001874 <SENSOR_IO_Write+0x30>)
 8001868:	f7ff ffa5 	bl	80017b6 <I2Cx_WriteMultiple>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200008f8 	.word	0x200008f8

08001878 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af02      	add	r7, sp, #8
 800187e:	4603      	mov	r3, r0
 8001880:	460a      	mov	r2, r1
 8001882:	71fb      	strb	r3, [r7, #7]
 8001884:	4613      	mov	r3, r2
 8001886:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800188c:	79bb      	ldrb	r3, [r7, #6]
 800188e:	b29a      	uxth	r2, r3
 8001890:	79f9      	ldrb	r1, [r7, #7]
 8001892:	2301      	movs	r3, #1
 8001894:	9301      	str	r3, [sp, #4]
 8001896:	f107 030f 	add.w	r3, r7, #15
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2301      	movs	r3, #1
 800189e:	4804      	ldr	r0, [pc, #16]	; (80018b0 <SENSOR_IO_Read+0x38>)
 80018a0:	f7ff ff5c 	bl	800175c <I2Cx_ReadMultiple>

  return read_value;
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200008f8 	.word	0x200008f8

080018b4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af02      	add	r7, sp, #8
 80018ba:	603a      	str	r2, [r7, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
 80018c2:	460b      	mov	r3, r1
 80018c4:	71bb      	strb	r3, [r7, #6]
 80018c6:	4613      	mov	r3, r2
 80018c8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80018ca:	79bb      	ldrb	r3, [r7, #6]
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	79f9      	ldrb	r1, [r7, #7]
 80018d0:	88bb      	ldrh	r3, [r7, #4]
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2301      	movs	r3, #1
 80018da:	4804      	ldr	r0, [pc, #16]	; (80018ec <SENSOR_IO_ReadMultiple+0x38>)
 80018dc:	f7ff ff3e 	bl	800175c <I2Cx_ReadMultiple>
 80018e0:	4603      	mov	r3, r0
 80018e2:	b29b      	uxth	r3, r3
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200008f8 	.word	0x200008f8

080018f0 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80018fa:	2300      	movs	r3, #0
 80018fc:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <BSP_ACCELERO_Init+0x74>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	4798      	blx	r3
 8001904:	4603      	mov	r3, r0
 8001906:	2b6a      	cmp	r3, #106	; 0x6a
 8001908:	d002      	beq.n	8001910 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	73fb      	strb	r3, [r7, #15]
 800190e:	e024      	b.n	800195a <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <BSP_ACCELERO_Init+0x78>)
 8001912:	4a14      	ldr	r2, [pc, #80]	; (8001964 <BSP_ACCELERO_Init+0x74>)
 8001914:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001916:	2330      	movs	r3, #48	; 0x30
 8001918:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800191e:	2300      	movs	r3, #0
 8001920:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001922:	2340      	movs	r3, #64	; 0x40
 8001924:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800192e:	797a      	ldrb	r2, [r7, #5]
 8001930:	7abb      	ldrb	r3, [r7, #10]
 8001932:	4313      	orrs	r3, r2
 8001934:	b2db      	uxtb	r3, r3
 8001936:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001938:	7a3b      	ldrb	r3, [r7, #8]
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	b2db      	uxtb	r3, r3
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	b21a      	sxth	r2, r3
 8001944:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001948:	4313      	orrs	r3, r2
 800194a:	b21b      	sxth	r3, r3
 800194c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <BSP_ACCELERO_Init+0x78>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	89ba      	ldrh	r2, [r7, #12]
 8001956:	4610      	mov	r0, r2
 8001958:	4798      	blx	r3
  }  

  return ret;
 800195a:	7bfb      	ldrb	r3, [r7, #15]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000144 	.word	0x20000144
 8001968:	2000094c 	.word	0x2000094c

0800196c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d009      	beq.n	8001990 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	2b00      	cmp	r3, #0
 8001984:	d004      	beq.n	8001990 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001986:	4b04      	ldr	r3, [pc, #16]	; (8001998 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	4798      	blx	r3
    }
  }
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	2000094c 	.word	0x2000094c

0800199c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <BSP_TSENSOR_Init+0x30>)
 80019a8:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <BSP_TSENSOR_Init+0x34>)
 80019aa:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80019ac:	f7ff ff40 	bl	8001830 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <BSP_TSENSOR_Init+0x30>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2100      	movs	r1, #0
 80019b8:	20be      	movs	r0, #190	; 0xbe
 80019ba:	4798      	blx	r3

  ret = TSENSOR_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80019c0:	79fb      	ldrb	r3, [r7, #7]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000950 	.word	0x20000950
 80019d0:	20000134 	.word	0x20000134

080019d4 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <BSP_TSENSOR_ReadTemp+0x18>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	20be      	movs	r0, #190	; 0xbe
 80019e0:	4798      	blx	r3
 80019e2:	eef0 7a40 	vmov.f32	s15, s0
}
 80019e6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000950 	.word	0x20000950

080019f0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2120      	movs	r1, #32
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff38 	bl	8001878 <SENSOR_IO_Read>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	f023 0304 	bic.w	r3, r3, #4
 8001a12:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	f023 0303 	bic.w	r3, r3, #3
 8001a22:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a32:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	7bfa      	ldrb	r2, [r7, #15]
 8001a3a:	2120      	movs	r1, #32
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff01 	bl	8001844 <SENSOR_IO_Write>
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b088      	sub	sp, #32
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	b2d8      	uxtb	r0, r3
 8001a58:	f107 0208 	add.w	r2, r7, #8
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	21b2      	movs	r1, #178	; 0xb2
 8001a60:	f7ff ff28 	bl	80018b4 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2135      	movs	r1, #53	; 0x35
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff04 	bl	8001878 <SENSOR_IO_Read>
 8001a70:	4603      	mov	r3, r0
 8001a72:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001a74:	7ffb      	ldrb	r3, [r7, #31]
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a7e:	b21a      	sxth	r2, r3
 8001a80:	7a3b      	ldrb	r3, [r7, #8]
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	4313      	orrs	r3, r2
 8001a86:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001a88:	7ffb      	ldrb	r3, [r7, #31]
 8001a8a:	019b      	lsls	r3, r3, #6
 8001a8c:	b21b      	sxth	r3, r3
 8001a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	7a7b      	ldrb	r3, [r7, #9]
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001a9c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001aa0:	10db      	asrs	r3, r3, #3
 8001aa2:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001aa4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001aa8:	10db      	asrs	r3, r3, #3
 8001aaa:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	b2d8      	uxtb	r0, r3
 8001ab0:	f107 0208 	add.w	r2, r7, #8
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	21bc      	movs	r1, #188	; 0xbc
 8001ab8:	f7ff fefc 	bl	80018b4 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001abc:	7a7b      	ldrb	r3, [r7, #9]
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	b21a      	sxth	r2, r3
 8001ac2:	7a3b      	ldrb	r3, [r7, #8]
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001aca:	7afb      	ldrb	r3, [r7, #11]
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	b21a      	sxth	r2, r3
 8001ad0:	7abb      	ldrb	r3, [r7, #10]
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	b2d8      	uxtb	r0, r3
 8001adc:	f107 0208 	add.w	r2, r7, #8
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	21aa      	movs	r1, #170	; 0xaa
 8001ae4:	f7ff fee6 	bl	80018b4 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001ae8:	7a7b      	ldrb	r3, [r7, #9]
 8001aea:	021b      	lsls	r3, r3, #8
 8001aec:	b21a      	sxth	r2, r3
 8001aee:	7a3b      	ldrb	r3, [r7, #8]
 8001af0:	b21b      	sxth	r3, r3
 8001af2:	4313      	orrs	r3, r2
 8001af4:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001af6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001afa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001b0c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	ee07 3a90 	vmov	s15, r3
 8001b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b1a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b1e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001b22:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	ee07 3a90 	vmov	s15, r3
 8001b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b34:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b38:	ee07 3a90 	vmov	s15, r3
 8001b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b44:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	ee07 3a90 	vmov	s15, r3
}
 8001b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b52:	3720      	adds	r7, #32
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001b62:	2300      	movs	r3, #0
 8001b64:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001b66:	2110      	movs	r1, #16
 8001b68:	20d4      	movs	r0, #212	; 0xd4
 8001b6a:	f7ff fe85 	bl	8001878 <SENSOR_IO_Read>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001b76:	7bbb      	ldrb	r3, [r7, #14]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001b7e:	7bba      	ldrb	r2, [r7, #14]
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001b86:	7bbb      	ldrb	r3, [r7, #14]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2110      	movs	r1, #16
 8001b8c:	20d4      	movs	r0, #212	; 0xd4
 8001b8e:	f7ff fe59 	bl	8001844 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001b92:	2112      	movs	r1, #18
 8001b94:	20d4      	movs	r0, #212	; 0xd4
 8001b96:	f7ff fe6f 	bl	8001878 <SENSOR_IO_Read>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001ba6:	7bbb      	ldrb	r3, [r7, #14]
 8001ba8:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001bac:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001bae:	7bba      	ldrb	r2, [r7, #14]
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001bb6:	7bbb      	ldrb	r3, [r7, #14]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	2112      	movs	r1, #18
 8001bbc:	20d4      	movs	r0, #212	; 0xd4
 8001bbe:	f7ff fe41 	bl	8001844 <SENSOR_IO_Write>
}
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001bd4:	2110      	movs	r1, #16
 8001bd6:	20d4      	movs	r0, #212	; 0xd4
 8001bd8:	f7ff fe4e 	bl	8001878 <SENSOR_IO_Read>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	461a      	mov	r2, r3
 8001bec:	2110      	movs	r1, #16
 8001bee:	20d4      	movs	r0, #212	; 0xd4
 8001bf0:	f7ff fe28 	bl	8001844 <SENSOR_IO_Write>
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001c00:	f7ff fe16 	bl	8001830 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001c04:	210f      	movs	r1, #15
 8001c06:	20d4      	movs	r0, #212	; 0xd4
 8001c08:	f7ff fe36 	bl	8001878 <SENSOR_IO_Read>
 8001c0c:	4603      	mov	r3, r0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001c20:	2115      	movs	r1, #21
 8001c22:	20d4      	movs	r0, #212	; 0xd4
 8001c24:	f7ff fe28 	bl	8001878 <SENSOR_IO_Read>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	f023 0310 	bic.w	r3, r3, #16
 8001c32:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	f043 0310 	orr.w	r3, r3, #16
 8001c40:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	461a      	mov	r2, r3
 8001c46:	2115      	movs	r1, #21
 8001c48:	20d4      	movs	r0, #212	; 0xd4
 8001c4a:	f7ff fdfb 	bl	8001844 <SENSOR_IO_Write>
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001c6e:	2110      	movs	r1, #16
 8001c70:	20d4      	movs	r0, #212	; 0xd4
 8001c72:	f7ff fe01 	bl	8001878 <SENSOR_IO_Read>
 8001c76:	4603      	mov	r3, r0
 8001c78:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001c7a:	f107 0208 	add.w	r2, r7, #8
 8001c7e:	2306      	movs	r3, #6
 8001c80:	2128      	movs	r1, #40	; 0x28
 8001c82:	20d4      	movs	r0, #212	; 0xd4
 8001c84:	f7ff fe16 	bl	80018b4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	77fb      	strb	r3, [r7, #31]
 8001c8c:	e01c      	b.n	8001cc8 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001c8e:	7ffb      	ldrb	r3, [r7, #31]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	3301      	adds	r3, #1
 8001c94:	3320      	adds	r3, #32
 8001c96:	443b      	add	r3, r7
 8001c98:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	7ffb      	ldrb	r3, [r7, #31]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	3320      	adds	r3, #32
 8001ca8:	443b      	add	r3, r7
 8001caa:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	7ffb      	ldrb	r3, [r7, #31]
 8001cb6:	b212      	sxth	r2, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	3320      	adds	r3, #32
 8001cbc:	443b      	add	r3, r7
 8001cbe:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001cc2:	7ffb      	ldrb	r3, [r7, #31]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	77fb      	strb	r3, [r7, #31]
 8001cc8:	7ffb      	ldrb	r3, [r7, #31]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d9df      	bls.n	8001c8e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001cce:	7dfb      	ldrb	r3, [r7, #23]
 8001cd0:	f003 030c 	and.w	r3, r3, #12
 8001cd4:	2b0c      	cmp	r3, #12
 8001cd6:	d829      	bhi.n	8001d2c <LSM6DSL_AccReadXYZ+0xd4>
 8001cd8:	a201      	add	r2, pc, #4	; (adr r2, 8001ce0 <LSM6DSL_AccReadXYZ+0x88>)
 8001cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cde:	bf00      	nop
 8001ce0:	08001d15 	.word	0x08001d15
 8001ce4:	08001d2d 	.word	0x08001d2d
 8001ce8:	08001d2d 	.word	0x08001d2d
 8001cec:	08001d2d 	.word	0x08001d2d
 8001cf0:	08001d27 	.word	0x08001d27
 8001cf4:	08001d2d 	.word	0x08001d2d
 8001cf8:	08001d2d 	.word	0x08001d2d
 8001cfc:	08001d2d 	.word	0x08001d2d
 8001d00:	08001d1b 	.word	0x08001d1b
 8001d04:	08001d2d 	.word	0x08001d2d
 8001d08:	08001d2d 	.word	0x08001d2d
 8001d0c:	08001d2d 	.word	0x08001d2d
 8001d10:	08001d21 	.word	0x08001d21
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001d14:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <LSM6DSL_AccReadXYZ+0x120>)
 8001d16:	61bb      	str	r3, [r7, #24]
    break;
 8001d18:	e008      	b.n	8001d2c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001d1a:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <LSM6DSL_AccReadXYZ+0x124>)
 8001d1c:	61bb      	str	r3, [r7, #24]
    break;
 8001d1e:	e005      	b.n	8001d2c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001d20:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <LSM6DSL_AccReadXYZ+0x128>)
 8001d22:	61bb      	str	r3, [r7, #24]
    break;
 8001d24:	e002      	b.n	8001d2c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8001d26:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <LSM6DSL_AccReadXYZ+0x12c>)
 8001d28:	61bb      	str	r3, [r7, #24]
    break;    
 8001d2a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	77fb      	strb	r3, [r7, #31]
 8001d30:	e01a      	b.n	8001d68 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001d32:	7ffb      	ldrb	r3, [r7, #31]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	3320      	adds	r3, #32
 8001d38:	443b      	add	r3, r7
 8001d3a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001d3e:	ee07 3a90 	vmov	s15, r3
 8001d42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d46:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4e:	7ffb      	ldrb	r3, [r7, #31]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d5a:	ee17 2a90 	vmov	r2, s15
 8001d5e:	b212      	sxth	r2, r2
 8001d60:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001d62:	7ffb      	ldrb	r3, [r7, #31]
 8001d64:	3301      	adds	r3, #1
 8001d66:	77fb      	strb	r3, [r7, #31]
 8001d68:	7ffb      	ldrb	r3, [r7, #31]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d9e1      	bls.n	8001d32 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
 8001d72:	3720      	adds	r7, #32
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	3d79db23 	.word	0x3d79db23
 8001d7c:	3df9db23 	.word	0x3df9db23
 8001d80:	3e79db23 	.word	0x3e79db23
 8001d84:	3ef9db23 	.word	0x3ef9db23

08001d88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d92:	2003      	movs	r0, #3
 8001d94:	f000 f960 	bl	8002058 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f000 f80d 	bl	8001db8 <HAL_InitTick>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	71fb      	strb	r3, [r7, #7]
 8001da8:	e001      	b.n	8001dae <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001daa:	f7ff f98b 	bl	80010c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dae:	79fb      	ldrb	r3, [r7, #7]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_InitTick+0x6c>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d023      	beq.n	8001e14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dcc:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HAL_InitTick+0x70>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_InitTick+0x6c>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f96d 	bl	80020c2 <HAL_SYSTICK_Config>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10f      	bne.n	8001e0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b0f      	cmp	r3, #15
 8001df2:	d809      	bhi.n	8001e08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df4:	2200      	movs	r2, #0
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f000 f937 	bl	800206e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e00:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <HAL_InitTick+0x74>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e007      	b.n	8001e18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	e004      	b.n	8001e18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
 8001e12:	e001      	b.n	8001e18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	2000017c 	.word	0x2000017c
 8001e28:	20000130 	.word	0x20000130
 8001e2c:	20000178 	.word	0x20000178

08001e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_IncTick+0x20>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_IncTick+0x24>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	4a04      	ldr	r2, [pc, #16]	; (8001e54 <HAL_IncTick+0x24>)
 8001e42:	6013      	str	r3, [r2, #0]
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	2000017c 	.word	0x2000017c
 8001e54:	20000954 	.word	0x20000954

08001e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <HAL_GetTick+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000954 	.word	0x20000954

08001e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e78:	f7ff ffee 	bl	8001e58 <HAL_GetTick>
 8001e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e88:	d005      	beq.n	8001e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <HAL_Delay+0x44>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4413      	add	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e96:	bf00      	nop
 8001e98:	f7ff ffde 	bl	8001e58 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d8f7      	bhi.n	8001e98 <HAL_Delay+0x28>
  {
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	2000017c 	.word	0x2000017c

08001eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <__NVIC_SetPriorityGrouping+0x44>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eea:	4a04      	ldr	r2, [pc, #16]	; (8001efc <__NVIC_SetPriorityGrouping+0x44>)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	60d3      	str	r3, [r2, #12]
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f04:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <__NVIC_GetPriorityGrouping+0x18>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	0a1b      	lsrs	r3, r3, #8
 8001f0a:	f003 0307 	and.w	r3, r3, #7
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	db0b      	blt.n	8001f46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	f003 021f 	and.w	r2, r3, #31
 8001f34:	4907      	ldr	r1, [pc, #28]	; (8001f54 <__NVIC_EnableIRQ+0x38>)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	095b      	lsrs	r3, r3, #5
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000e100 	.word	0xe000e100

08001f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	db0a      	blt.n	8001f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	490c      	ldr	r1, [pc, #48]	; (8001fa4 <__NVIC_SetPriority+0x4c>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f80:	e00a      	b.n	8001f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4908      	ldr	r1, [pc, #32]	; (8001fa8 <__NVIC_SetPriority+0x50>)
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	3b04      	subs	r3, #4
 8001f90:	0112      	lsls	r2, r2, #4
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	440b      	add	r3, r1
 8001f96:	761a      	strb	r2, [r3, #24]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000e100 	.word	0xe000e100
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f1c3 0307 	rsb	r3, r3, #7
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	bf28      	it	cs
 8001fca:	2304      	movcs	r3, #4
 8001fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d902      	bls.n	8001fdc <NVIC_EncodePriority+0x30>
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3b03      	subs	r3, #3
 8001fda:	e000      	b.n	8001fde <NVIC_EncodePriority+0x32>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43da      	mvns	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	401a      	ands	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	43d9      	mvns	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	4313      	orrs	r3, r2
         );
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002024:	d301      	bcc.n	800202a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002026:	2301      	movs	r3, #1
 8002028:	e00f      	b.n	800204a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <SysTick_Config+0x40>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002032:	210f      	movs	r1, #15
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	f7ff ff8e 	bl	8001f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <SysTick_Config+0x40>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002042:	4b04      	ldr	r3, [pc, #16]	; (8002054 <SysTick_Config+0x40>)
 8002044:	2207      	movs	r2, #7
 8002046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	e000e010 	.word	0xe000e010

08002058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ff29 	bl	8001eb8 <__NVIC_SetPriorityGrouping>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b086      	sub	sp, #24
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002080:	f7ff ff3e 	bl	8001f00 <__NVIC_GetPriorityGrouping>
 8002084:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	6978      	ldr	r0, [r7, #20]
 800208c:	f7ff ff8e 	bl	8001fac <NVIC_EncodePriority>
 8002090:	4602      	mov	r2, r0
 8002092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff5d 	bl	8001f58 <__NVIC_SetPriority>
}
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff31 	bl	8001f1c <__NVIC_EnableIRQ>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ffa2 	bl	8002014 <SysTick_Config>
 80020d0:	4603      	mov	r3, r0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e0ac      	b.n	8002248 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 f8b2 	bl	800225c <DFSDM_GetChannelFromInstance>
 80020f8:	4603      	mov	r3, r0
 80020fa:	4a55      	ldr	r2, [pc, #340]	; (8002250 <HAL_DFSDM_ChannelInit+0x174>)
 80020fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e09f      	b.n	8002248 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7fe ffff 	bl	800110c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800210e:	4b51      	ldr	r3, [pc, #324]	; (8002254 <HAL_DFSDM_ChannelInit+0x178>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	3301      	adds	r3, #1
 8002114:	4a4f      	ldr	r2, [pc, #316]	; (8002254 <HAL_DFSDM_ChannelInit+0x178>)
 8002116:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002118:	4b4e      	ldr	r3, [pc, #312]	; (8002254 <HAL_DFSDM_ChannelInit+0x178>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d125      	bne.n	800216c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002120:	4b4d      	ldr	r3, [pc, #308]	; (8002258 <HAL_DFSDM_ChannelInit+0x17c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a4c      	ldr	r2, [pc, #304]	; (8002258 <HAL_DFSDM_ChannelInit+0x17c>)
 8002126:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800212a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800212c:	4b4a      	ldr	r3, [pc, #296]	; (8002258 <HAL_DFSDM_ChannelInit+0x17c>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	4948      	ldr	r1, [pc, #288]	; (8002258 <HAL_DFSDM_ChannelInit+0x17c>)
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800213a:	4b47      	ldr	r3, [pc, #284]	; (8002258 <HAL_DFSDM_ChannelInit+0x17c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a46      	ldr	r2, [pc, #280]	; (8002258 <HAL_DFSDM_ChannelInit+0x17c>)
 8002140:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002144:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	791b      	ldrb	r3, [r3, #4]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d108      	bne.n	8002160 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800214e:	4b42      	ldr	r3, [pc, #264]	; (8002258 <HAL_DFSDM_ChannelInit+0x17c>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	3b01      	subs	r3, #1
 8002158:	041b      	lsls	r3, r3, #16
 800215a:	493f      	ldr	r1, [pc, #252]	; (8002258 <HAL_DFSDM_ChannelInit+0x17c>)
 800215c:	4313      	orrs	r3, r2
 800215e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002160:	4b3d      	ldr	r3, [pc, #244]	; (8002258 <HAL_DFSDM_ChannelInit+0x17c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a3c      	ldr	r2, [pc, #240]	; (8002258 <HAL_DFSDM_ChannelInit+0x17c>)
 8002166:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800216a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800217a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6819      	ldr	r1, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800218a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002190:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 020f 	bic.w	r2, r2, #15
 80021a8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6819      	ldr	r1, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80021d0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6899      	ldr	r1, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	3b01      	subs	r3, #1
 80021e2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f002 0207 	and.w	r2, r2, #7
 80021fc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6859      	ldr	r1, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002228:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f000 f810 	bl	800225c <DFSDM_GetChannelFromInstance>
 800223c:	4602      	mov	r2, r0
 800223e:	4904      	ldr	r1, [pc, #16]	; (8002250 <HAL_DFSDM_ChannelInit+0x174>)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	2000095c 	.word	0x2000095c
 8002254:	20000958 	.word	0x20000958
 8002258:	40016000 	.word	0x40016000

0800225c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a1c      	ldr	r2, [pc, #112]	; (80022d8 <DFSDM_GetChannelFromInstance+0x7c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d102      	bne.n	8002272 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	e02b      	b.n	80022ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a19      	ldr	r2, [pc, #100]	; (80022dc <DFSDM_GetChannelFromInstance+0x80>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d102      	bne.n	8002280 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800227a:	2301      	movs	r3, #1
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	e024      	b.n	80022ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a17      	ldr	r2, [pc, #92]	; (80022e0 <DFSDM_GetChannelFromInstance+0x84>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d102      	bne.n	800228e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002288:	2302      	movs	r3, #2
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	e01d      	b.n	80022ca <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a14      	ldr	r2, [pc, #80]	; (80022e4 <DFSDM_GetChannelFromInstance+0x88>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d102      	bne.n	800229c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002296:	2304      	movs	r3, #4
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	e016      	b.n	80022ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a12      	ldr	r2, [pc, #72]	; (80022e8 <DFSDM_GetChannelFromInstance+0x8c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d102      	bne.n	80022aa <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80022a4:	2305      	movs	r3, #5
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	e00f      	b.n	80022ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a0f      	ldr	r2, [pc, #60]	; (80022ec <DFSDM_GetChannelFromInstance+0x90>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d102      	bne.n	80022b8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80022b2:	2306      	movs	r3, #6
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	e008      	b.n	80022ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a0d      	ldr	r2, [pc, #52]	; (80022f0 <DFSDM_GetChannelFromInstance+0x94>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d102      	bne.n	80022c6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80022c0:	2307      	movs	r3, #7
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	e001      	b.n	80022ca <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80022c6:	2303      	movs	r3, #3
 80022c8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80022ca:	68fb      	ldr	r3, [r7, #12]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	40016000 	.word	0x40016000
 80022dc:	40016020 	.word	0x40016020
 80022e0:	40016040 	.word	0x40016040
 80022e4:	40016080 	.word	0x40016080
 80022e8:	400160a0 	.word	0x400160a0
 80022ec:	400160c0 	.word	0x400160c0
 80022f0:	400160e0 	.word	0x400160e0

080022f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002302:	e17f      	b.n	8002604 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	2101      	movs	r1, #1
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	4013      	ands	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 8171 	beq.w	80025fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b01      	cmp	r3, #1
 8002326:	d005      	beq.n	8002334 <HAL_GPIO_Init+0x40>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d130      	bne.n	8002396 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4013      	ands	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800236a:	2201      	movs	r2, #1
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	091b      	lsrs	r3, r3, #4
 8002380:	f003 0201 	and.w	r2, r3, #1
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d118      	bne.n	80023d4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80023a8:	2201      	movs	r2, #1
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	08db      	lsrs	r3, r3, #3
 80023be:	f003 0201 	and.w	r2, r3, #1
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d017      	beq.n	8002410 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d123      	bne.n	8002464 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	08da      	lsrs	r2, r3, #3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3208      	adds	r2, #8
 8002424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	220f      	movs	r2, #15
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	08da      	lsrs	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3208      	adds	r2, #8
 800245e:	6939      	ldr	r1, [r7, #16]
 8002460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	2203      	movs	r2, #3
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0203 	and.w	r2, r3, #3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80ac 	beq.w	80025fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a6:	4b5f      	ldr	r3, [pc, #380]	; (8002624 <HAL_GPIO_Init+0x330>)
 80024a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024aa:	4a5e      	ldr	r2, [pc, #376]	; (8002624 <HAL_GPIO_Init+0x330>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6613      	str	r3, [r2, #96]	; 0x60
 80024b2:	4b5c      	ldr	r3, [pc, #368]	; (8002624 <HAL_GPIO_Init+0x330>)
 80024b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024be:	4a5a      	ldr	r2, [pc, #360]	; (8002628 <HAL_GPIO_Init+0x334>)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	3302      	adds	r3, #2
 80024c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	220f      	movs	r2, #15
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024e8:	d025      	beq.n	8002536 <HAL_GPIO_Init+0x242>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a4f      	ldr	r2, [pc, #316]	; (800262c <HAL_GPIO_Init+0x338>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d01f      	beq.n	8002532 <HAL_GPIO_Init+0x23e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4e      	ldr	r2, [pc, #312]	; (8002630 <HAL_GPIO_Init+0x33c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d019      	beq.n	800252e <HAL_GPIO_Init+0x23a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4d      	ldr	r2, [pc, #308]	; (8002634 <HAL_GPIO_Init+0x340>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d013      	beq.n	800252a <HAL_GPIO_Init+0x236>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4c      	ldr	r2, [pc, #304]	; (8002638 <HAL_GPIO_Init+0x344>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00d      	beq.n	8002526 <HAL_GPIO_Init+0x232>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a4b      	ldr	r2, [pc, #300]	; (800263c <HAL_GPIO_Init+0x348>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d007      	beq.n	8002522 <HAL_GPIO_Init+0x22e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a4a      	ldr	r2, [pc, #296]	; (8002640 <HAL_GPIO_Init+0x34c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d101      	bne.n	800251e <HAL_GPIO_Init+0x22a>
 800251a:	2306      	movs	r3, #6
 800251c:	e00c      	b.n	8002538 <HAL_GPIO_Init+0x244>
 800251e:	2307      	movs	r3, #7
 8002520:	e00a      	b.n	8002538 <HAL_GPIO_Init+0x244>
 8002522:	2305      	movs	r3, #5
 8002524:	e008      	b.n	8002538 <HAL_GPIO_Init+0x244>
 8002526:	2304      	movs	r3, #4
 8002528:	e006      	b.n	8002538 <HAL_GPIO_Init+0x244>
 800252a:	2303      	movs	r3, #3
 800252c:	e004      	b.n	8002538 <HAL_GPIO_Init+0x244>
 800252e:	2302      	movs	r3, #2
 8002530:	e002      	b.n	8002538 <HAL_GPIO_Init+0x244>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_GPIO_Init+0x244>
 8002536:	2300      	movs	r3, #0
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	f002 0203 	and.w	r2, r2, #3
 800253e:	0092      	lsls	r2, r2, #2
 8002540:	4093      	lsls	r3, r2
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002548:	4937      	ldr	r1, [pc, #220]	; (8002628 <HAL_GPIO_Init+0x334>)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	089b      	lsrs	r3, r3, #2
 800254e:	3302      	adds	r3, #2
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002556:	4b3b      	ldr	r3, [pc, #236]	; (8002644 <HAL_GPIO_Init+0x350>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	43db      	mvns	r3, r3
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800257a:	4a32      	ldr	r2, [pc, #200]	; (8002644 <HAL_GPIO_Init+0x350>)
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002580:	4b30      	ldr	r3, [pc, #192]	; (8002644 <HAL_GPIO_Init+0x350>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	43db      	mvns	r3, r3
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4013      	ands	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025a4:	4a27      	ldr	r2, [pc, #156]	; (8002644 <HAL_GPIO_Init+0x350>)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025aa:	4b26      	ldr	r3, [pc, #152]	; (8002644 <HAL_GPIO_Init+0x350>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4013      	ands	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025ce:	4a1d      	ldr	r2, [pc, #116]	; (8002644 <HAL_GPIO_Init+0x350>)
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <HAL_GPIO_Init+0x350>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	43db      	mvns	r3, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4013      	ands	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025f8:	4a12      	ldr	r2, [pc, #72]	; (8002644 <HAL_GPIO_Init+0x350>)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	3301      	adds	r3, #1
 8002602:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa22 f303 	lsr.w	r3, r2, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	f47f ae78 	bne.w	8002304 <HAL_GPIO_Init+0x10>
  }
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	371c      	adds	r7, #28
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	40010000 	.word	0x40010000
 800262c:	48000400 	.word	0x48000400
 8002630:	48000800 	.word	0x48000800
 8002634:	48000c00 	.word	0x48000c00
 8002638:	48001000 	.word	0x48001000
 800263c:	48001400 	.word	0x48001400
 8002640:	48001800 	.word	0x48001800
 8002644:	40010400 	.word	0x40010400

08002648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	807b      	strh	r3, [r7, #2]
 8002654:	4613      	mov	r3, r2
 8002656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002658:	787b      	ldrb	r3, [r7, #1]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800265e:	887a      	ldrh	r2, [r7, #2]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002664:	e002      	b.n	800266c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002666:	887a      	ldrh	r2, [r7, #2]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	88fb      	ldrh	r3, [r7, #6]
 8002688:	4013      	ands	r3, r2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d006      	beq.n	800269c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800268e:	4a05      	ldr	r2, [pc, #20]	; (80026a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	4618      	mov	r0, r3
 8002698:	f000 f806 	bl	80026a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40010400 	.word	0x40010400

080026a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e08d      	b.n	80027ec <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d106      	bne.n	80026ea <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f8b4 	bl	8002852 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2224      	movs	r2, #36	; 0x24
 80026ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0201 	bic.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800270e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800271e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d107      	bne.n	8002738 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002734:	609a      	str	r2, [r3, #8]
 8002736:	e006      	b.n	8002746 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002744:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d108      	bne.n	8002760 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	e007      	b.n	8002770 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800276e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6812      	ldr	r2, [r2, #0]
 800277a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800277e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002782:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002792:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69d9      	ldr	r1, [r3, #28]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1a      	ldr	r2, [r3, #32]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0201 	orr.w	r2, r2, #1
 80027cc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e021      	b.n	800284a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2224      	movs	r2, #36	; 0x24
 800280a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f821 	bl	8002866 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af02      	add	r7, sp, #8
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	4608      	mov	r0, r1
 8002886:	4611      	mov	r1, r2
 8002888:	461a      	mov	r2, r3
 800288a:	4603      	mov	r3, r0
 800288c:	817b      	strh	r3, [r7, #10]
 800288e:	460b      	mov	r3, r1
 8002890:	813b      	strh	r3, [r7, #8]
 8002892:	4613      	mov	r3, r2
 8002894:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b20      	cmp	r3, #32
 80028a0:	f040 80f9 	bne.w	8002a96 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028a4:	6a3b      	ldr	r3, [r7, #32]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <HAL_I2C_Mem_Write+0x34>
 80028aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d105      	bne.n	80028bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0ed      	b.n	8002a98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_I2C_Mem_Write+0x4e>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e0e6      	b.n	8002a98 <HAL_I2C_Mem_Write+0x21c>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028d2:	f7ff fac1 	bl	8001e58 <HAL_GetTick>
 80028d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	2319      	movs	r3, #25
 80028de:	2201      	movs	r2, #1
 80028e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 fac3 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0d1      	b.n	8002a98 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2221      	movs	r2, #33	; 0x21
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2240      	movs	r2, #64	; 0x40
 8002900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a3a      	ldr	r2, [r7, #32]
 800290e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002914:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800291c:	88f8      	ldrh	r0, [r7, #6]
 800291e:	893a      	ldrh	r2, [r7, #8]
 8002920:	8979      	ldrh	r1, [r7, #10]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	9301      	str	r3, [sp, #4]
 8002926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	4603      	mov	r3, r0
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 f9d3 	bl	8002cd8 <I2C_RequestMemoryWrite>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0a9      	b.n	8002a98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	2bff      	cmp	r3, #255	; 0xff
 800294c:	d90e      	bls.n	800296c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	22ff      	movs	r2, #255	; 0xff
 8002952:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002958:	b2da      	uxtb	r2, r3
 800295a:	8979      	ldrh	r1, [r7, #10]
 800295c:	2300      	movs	r3, #0
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 fc3d 	bl	80031e4 <I2C_TransferConfig>
 800296a:	e00f      	b.n	800298c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297a:	b2da      	uxtb	r2, r3
 800297c:	8979      	ldrh	r1, [r7, #10]
 800297e:	2300      	movs	r3, #0
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 fc2c 	bl	80031e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 fabc 	bl	8002f0e <I2C_WaitOnTXISFlagUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e07b      	b.n	8002a98 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	781a      	ldrb	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d034      	beq.n	8002a44 <HAL_I2C_Mem_Write+0x1c8>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d130      	bne.n	8002a44 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e8:	2200      	movs	r2, #0
 80029ea:	2180      	movs	r1, #128	; 0x80
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 fa3f 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e04d      	b.n	8002a98 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2bff      	cmp	r3, #255	; 0xff
 8002a04:	d90e      	bls.n	8002a24 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	22ff      	movs	r2, #255	; 0xff
 8002a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	8979      	ldrh	r1, [r7, #10]
 8002a14:	2300      	movs	r3, #0
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 fbe1 	bl	80031e4 <I2C_TransferConfig>
 8002a22:	e00f      	b.n	8002a44 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	8979      	ldrh	r1, [r7, #10]
 8002a36:	2300      	movs	r3, #0
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 fbd0 	bl	80031e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d19e      	bne.n	800298c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 faa2 	bl	8002f9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e01a      	b.n	8002a98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2220      	movs	r2, #32
 8002a68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <HAL_I2C_Mem_Write+0x224>)
 8002a76:	400b      	ands	r3, r1
 8002a78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	e000      	b.n	8002a98 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a96:	2302      	movs	r3, #2
  }
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	fe00e800 	.word	0xfe00e800

08002aa4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	4608      	mov	r0, r1
 8002aae:	4611      	mov	r1, r2
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	817b      	strh	r3, [r7, #10]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	813b      	strh	r3, [r7, #8]
 8002aba:	4613      	mov	r3, r2
 8002abc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	f040 80fd 	bne.w	8002cc6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <HAL_I2C_Mem_Read+0x34>
 8002ad2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d105      	bne.n	8002ae4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ade:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0f1      	b.n	8002cc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_I2C_Mem_Read+0x4e>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e0ea      	b.n	8002cc8 <HAL_I2C_Mem_Read+0x224>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002afa:	f7ff f9ad 	bl	8001e58 <HAL_GetTick>
 8002afe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	2319      	movs	r3, #25
 8002b06:	2201      	movs	r2, #1
 8002b08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f9af 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0d5      	b.n	8002cc8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2222      	movs	r2, #34	; 0x22
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2240      	movs	r2, #64	; 0x40
 8002b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a3a      	ldr	r2, [r7, #32]
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b44:	88f8      	ldrh	r0, [r7, #6]
 8002b46:	893a      	ldrh	r2, [r7, #8]
 8002b48:	8979      	ldrh	r1, [r7, #10]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	9301      	str	r3, [sp, #4]
 8002b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	4603      	mov	r3, r0
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f913 	bl	8002d80 <I2C_RequestMemoryRead>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0ad      	b.n	8002cc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2bff      	cmp	r3, #255	; 0xff
 8002b74:	d90e      	bls.n	8002b94 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	22ff      	movs	r2, #255	; 0xff
 8002b7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	8979      	ldrh	r1, [r7, #10]
 8002b84:	4b52      	ldr	r3, [pc, #328]	; (8002cd0 <HAL_I2C_Mem_Read+0x22c>)
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 fb29 	bl	80031e4 <I2C_TransferConfig>
 8002b92:	e00f      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	8979      	ldrh	r1, [r7, #10]
 8002ba6:	4b4a      	ldr	r3, [pc, #296]	; (8002cd0 <HAL_I2C_Mem_Read+0x22c>)
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 fb18 	bl	80031e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2104      	movs	r1, #4
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f956 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e07c      	b.n	8002cc8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d034      	beq.n	8002c74 <HAL_I2C_Mem_Read+0x1d0>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d130      	bne.n	8002c74 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2180      	movs	r1, #128	; 0x80
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f927 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e04d      	b.n	8002cc8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2bff      	cmp	r3, #255	; 0xff
 8002c34:	d90e      	bls.n	8002c54 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	22ff      	movs	r2, #255	; 0xff
 8002c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	8979      	ldrh	r1, [r7, #10]
 8002c44:	2300      	movs	r3, #0
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fac9 	bl	80031e4 <I2C_TransferConfig>
 8002c52:	e00f      	b.n	8002c74 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	8979      	ldrh	r1, [r7, #10]
 8002c66:	2300      	movs	r3, #0
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 fab8 	bl	80031e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d19a      	bne.n	8002bb4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f98a 	bl	8002f9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e01a      	b.n	8002cc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2220      	movs	r2, #32
 8002c98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6859      	ldr	r1, [r3, #4]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_I2C_Mem_Read+0x230>)
 8002ca6:	400b      	ands	r3, r1
 8002ca8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2220      	movs	r2, #32
 8002cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e000      	b.n	8002cc8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002cc6:	2302      	movs	r3, #2
  }
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	80002400 	.word	0x80002400
 8002cd4:	fe00e800 	.word	0xfe00e800

08002cd8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	4608      	mov	r0, r1
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	817b      	strh	r3, [r7, #10]
 8002cea:	460b      	mov	r3, r1
 8002cec:	813b      	strh	r3, [r7, #8]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	8979      	ldrh	r1, [r7, #10]
 8002cf8:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <I2C_RequestMemoryWrite+0xa4>)
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fa6f 	bl	80031e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	69b9      	ldr	r1, [r7, #24]
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 f8ff 	bl	8002f0e <I2C_WaitOnTXISFlagUntilTimeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e02c      	b.n	8002d74 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d1a:	88fb      	ldrh	r3, [r7, #6]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d105      	bne.n	8002d2c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d20:	893b      	ldrh	r3, [r7, #8]
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	629a      	str	r2, [r3, #40]	; 0x28
 8002d2a:	e015      	b.n	8002d58 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d2c:	893b      	ldrh	r3, [r7, #8]
 8002d2e:	0a1b      	lsrs	r3, r3, #8
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	69b9      	ldr	r1, [r7, #24]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f8e5 	bl	8002f0e <I2C_WaitOnTXISFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e012      	b.n	8002d74 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d4e:	893b      	ldrh	r3, [r7, #8]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2180      	movs	r1, #128	; 0x80
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f884 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	80002000 	.word	0x80002000

08002d80 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	4608      	mov	r0, r1
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4603      	mov	r3, r0
 8002d90:	817b      	strh	r3, [r7, #10]
 8002d92:	460b      	mov	r3, r1
 8002d94:	813b      	strh	r3, [r7, #8]
 8002d96:	4613      	mov	r3, r2
 8002d98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	8979      	ldrh	r1, [r7, #10]
 8002da0:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <I2C_RequestMemoryRead+0xa4>)
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	2300      	movs	r3, #0
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 fa1c 	bl	80031e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dac:	69fa      	ldr	r2, [r7, #28]
 8002dae:	69b9      	ldr	r1, [r7, #24]
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f8ac 	bl	8002f0e <I2C_WaitOnTXISFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e02c      	b.n	8002e1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d105      	bne.n	8002dd2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dc6:	893b      	ldrh	r3, [r7, #8]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	629a      	str	r2, [r3, #40]	; 0x28
 8002dd0:	e015      	b.n	8002dfe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002dd2:	893b      	ldrh	r3, [r7, #8]
 8002dd4:	0a1b      	lsrs	r3, r3, #8
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de0:	69fa      	ldr	r2, [r7, #28]
 8002de2:	69b9      	ldr	r1, [r7, #24]
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f892 	bl	8002f0e <I2C_WaitOnTXISFlagUntilTimeout>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e012      	b.n	8002e1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002df4:	893b      	ldrh	r3, [r7, #8]
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	2200      	movs	r2, #0
 8002e06:	2140      	movs	r1, #64	; 0x40
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f831 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	80002000 	.word	0x80002000

08002e28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d103      	bne.n	8002e46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2200      	movs	r2, #0
 8002e44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d007      	beq.n	8002e64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	619a      	str	r2, [r3, #24]
  }
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e80:	e031      	b.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d02d      	beq.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8a:	f7fe ffe5 	bl	8001e58 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d302      	bcc.n	8002ea0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d122      	bne.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d113      	bne.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	f043 0220 	orr.w	r2, r3, #32
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e00f      	b.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699a      	ldr	r2, [r3, #24]
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	bf0c      	ite	eq
 8002ef6:	2301      	moveq	r3, #1
 8002ef8:	2300      	movne	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d0be      	beq.n	8002e82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f1a:	e033      	b.n	8002f84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f87f 	bl	8003024 <I2C_IsErrorOccurred>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e031      	b.n	8002f94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f36:	d025      	beq.n	8002f84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f38:	f7fe ff8e 	bl	8001e58 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d302      	bcc.n	8002f4e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d11a      	bne.n	8002f84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d013      	beq.n	8002f84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f60:	f043 0220 	orr.w	r2, r3, #32
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e007      	b.n	8002f94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d1c4      	bne.n	8002f1c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fa8:	e02f      	b.n	800300a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f838 	bl	8003024 <I2C_IsErrorOccurred>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e02d      	b.n	800301a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbe:	f7fe ff4b 	bl	8001e58 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d302      	bcc.n	8002fd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d11a      	bne.n	800300a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	d013      	beq.n	800300a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	f043 0220 	orr.w	r2, r3, #32
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e007      	b.n	800301a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b20      	cmp	r3, #32
 8003016:	d1c8      	bne.n	8002faa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	; 0x28
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800303e:	2300      	movs	r3, #0
 8003040:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	d068      	beq.n	8003122 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2210      	movs	r2, #16
 8003056:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003058:	e049      	b.n	80030ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003060:	d045      	beq.n	80030ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003062:	f7fe fef9 	bl	8001e58 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	429a      	cmp	r2, r3
 8003070:	d302      	bcc.n	8003078 <I2C_IsErrorOccurred+0x54>
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d13a      	bne.n	80030ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003082:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800308a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800309a:	d121      	bne.n	80030e0 <I2C_IsErrorOccurred+0xbc>
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030a2:	d01d      	beq.n	80030e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80030a4:	7cfb      	ldrb	r3, [r7, #19]
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	d01a      	beq.n	80030e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030ba:	f7fe fecd 	bl	8001e58 <HAL_GetTick>
 80030be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030c0:	e00e      	b.n	80030e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030c2:	f7fe fec9 	bl	8001e58 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b19      	cmp	r3, #25
 80030ce:	d907      	bls.n	80030e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	f043 0320 	orr.w	r3, r3, #32
 80030d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80030de:	e006      	b.n	80030ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	d1e9      	bne.n	80030c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d003      	beq.n	8003104 <I2C_IsErrorOccurred+0xe0>
 80030fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0aa      	beq.n	800305a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003108:	2b00      	cmp	r3, #0
 800310a:	d103      	bne.n	8003114 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2220      	movs	r2, #32
 8003112:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	f043 0304 	orr.w	r3, r3, #4
 800311a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00b      	beq.n	800314c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003144:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00b      	beq.n	800316e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	f043 0308 	orr.w	r3, r3, #8
 800315c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003166:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00b      	beq.n	8003190 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	f043 0302 	orr.w	r3, r3, #2
 800317e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003188:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01c      	beq.n	80031d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7ff fe45 	bl	8002e28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6859      	ldr	r1, [r3, #4]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <I2C_IsErrorOccurred+0x1bc>)
 80031aa:	400b      	ands	r3, r1
 80031ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	431a      	orrs	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80031d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3728      	adds	r7, #40	; 0x28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	fe00e800 	.word	0xfe00e800

080031e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	460b      	mov	r3, r1
 80031f0:	817b      	strh	r3, [r7, #10]
 80031f2:	4613      	mov	r3, r2
 80031f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031f6:	897b      	ldrh	r3, [r7, #10]
 80031f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031fc:	7a7b      	ldrb	r3, [r7, #9]
 80031fe:	041b      	lsls	r3, r3, #16
 8003200:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003204:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	4313      	orrs	r3, r2
 800320e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003212:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	0d5b      	lsrs	r3, r3, #21
 800321e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <I2C_TransferConfig+0x60>)
 8003224:	430b      	orrs	r3, r1
 8003226:	43db      	mvns	r3, r3
 8003228:	ea02 0103 	and.w	r1, r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003236:	bf00      	nop
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	03ff63ff 	.word	0x03ff63ff

08003248 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b20      	cmp	r3, #32
 800325c:	d138      	bne.n	80032d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003268:	2302      	movs	r3, #2
 800326a:	e032      	b.n	80032d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2224      	movs	r2, #36	; 0x24
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800329a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6819      	ldr	r1, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	e000      	b.n	80032d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032d0:	2302      	movs	r3, #2
  }
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032e0:	b08f      	sub	sp, #60	; 0x3c
 80032e2:	af0a      	add	r7, sp, #40	; 0x28
 80032e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e116      	b.n	800351e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fe f84a 	bl	80013a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2203      	movs	r2, #3
 8003314:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d102      	bne.n	800332a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f002 fafb 	bl	800592a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	603b      	str	r3, [r7, #0]
 800333a:	687e      	ldr	r6, [r7, #4]
 800333c:	466d      	mov	r5, sp
 800333e:	f106 0410 	add.w	r4, r6, #16
 8003342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800334a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800334e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003352:	1d33      	adds	r3, r6, #4
 8003354:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003356:	6838      	ldr	r0, [r7, #0]
 8003358:	f002 fabb 	bl	80058d2 <USB_CoreInit>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2202      	movs	r2, #2
 8003366:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e0d7      	b.n	800351e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2100      	movs	r1, #0
 8003374:	4618      	mov	r0, r3
 8003376:	f002 fae9 	bl	800594c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800337a:	2300      	movs	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]
 800337e:	e04a      	b.n	8003416 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003380:	7bfa      	ldrb	r2, [r7, #15]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	333d      	adds	r3, #61	; 0x3d
 8003390:	2201      	movs	r2, #1
 8003392:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003394:	7bfa      	ldrb	r2, [r7, #15]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	333c      	adds	r3, #60	; 0x3c
 80033a4:	7bfa      	ldrb	r2, [r7, #15]
 80033a6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033a8:	7bfa      	ldrb	r2, [r7, #15]
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
 80033ac:	b298      	uxth	r0, r3
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	3356      	adds	r3, #86	; 0x56
 80033bc:	4602      	mov	r2, r0
 80033be:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033c0:	7bfa      	ldrb	r2, [r7, #15]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	3340      	adds	r3, #64	; 0x40
 80033d0:	2200      	movs	r2, #0
 80033d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033d4:	7bfa      	ldrb	r2, [r7, #15]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	3344      	adds	r3, #68	; 0x44
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	3348      	adds	r3, #72	; 0x48
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033fc:	7bfa      	ldrb	r2, [r7, #15]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	334c      	adds	r3, #76	; 0x4c
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	3301      	adds	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	429a      	cmp	r2, r3
 800341e:	d3af      	bcc.n	8003380 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003420:	2300      	movs	r3, #0
 8003422:	73fb      	strb	r3, [r7, #15]
 8003424:	e044      	b.n	80034b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003426:	7bfa      	ldrb	r2, [r7, #15]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800343c:	7bfa      	ldrb	r2, [r7, #15]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800344e:	7bfa      	ldrb	r2, [r7, #15]
 8003450:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003452:	7bfa      	ldrb	r2, [r7, #15]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003468:	7bfa      	ldrb	r2, [r7, #15]
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800347e:	7bfa      	ldrb	r2, [r7, #15]
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003494:	7bfa      	ldrb	r2, [r7, #15]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	3301      	adds	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
 80034b0:	7bfa      	ldrb	r2, [r7, #15]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d3b5      	bcc.n	8003426 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	687e      	ldr	r6, [r7, #4]
 80034c2:	466d      	mov	r5, sp
 80034c4:	f106 0410 	add.w	r4, r6, #16
 80034c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80034d8:	1d33      	adds	r3, r6, #4
 80034da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034dc:	6838      	ldr	r0, [r7, #0]
 80034de:	f002 fa81 	bl	80059e4 <USB_DevInit>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e014      	b.n	800351e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	2b01      	cmp	r3, #1
 800350a:	d102      	bne.n	8003512 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f80a 	bl	8003526 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f002 fc23 	bl	8005d62 <USB_DevDisconnect>

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003526 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003526:	b480      	push	{r7}
 8003528:	b085      	sub	sp, #20
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003558:	f043 0303 	orr.w	r3, r3, #3
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
	...

08003570 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003574:	4b05      	ldr	r3, [pc, #20]	; (800358c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a04      	ldr	r2, [pc, #16]	; (800358c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800357a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357e:	6013      	str	r3, [r2, #0]
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40007000 	.word	0x40007000

08003590 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003594:	4b04      	ldr	r3, [pc, #16]	; (80035a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800359c:	4618      	mov	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40007000 	.word	0x40007000

080035ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ba:	d130      	bne.n	800361e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035bc:	4b23      	ldr	r3, [pc, #140]	; (800364c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c8:	d038      	beq.n	800363c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035ca:	4b20      	ldr	r3, [pc, #128]	; (800364c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035d2:	4a1e      	ldr	r2, [pc, #120]	; (800364c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035da:	4b1d      	ldr	r3, [pc, #116]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2232      	movs	r2, #50	; 0x32
 80035e0:	fb02 f303 	mul.w	r3, r2, r3
 80035e4:	4a1b      	ldr	r2, [pc, #108]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035e6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ea:	0c9b      	lsrs	r3, r3, #18
 80035ec:	3301      	adds	r3, #1
 80035ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035f0:	e002      	b.n	80035f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035f8:	4b14      	ldr	r3, [pc, #80]	; (800364c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003604:	d102      	bne.n	800360c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1f2      	bne.n	80035f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800360c:	4b0f      	ldr	r3, [pc, #60]	; (800364c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003618:	d110      	bne.n	800363c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e00f      	b.n	800363e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800361e:	4b0b      	ldr	r3, [pc, #44]	; (800364c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800362a:	d007      	beq.n	800363c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800362c:	4b07      	ldr	r3, [pc, #28]	; (800364c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003634:	4a05      	ldr	r2, [pc, #20]	; (800364c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800363a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40007000 	.word	0x40007000
 8003650:	20000130 	.word	0x20000130
 8003654:	431bde83 	.word	0x431bde83

08003658 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_PWREx_EnableVddUSB+0x1c>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	4a04      	ldr	r2, [pc, #16]	; (8003674 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003666:	6053      	str	r3, [r2, #4]
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40007000 	.word	0x40007000

08003678 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af02      	add	r7, sp, #8
 800367e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003680:	f7fe fbea 	bl	8001e58 <HAL_GetTick>
 8003684:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e063      	b.n	8003758 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10b      	bne.n	80036b4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7fd fd95 	bl	80011d4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80036aa:	f241 3188 	movw	r1, #5000	; 0x1388
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f858 	bl	8003764 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	021a      	lsls	r2, r3, #8
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	2120      	movs	r1, #32
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f850 	bl	8003780 <QSPI_WaitFlagStateUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80036e4:	7afb      	ldrb	r3, [r7, #11]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d131      	bne.n	800374e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80036f4:	f023 0310 	bic.w	r3, r3, #16
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6852      	ldr	r2, [r2, #4]
 80036fc:	0611      	lsls	r1, r2, #24
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68d2      	ldr	r2, [r2, #12]
 8003702:	4311      	orrs	r1, r2
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6812      	ldr	r2, [r2, #0]
 8003708:	430b      	orrs	r3, r1
 800370a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	4b13      	ldr	r3, [pc, #76]	; (8003760 <HAL_QSPI_Init+0xe8>)
 8003714:	4013      	ands	r3, r2
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6912      	ldr	r2, [r2, #16]
 800371a:	0411      	lsls	r1, r2, #16
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6952      	ldr	r2, [r2, #20]
 8003720:	4311      	orrs	r1, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6992      	ldr	r2, [r2, #24]
 8003726:	4311      	orrs	r1, r2
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6812      	ldr	r2, [r2, #0]
 800372c:	430b      	orrs	r3, r1
 800372e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003756:	7afb      	ldrb	r3, [r7, #11]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	ffe0f8fe 	.word	0xffe0f8fe

08003764 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	4613      	mov	r3, r2
 800378e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003790:	e01a      	b.n	80037c8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003798:	d016      	beq.n	80037c8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379a:	f7fe fb5d 	bl	8001e58 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d302      	bcc.n	80037b0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10b      	bne.n	80037c8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2204      	movs	r2, #4
 80037b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037bc:	f043 0201 	orr.w	r2, r3, #1
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e00e      	b.n	80037e6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	bf14      	ite	ne
 80037d6:	2301      	movne	r3, #1
 80037d8:	2300      	moveq	r3, #0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	461a      	mov	r2, r3
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d1d6      	bne.n	8003792 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e3ca      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003802:	4b97      	ldr	r3, [pc, #604]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800380c:	4b94      	ldr	r3, [pc, #592]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 80e4 	beq.w	80039ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d007      	beq.n	800383a <HAL_RCC_OscConfig+0x4a>
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	2b0c      	cmp	r3, #12
 800382e:	f040 808b 	bne.w	8003948 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b01      	cmp	r3, #1
 8003836:	f040 8087 	bne.w	8003948 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800383a:	4b89      	ldr	r3, [pc, #548]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <HAL_RCC_OscConfig+0x62>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e3a2      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1a      	ldr	r2, [r3, #32]
 8003856:	4b82      	ldr	r3, [pc, #520]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d004      	beq.n	800386c <HAL_RCC_OscConfig+0x7c>
 8003862:	4b7f      	ldr	r3, [pc, #508]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800386a:	e005      	b.n	8003878 <HAL_RCC_OscConfig+0x88>
 800386c:	4b7c      	ldr	r3, [pc, #496]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 800386e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003872:	091b      	lsrs	r3, r3, #4
 8003874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003878:	4293      	cmp	r3, r2
 800387a:	d223      	bcs.n	80038c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fd55 	bl	8004330 <RCC_SetFlashLatencyFromMSIRange>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e383      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003890:	4b73      	ldr	r3, [pc, #460]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a72      	ldr	r2, [pc, #456]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 8003896:	f043 0308 	orr.w	r3, r3, #8
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	4b70      	ldr	r3, [pc, #448]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	496d      	ldr	r1, [pc, #436]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038ae:	4b6c      	ldr	r3, [pc, #432]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	4968      	ldr	r1, [pc, #416]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	604b      	str	r3, [r1, #4]
 80038c2:	e025      	b.n	8003910 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038c4:	4b66      	ldr	r3, [pc, #408]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a65      	ldr	r2, [pc, #404]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 80038ca:	f043 0308 	orr.w	r3, r3, #8
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	4b63      	ldr	r3, [pc, #396]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	4960      	ldr	r1, [pc, #384]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038e2:	4b5f      	ldr	r3, [pc, #380]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	495b      	ldr	r1, [pc, #364]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d109      	bne.n	8003910 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	4618      	mov	r0, r3
 8003902:	f000 fd15 	bl	8004330 <RCC_SetFlashLatencyFromMSIRange>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e343      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003910:	f000 fc4a 	bl	80041a8 <HAL_RCC_GetSysClockFreq>
 8003914:	4602      	mov	r2, r0
 8003916:	4b52      	ldr	r3, [pc, #328]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	091b      	lsrs	r3, r3, #4
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	4950      	ldr	r1, [pc, #320]	; (8003a64 <HAL_RCC_OscConfig+0x274>)
 8003922:	5ccb      	ldrb	r3, [r1, r3]
 8003924:	f003 031f 	and.w	r3, r3, #31
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
 800392c:	4a4e      	ldr	r2, [pc, #312]	; (8003a68 <HAL_RCC_OscConfig+0x278>)
 800392e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003930:	4b4e      	ldr	r3, [pc, #312]	; (8003a6c <HAL_RCC_OscConfig+0x27c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe fa3f 	bl	8001db8 <HAL_InitTick>
 800393a:	4603      	mov	r3, r0
 800393c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d052      	beq.n	80039ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	e327      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d032      	beq.n	80039b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003950:	4b43      	ldr	r3, [pc, #268]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a42      	ldr	r2, [pc, #264]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800395c:	f7fe fa7c 	bl	8001e58 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003964:	f7fe fa78 	bl	8001e58 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e310      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003976:	4b3a      	ldr	r3, [pc, #232]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003982:	4b37      	ldr	r3, [pc, #220]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a36      	ldr	r2, [pc, #216]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 8003988:	f043 0308 	orr.w	r3, r3, #8
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	4b34      	ldr	r3, [pc, #208]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	4931      	ldr	r1, [pc, #196]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 800399c:	4313      	orrs	r3, r2
 800399e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039a0:	4b2f      	ldr	r3, [pc, #188]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	021b      	lsls	r3, r3, #8
 80039ae:	492c      	ldr	r1, [pc, #176]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	604b      	str	r3, [r1, #4]
 80039b4:	e01a      	b.n	80039ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039b6:	4b2a      	ldr	r3, [pc, #168]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a29      	ldr	r2, [pc, #164]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 80039bc:	f023 0301 	bic.w	r3, r3, #1
 80039c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039c2:	f7fe fa49 	bl	8001e58 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039ca:	f7fe fa45 	bl	8001e58 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e2dd      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039dc:	4b20      	ldr	r3, [pc, #128]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f0      	bne.n	80039ca <HAL_RCC_OscConfig+0x1da>
 80039e8:	e000      	b.n	80039ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d074      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d005      	beq.n	8003a0a <HAL_RCC_OscConfig+0x21a>
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	2b0c      	cmp	r3, #12
 8003a02:	d10e      	bne.n	8003a22 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d10b      	bne.n	8003a22 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a0a:	4b15      	ldr	r3, [pc, #84]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d064      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x2f0>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d160      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e2ba      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a2a:	d106      	bne.n	8003a3a <HAL_RCC_OscConfig+0x24a>
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a0b      	ldr	r2, [pc, #44]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 8003a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	e026      	b.n	8003a88 <HAL_RCC_OscConfig+0x298>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a42:	d115      	bne.n	8003a70 <HAL_RCC_OscConfig+0x280>
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a05      	ldr	r2, [pc, #20]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 8003a4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	4b03      	ldr	r3, [pc, #12]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a02      	ldr	r2, [pc, #8]	; (8003a60 <HAL_RCC_OscConfig+0x270>)
 8003a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	e014      	b.n	8003a88 <HAL_RCC_OscConfig+0x298>
 8003a5e:	bf00      	nop
 8003a60:	40021000 	.word	0x40021000
 8003a64:	0800683c 	.word	0x0800683c
 8003a68:	20000130 	.word	0x20000130
 8003a6c:	20000178 	.word	0x20000178
 8003a70:	4ba0      	ldr	r3, [pc, #640]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a9f      	ldr	r2, [pc, #636]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	4b9d      	ldr	r3, [pc, #628]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a9c      	ldr	r2, [pc, #624]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d013      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fe f9e2 	bl	8001e58 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a98:	f7fe f9de 	bl	8001e58 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e276      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aaa:	4b92      	ldr	r3, [pc, #584]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0x2a8>
 8003ab6:	e014      	b.n	8003ae2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fe f9ce 	bl	8001e58 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac0:	f7fe f9ca 	bl	8001e58 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	; 0x64
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e262      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ad2:	4b88      	ldr	r3, [pc, #544]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x2d0>
 8003ade:	e000      	b.n	8003ae2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d060      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d005      	beq.n	8003b00 <HAL_RCC_OscConfig+0x310>
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	2b0c      	cmp	r3, #12
 8003af8:	d119      	bne.n	8003b2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d116      	bne.n	8003b2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b00:	4b7c      	ldr	r3, [pc, #496]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_RCC_OscConfig+0x328>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e23f      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b18:	4b76      	ldr	r3, [pc, #472]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	061b      	lsls	r3, r3, #24
 8003b26:	4973      	ldr	r1, [pc, #460]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b2c:	e040      	b.n	8003bb0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d023      	beq.n	8003b7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b36:	4b6f      	ldr	r3, [pc, #444]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a6e      	ldr	r2, [pc, #440]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b42:	f7fe f989 	bl	8001e58 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b4a:	f7fe f985 	bl	8001e58 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e21d      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b5c:	4b65      	ldr	r3, [pc, #404]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b68:	4b62      	ldr	r3, [pc, #392]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	061b      	lsls	r3, r3, #24
 8003b76:	495f      	ldr	r1, [pc, #380]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	604b      	str	r3, [r1, #4]
 8003b7c:	e018      	b.n	8003bb0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b7e:	4b5d      	ldr	r3, [pc, #372]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a5c      	ldr	r2, [pc, #368]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8a:	f7fe f965 	bl	8001e58 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b92:	f7fe f961 	bl	8001e58 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e1f9      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ba4:	4b53      	ldr	r3, [pc, #332]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f0      	bne.n	8003b92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d03c      	beq.n	8003c36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01c      	beq.n	8003bfe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc4:	4b4b      	ldr	r3, [pc, #300]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bca:	4a4a      	ldr	r2, [pc, #296]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd4:	f7fe f940 	bl	8001e58 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bdc:	f7fe f93c 	bl	8001e58 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e1d4      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bee:	4b41      	ldr	r3, [pc, #260]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ef      	beq.n	8003bdc <HAL_RCC_OscConfig+0x3ec>
 8003bfc:	e01b      	b.n	8003c36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bfe:	4b3d      	ldr	r3, [pc, #244]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c04:	4a3b      	ldr	r2, [pc, #236]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0e:	f7fe f923 	bl	8001e58 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c16:	f7fe f91f 	bl	8001e58 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e1b7      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c28:	4b32      	ldr	r3, [pc, #200]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1ef      	bne.n	8003c16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 80a6 	beq.w	8003d90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c44:	2300      	movs	r3, #0
 8003c46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c48:	4b2a      	ldr	r3, [pc, #168]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10d      	bne.n	8003c70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c54:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c58:	4a26      	ldr	r2, [pc, #152]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c60:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c70:	4b21      	ldr	r3, [pc, #132]	; (8003cf8 <HAL_RCC_OscConfig+0x508>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d118      	bne.n	8003cae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c7c:	4b1e      	ldr	r3, [pc, #120]	; (8003cf8 <HAL_RCC_OscConfig+0x508>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a1d      	ldr	r2, [pc, #116]	; (8003cf8 <HAL_RCC_OscConfig+0x508>)
 8003c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c88:	f7fe f8e6 	bl	8001e58 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c90:	f7fe f8e2 	bl	8001e58 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e17a      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ca2:	4b15      	ldr	r3, [pc, #84]	; (8003cf8 <HAL_RCC_OscConfig+0x508>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d108      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x4d8>
 8003cb6:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbc:	4a0d      	ldr	r2, [pc, #52]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cc6:	e029      	b.n	8003d1c <HAL_RCC_OscConfig+0x52c>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b05      	cmp	r3, #5
 8003cce:	d115      	bne.n	8003cfc <HAL_RCC_OscConfig+0x50c>
 8003cd0:	4b08      	ldr	r3, [pc, #32]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd6:	4a07      	ldr	r2, [pc, #28]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003cd8:	f043 0304 	orr.w	r3, r3, #4
 8003cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ce0:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce6:	4a03      	ldr	r2, [pc, #12]	; (8003cf4 <HAL_RCC_OscConfig+0x504>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cf0:	e014      	b.n	8003d1c <HAL_RCC_OscConfig+0x52c>
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	40007000 	.word	0x40007000
 8003cfc:	4b9c      	ldr	r3, [pc, #624]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d02:	4a9b      	ldr	r2, [pc, #620]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003d04:	f023 0301 	bic.w	r3, r3, #1
 8003d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d0c:	4b98      	ldr	r3, [pc, #608]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	4a97      	ldr	r2, [pc, #604]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003d14:	f023 0304 	bic.w	r3, r3, #4
 8003d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d016      	beq.n	8003d52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d24:	f7fe f898 	bl	8001e58 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d2a:	e00a      	b.n	8003d42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d2c:	f7fe f894 	bl	8001e58 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e12a      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d42:	4b8b      	ldr	r3, [pc, #556]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0ed      	beq.n	8003d2c <HAL_RCC_OscConfig+0x53c>
 8003d50:	e015      	b.n	8003d7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d52:	f7fe f881 	bl	8001e58 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d58:	e00a      	b.n	8003d70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5a:	f7fe f87d 	bl	8001e58 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e113      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d70:	4b7f      	ldr	r3, [pc, #508]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1ed      	bne.n	8003d5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d7e:	7ffb      	ldrb	r3, [r7, #31]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d105      	bne.n	8003d90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d84:	4b7a      	ldr	r3, [pc, #488]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d88:	4a79      	ldr	r2, [pc, #484]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80fe 	beq.w	8003f96 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	f040 80d0 	bne.w	8003f44 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003da4:	4b72      	ldr	r3, [pc, #456]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f003 0203 	and.w	r2, r3, #3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d130      	bne.n	8003e1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d127      	bne.n	8003e1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d11f      	bne.n	8003e1a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003de4:	2a07      	cmp	r2, #7
 8003de6:	bf14      	ite	ne
 8003de8:	2201      	movne	r2, #1
 8003dea:	2200      	moveq	r2, #0
 8003dec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d113      	bne.n	8003e1a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfc:	085b      	lsrs	r3, r3, #1
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d109      	bne.n	8003e1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	085b      	lsrs	r3, r3, #1
 8003e12:	3b01      	subs	r3, #1
 8003e14:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d06e      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2b0c      	cmp	r3, #12
 8003e1e:	d069      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e20:	4b53      	ldr	r3, [pc, #332]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d105      	bne.n	8003e38 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e2c:	4b50      	ldr	r3, [pc, #320]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0ad      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e3c:	4b4c      	ldr	r3, [pc, #304]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a4b      	ldr	r2, [pc, #300]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e46:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e48:	f7fe f806 	bl	8001e58 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e50:	f7fe f802 	bl	8001e58 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e09a      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e62:	4b43      	ldr	r3, [pc, #268]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e6e:	4b40      	ldr	r3, [pc, #256]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	4b40      	ldr	r3, [pc, #256]	; (8003f74 <HAL_RCC_OscConfig+0x784>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e7e:	3a01      	subs	r2, #1
 8003e80:	0112      	lsls	r2, r2, #4
 8003e82:	4311      	orrs	r1, r2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e88:	0212      	lsls	r2, r2, #8
 8003e8a:	4311      	orrs	r1, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e90:	0852      	lsrs	r2, r2, #1
 8003e92:	3a01      	subs	r2, #1
 8003e94:	0552      	lsls	r2, r2, #21
 8003e96:	4311      	orrs	r1, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e9c:	0852      	lsrs	r2, r2, #1
 8003e9e:	3a01      	subs	r2, #1
 8003ea0:	0652      	lsls	r2, r2, #25
 8003ea2:	4311      	orrs	r1, r2
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ea8:	0912      	lsrs	r2, r2, #4
 8003eaa:	0452      	lsls	r2, r2, #17
 8003eac:	430a      	orrs	r2, r1
 8003eae:	4930      	ldr	r1, [pc, #192]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003eb4:	4b2e      	ldr	r3, [pc, #184]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a2d      	ldr	r2, [pc, #180]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ebe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ec0:	4b2b      	ldr	r3, [pc, #172]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4a2a      	ldr	r2, [pc, #168]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ecc:	f7fd ffc4 	bl	8001e58 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed4:	f7fd ffc0 	bl	8001e58 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e058      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee6:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ef2:	e050      	b.n	8003f96 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e04f      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ef8:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d148      	bne.n	8003f96 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f04:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a19      	ldr	r2, [pc, #100]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f10:	4b17      	ldr	r3, [pc, #92]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4a16      	ldr	r2, [pc, #88]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f1c:	f7fd ff9c 	bl	8001e58 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f24:	f7fd ff98 	bl	8001e58 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e030      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f36:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCC_OscConfig+0x734>
 8003f42:	e028      	b.n	8003f96 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b0c      	cmp	r3, #12
 8003f48:	d023      	beq.n	8003f92 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4a:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a08      	ldr	r2, [pc, #32]	; (8003f70 <HAL_RCC_OscConfig+0x780>)
 8003f50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f56:	f7fd ff7f 	bl	8001e58 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f5c:	e00c      	b.n	8003f78 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5e:	f7fd ff7b 	bl	8001e58 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d905      	bls.n	8003f78 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e013      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
 8003f70:	40021000 	.word	0x40021000
 8003f74:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f78:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <HAL_RCC_OscConfig+0x7b0>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1ec      	bne.n	8003f5e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_RCC_OscConfig+0x7b0>)
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	4905      	ldr	r1, [pc, #20]	; (8003fa0 <HAL_RCC_OscConfig+0x7b0>)
 8003f8a:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <HAL_RCC_OscConfig+0x7b4>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	60cb      	str	r3, [r1, #12]
 8003f90:	e001      	b.n	8003f96 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	feeefffc 	.word	0xfeeefffc

08003fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0e7      	b.n	800418c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fbc:	4b75      	ldr	r3, [pc, #468]	; (8004194 <HAL_RCC_ClockConfig+0x1ec>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d910      	bls.n	8003fec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fca:	4b72      	ldr	r3, [pc, #456]	; (8004194 <HAL_RCC_ClockConfig+0x1ec>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 0207 	bic.w	r2, r3, #7
 8003fd2:	4970      	ldr	r1, [pc, #448]	; (8004194 <HAL_RCC_ClockConfig+0x1ec>)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fda:	4b6e      	ldr	r3, [pc, #440]	; (8004194 <HAL_RCC_ClockConfig+0x1ec>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0cf      	b.n	800418c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d010      	beq.n	800401a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	4b66      	ldr	r3, [pc, #408]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004004:	429a      	cmp	r2, r3
 8004006:	d908      	bls.n	800401a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004008:	4b63      	ldr	r3, [pc, #396]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4960      	ldr	r1, [pc, #384]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 8004016:	4313      	orrs	r3, r2
 8004018:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d04c      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b03      	cmp	r3, #3
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800402e:	4b5a      	ldr	r3, [pc, #360]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d121      	bne.n	800407e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e0a6      	b.n	800418c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d107      	bne.n	8004056 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004046:	4b54      	ldr	r3, [pc, #336]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d115      	bne.n	800407e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e09a      	b.n	800418c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d107      	bne.n	800406e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800405e:	4b4e      	ldr	r3, [pc, #312]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d109      	bne.n	800407e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e08e      	b.n	800418c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800406e:	4b4a      	ldr	r3, [pc, #296]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e086      	b.n	800418c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800407e:	4b46      	ldr	r3, [pc, #280]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f023 0203 	bic.w	r2, r3, #3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	4943      	ldr	r1, [pc, #268]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 800408c:	4313      	orrs	r3, r2
 800408e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004090:	f7fd fee2 	bl	8001e58 <HAL_GetTick>
 8004094:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004096:	e00a      	b.n	80040ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004098:	f7fd fede 	bl	8001e58 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e06e      	b.n	800418c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ae:	4b3a      	ldr	r3, [pc, #232]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 020c 	and.w	r2, r3, #12
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	429a      	cmp	r2, r3
 80040be:	d1eb      	bne.n	8004098 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d010      	beq.n	80040ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	4b31      	ldr	r3, [pc, #196]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d8:	429a      	cmp	r2, r3
 80040da:	d208      	bcs.n	80040ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040dc:	4b2e      	ldr	r3, [pc, #184]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	492b      	ldr	r1, [pc, #172]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040ee:	4b29      	ldr	r3, [pc, #164]	; (8004194 <HAL_RCC_ClockConfig+0x1ec>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d210      	bcs.n	800411e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fc:	4b25      	ldr	r3, [pc, #148]	; (8004194 <HAL_RCC_ClockConfig+0x1ec>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f023 0207 	bic.w	r2, r3, #7
 8004104:	4923      	ldr	r1, [pc, #140]	; (8004194 <HAL_RCC_ClockConfig+0x1ec>)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	4313      	orrs	r3, r2
 800410a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800410c:	4b21      	ldr	r3, [pc, #132]	; (8004194 <HAL_RCC_ClockConfig+0x1ec>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d001      	beq.n	800411e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e036      	b.n	800418c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b00      	cmp	r3, #0
 8004128:	d008      	beq.n	800413c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800412a:	4b1b      	ldr	r3, [pc, #108]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	4918      	ldr	r1, [pc, #96]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 8004138:	4313      	orrs	r3, r2
 800413a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d009      	beq.n	800415c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004148:	4b13      	ldr	r3, [pc, #76]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4910      	ldr	r1, [pc, #64]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 8004158:	4313      	orrs	r3, r2
 800415a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800415c:	f000 f824 	bl	80041a8 <HAL_RCC_GetSysClockFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b0d      	ldr	r3, [pc, #52]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	091b      	lsrs	r3, r3, #4
 8004168:	f003 030f 	and.w	r3, r3, #15
 800416c:	490b      	ldr	r1, [pc, #44]	; (800419c <HAL_RCC_ClockConfig+0x1f4>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
 8004178:	4a09      	ldr	r2, [pc, #36]	; (80041a0 <HAL_RCC_ClockConfig+0x1f8>)
 800417a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800417c:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <HAL_RCC_ClockConfig+0x1fc>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f7fd fe19 	bl	8001db8 <HAL_InitTick>
 8004186:	4603      	mov	r3, r0
 8004188:	72fb      	strb	r3, [r7, #11]

  return status;
 800418a:	7afb      	ldrb	r3, [r7, #11]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40022000 	.word	0x40022000
 8004198:	40021000 	.word	0x40021000
 800419c:	0800683c 	.word	0x0800683c
 80041a0:	20000130 	.word	0x20000130
 80041a4:	20000178 	.word	0x20000178

080041a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b089      	sub	sp, #36	; 0x24
 80041ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	2300      	movs	r3, #0
 80041b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041b6:	4b3e      	ldr	r3, [pc, #248]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041c0:	4b3b      	ldr	r3, [pc, #236]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <HAL_RCC_GetSysClockFreq+0x34>
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	2b0c      	cmp	r3, #12
 80041d4:	d121      	bne.n	800421a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d11e      	bne.n	800421a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041dc:	4b34      	ldr	r3, [pc, #208]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d107      	bne.n	80041f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041e8:	4b31      	ldr	r3, [pc, #196]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ee:	0a1b      	lsrs	r3, r3, #8
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	61fb      	str	r3, [r7, #28]
 80041f6:	e005      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041f8:	4b2d      	ldr	r3, [pc, #180]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	091b      	lsrs	r3, r3, #4
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004204:	4a2b      	ldr	r2, [pc, #172]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800420c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10d      	bne.n	8004230 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004218:	e00a      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	2b04      	cmp	r3, #4
 800421e:	d102      	bne.n	8004226 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004220:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004222:	61bb      	str	r3, [r7, #24]
 8004224:	e004      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b08      	cmp	r3, #8
 800422a:	d101      	bne.n	8004230 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800422c:	4b23      	ldr	r3, [pc, #140]	; (80042bc <HAL_RCC_GetSysClockFreq+0x114>)
 800422e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2b0c      	cmp	r3, #12
 8004234:	d134      	bne.n	80042a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004236:	4b1e      	ldr	r3, [pc, #120]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d003      	beq.n	800424e <HAL_RCC_GetSysClockFreq+0xa6>
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b03      	cmp	r3, #3
 800424a:	d003      	beq.n	8004254 <HAL_RCC_GetSysClockFreq+0xac>
 800424c:	e005      	b.n	800425a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800424e:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004250:	617b      	str	r3, [r7, #20]
      break;
 8004252:	e005      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004254:	4b19      	ldr	r3, [pc, #100]	; (80042bc <HAL_RCC_GetSysClockFreq+0x114>)
 8004256:	617b      	str	r3, [r7, #20]
      break;
 8004258:	e002      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	617b      	str	r3, [r7, #20]
      break;
 800425e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004260:	4b13      	ldr	r3, [pc, #76]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	091b      	lsrs	r3, r3, #4
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	3301      	adds	r3, #1
 800426c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800426e:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	0a1b      	lsrs	r3, r3, #8
 8004274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	fb03 f202 	mul.w	r2, r3, r2
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	fbb2 f3f3 	udiv	r3, r2, r3
 8004284:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004286:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	0e5b      	lsrs	r3, r3, #25
 800428c:	f003 0303 	and.w	r3, r3, #3
 8004290:	3301      	adds	r3, #1
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	fbb2 f3f3 	udiv	r3, r2, r3
 800429e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042a0:	69bb      	ldr	r3, [r7, #24]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3724      	adds	r7, #36	; 0x24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40021000 	.word	0x40021000
 80042b4:	08006854 	.word	0x08006854
 80042b8:	00f42400 	.word	0x00f42400
 80042bc:	007a1200 	.word	0x007a1200

080042c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042c4:	4b03      	ldr	r3, [pc, #12]	; (80042d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042c6:	681b      	ldr	r3, [r3, #0]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	20000130 	.word	0x20000130

080042d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042dc:	f7ff fff0 	bl	80042c0 <HAL_RCC_GetHCLKFreq>
 80042e0:	4602      	mov	r2, r0
 80042e2:	4b06      	ldr	r3, [pc, #24]	; (80042fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	0a1b      	lsrs	r3, r3, #8
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	4904      	ldr	r1, [pc, #16]	; (8004300 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042ee:	5ccb      	ldrb	r3, [r1, r3]
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40021000 	.word	0x40021000
 8004300:	0800684c 	.word	0x0800684c

08004304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004308:	f7ff ffda 	bl	80042c0 <HAL_RCC_GetHCLKFreq>
 800430c:	4602      	mov	r2, r0
 800430e:	4b06      	ldr	r3, [pc, #24]	; (8004328 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	0adb      	lsrs	r3, r3, #11
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	4904      	ldr	r1, [pc, #16]	; (800432c <HAL_RCC_GetPCLK2Freq+0x28>)
 800431a:	5ccb      	ldrb	r3, [r1, r3]
 800431c:	f003 031f 	and.w	r3, r3, #31
 8004320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004324:	4618      	mov	r0, r3
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40021000 	.word	0x40021000
 800432c:	0800684c 	.word	0x0800684c

08004330 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004338:	2300      	movs	r3, #0
 800433a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800433c:	4b2a      	ldr	r3, [pc, #168]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004348:	f7ff f922 	bl	8003590 <HAL_PWREx_GetVoltageRange>
 800434c:	6178      	str	r0, [r7, #20]
 800434e:	e014      	b.n	800437a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004350:	4b25      	ldr	r3, [pc, #148]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004354:	4a24      	ldr	r2, [pc, #144]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800435a:	6593      	str	r3, [r2, #88]	; 0x58
 800435c:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800435e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004368:	f7ff f912 	bl	8003590 <HAL_PWREx_GetVoltageRange>
 800436c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800436e:	4b1e      	ldr	r3, [pc, #120]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004372:	4a1d      	ldr	r2, [pc, #116]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004378:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004380:	d10b      	bne.n	800439a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b80      	cmp	r3, #128	; 0x80
 8004386:	d919      	bls.n	80043bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2ba0      	cmp	r3, #160	; 0xa0
 800438c:	d902      	bls.n	8004394 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800438e:	2302      	movs	r3, #2
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	e013      	b.n	80043bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004394:	2301      	movs	r3, #1
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	e010      	b.n	80043bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b80      	cmp	r3, #128	; 0x80
 800439e:	d902      	bls.n	80043a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80043a0:	2303      	movs	r3, #3
 80043a2:	613b      	str	r3, [r7, #16]
 80043a4:	e00a      	b.n	80043bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b80      	cmp	r3, #128	; 0x80
 80043aa:	d102      	bne.n	80043b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043ac:	2302      	movs	r3, #2
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	e004      	b.n	80043bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b70      	cmp	r3, #112	; 0x70
 80043b6:	d101      	bne.n	80043bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043b8:	2301      	movs	r3, #1
 80043ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f023 0207 	bic.w	r2, r3, #7
 80043c4:	4909      	ldr	r1, [pc, #36]	; (80043ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043cc:	4b07      	ldr	r3, [pc, #28]	; (80043ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d001      	beq.n	80043de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40021000 	.word	0x40021000
 80043ec:	40022000 	.word	0x40022000

080043f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043f8:	2300      	movs	r3, #0
 80043fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043fc:	2300      	movs	r3, #0
 80043fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004408:	2b00      	cmp	r3, #0
 800440a:	d041      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004410:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004414:	d02a      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004416:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800441a:	d824      	bhi.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800441c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004420:	d008      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004422:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004426:	d81e      	bhi.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800442c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004430:	d010      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004432:	e018      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004434:	4b86      	ldr	r3, [pc, #536]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4a85      	ldr	r2, [pc, #532]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800443a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004440:	e015      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3304      	adds	r3, #4
 8004446:	2100      	movs	r1, #0
 8004448:	4618      	mov	r0, r3
 800444a:	f000 facb 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 800444e:	4603      	mov	r3, r0
 8004450:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004452:	e00c      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3320      	adds	r3, #32
 8004458:	2100      	movs	r1, #0
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fbb6 	bl	8004bcc <RCCEx_PLLSAI2_Config>
 8004460:	4603      	mov	r3, r0
 8004462:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004464:	e003      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	74fb      	strb	r3, [r7, #19]
      break;
 800446a:	e000      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800446c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800446e:	7cfb      	ldrb	r3, [r7, #19]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10b      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004474:	4b76      	ldr	r3, [pc, #472]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004482:	4973      	ldr	r1, [pc, #460]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800448a:	e001      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800448c:	7cfb      	ldrb	r3, [r7, #19]
 800448e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d041      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044a4:	d02a      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80044a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044aa:	d824      	bhi.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044b0:	d008      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044b6:	d81e      	bhi.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00a      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80044bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044c0:	d010      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044c2:	e018      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044c4:	4b62      	ldr	r3, [pc, #392]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	4a61      	ldr	r2, [pc, #388]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044d0:	e015      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3304      	adds	r3, #4
 80044d6:	2100      	movs	r1, #0
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fa83 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 80044de:	4603      	mov	r3, r0
 80044e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044e2:	e00c      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3320      	adds	r3, #32
 80044e8:	2100      	movs	r1, #0
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fb6e 	bl	8004bcc <RCCEx_PLLSAI2_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044f4:	e003      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	74fb      	strb	r3, [r7, #19]
      break;
 80044fa:	e000      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80044fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044fe:	7cfb      	ldrb	r3, [r7, #19]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10b      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004504:	4b52      	ldr	r3, [pc, #328]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004512:	494f      	ldr	r1, [pc, #316]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800451a:	e001      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451c:	7cfb      	ldrb	r3, [r7, #19]
 800451e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 80a0 	beq.w	800466e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800452e:	2300      	movs	r3, #0
 8004530:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004532:	4b47      	ldr	r3, [pc, #284]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004542:	2300      	movs	r3, #0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00d      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004548:	4b41      	ldr	r3, [pc, #260]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800454a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454c:	4a40      	ldr	r2, [pc, #256]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800454e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004552:	6593      	str	r3, [r2, #88]	; 0x58
 8004554:	4b3e      	ldr	r3, [pc, #248]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455c:	60bb      	str	r3, [r7, #8]
 800455e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004560:	2301      	movs	r3, #1
 8004562:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004564:	4b3b      	ldr	r3, [pc, #236]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a3a      	ldr	r2, [pc, #232]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800456a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800456e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004570:	f7fd fc72 	bl	8001e58 <HAL_GetTick>
 8004574:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004576:	e009      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004578:	f7fd fc6e 	bl	8001e58 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d902      	bls.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	74fb      	strb	r3, [r7, #19]
        break;
 800458a:	e005      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800458c:	4b31      	ldr	r3, [pc, #196]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0ef      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004598:	7cfb      	ldrb	r3, [r7, #19]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d15c      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800459e:	4b2c      	ldr	r3, [pc, #176]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01f      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d019      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045bc:	4b24      	ldr	r3, [pc, #144]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045c8:	4b21      	ldr	r3, [pc, #132]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ce:	4a20      	ldr	r2, [pc, #128]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045d8:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045de:	4a1c      	ldr	r2, [pc, #112]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045e8:	4a19      	ldr	r2, [pc, #100]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d016      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fa:	f7fd fc2d 	bl	8001e58 <HAL_GetTick>
 80045fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004600:	e00b      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004602:	f7fd fc29 	bl	8001e58 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004610:	4293      	cmp	r3, r2
 8004612:	d902      	bls.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	74fb      	strb	r3, [r7, #19]
            break;
 8004618:	e006      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800461a:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0ec      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004628:	7cfb      	ldrb	r3, [r7, #19]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10c      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800462e:	4b08      	ldr	r3, [pc, #32]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004634:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800463e:	4904      	ldr	r1, [pc, #16]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004646:	e009      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004648:	7cfb      	ldrb	r3, [r7, #19]
 800464a:	74bb      	strb	r3, [r7, #18]
 800464c:	e006      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800464e:	bf00      	nop
 8004650:	40021000 	.word	0x40021000
 8004654:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004658:	7cfb      	ldrb	r3, [r7, #19]
 800465a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800465c:	7c7b      	ldrb	r3, [r7, #17]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d105      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004662:	4b9e      	ldr	r3, [pc, #632]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004666:	4a9d      	ldr	r2, [pc, #628]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800466c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800467a:	4b98      	ldr	r3, [pc, #608]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004680:	f023 0203 	bic.w	r2, r3, #3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	4994      	ldr	r1, [pc, #592]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800469c:	4b8f      	ldr	r3, [pc, #572]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a2:	f023 020c 	bic.w	r2, r3, #12
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	498c      	ldr	r1, [pc, #560]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046be:	4b87      	ldr	r3, [pc, #540]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	4983      	ldr	r1, [pc, #524]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046e0:	4b7e      	ldr	r3, [pc, #504]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	497b      	ldr	r1, [pc, #492]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004702:	4b76      	ldr	r3, [pc, #472]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004710:	4972      	ldr	r1, [pc, #456]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004724:	4b6d      	ldr	r3, [pc, #436]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004732:	496a      	ldr	r1, [pc, #424]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004746:	4b65      	ldr	r3, [pc, #404]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004754:	4961      	ldr	r1, [pc, #388]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004768:	4b5c      	ldr	r3, [pc, #368]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004776:	4959      	ldr	r1, [pc, #356]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800478a:	4b54      	ldr	r3, [pc, #336]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004790:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004798:	4950      	ldr	r1, [pc, #320]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047ac:	4b4b      	ldr	r3, [pc, #300]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ba:	4948      	ldr	r1, [pc, #288]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047ce:	4b43      	ldr	r3, [pc, #268]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047dc:	493f      	ldr	r1, [pc, #252]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d028      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047f0:	4b3a      	ldr	r3, [pc, #232]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047fe:	4937      	ldr	r1, [pc, #220]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800480a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800480e:	d106      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004810:	4b32      	ldr	r3, [pc, #200]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4a31      	ldr	r2, [pc, #196]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800481a:	60d3      	str	r3, [r2, #12]
 800481c:	e011      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004822:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004826:	d10c      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3304      	adds	r3, #4
 800482c:	2101      	movs	r1, #1
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f8d8 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 8004834:	4603      	mov	r3, r0
 8004836:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004838:	7cfb      	ldrb	r3, [r7, #19]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800483e:	7cfb      	ldrb	r3, [r7, #19]
 8004840:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d028      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800484e:	4b23      	ldr	r3, [pc, #140]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004854:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485c:	491f      	ldr	r1, [pc, #124]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004868:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800486c:	d106      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800486e:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	4a1a      	ldr	r2, [pc, #104]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004878:	60d3      	str	r3, [r2, #12]
 800487a:	e011      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004880:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004884:	d10c      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3304      	adds	r3, #4
 800488a:	2101      	movs	r1, #1
 800488c:	4618      	mov	r0, r3
 800488e:	f000 f8a9 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004896:	7cfb      	ldrb	r3, [r7, #19]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800489c:	7cfb      	ldrb	r3, [r7, #19]
 800489e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d02b      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ba:	4908      	ldr	r1, [pc, #32]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048ca:	d109      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048cc:	4b03      	ldr	r3, [pc, #12]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4a02      	ldr	r2, [pc, #8]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048d6:	60d3      	str	r3, [r2, #12]
 80048d8:	e014      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80048da:	bf00      	nop
 80048dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048e8:	d10c      	bne.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3304      	adds	r3, #4
 80048ee:	2101      	movs	r1, #1
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 f877 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 80048f6:	4603      	mov	r3, r0
 80048f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048fa:	7cfb      	ldrb	r3, [r7, #19]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004900:	7cfb      	ldrb	r3, [r7, #19]
 8004902:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d02f      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004910:	4b2b      	ldr	r3, [pc, #172]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800491e:	4928      	ldr	r1, [pc, #160]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800492a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800492e:	d10d      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3304      	adds	r3, #4
 8004934:	2102      	movs	r1, #2
 8004936:	4618      	mov	r0, r3
 8004938:	f000 f854 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 800493c:	4603      	mov	r3, r0
 800493e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004940:	7cfb      	ldrb	r3, [r7, #19]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d014      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004946:	7cfb      	ldrb	r3, [r7, #19]
 8004948:	74bb      	strb	r3, [r7, #18]
 800494a:	e011      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004954:	d10c      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3320      	adds	r3, #32
 800495a:	2102      	movs	r1, #2
 800495c:	4618      	mov	r0, r3
 800495e:	f000 f935 	bl	8004bcc <RCCEx_PLLSAI2_Config>
 8004962:	4603      	mov	r3, r0
 8004964:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004966:	7cfb      	ldrb	r3, [r7, #19]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800496c:	7cfb      	ldrb	r3, [r7, #19]
 800496e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800497c:	4b10      	ldr	r3, [pc, #64]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800498a:	490d      	ldr	r1, [pc, #52]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00b      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800499e:	4b08      	ldr	r3, [pc, #32]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ae:	4904      	ldr	r1, [pc, #16]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40021000 	.word	0x40021000

080049c4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80049c8:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a04      	ldr	r2, [pc, #16]	; (80049e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80049ce:	f043 0304 	orr.w	r3, r3, #4
 80049d2:	6013      	str	r3, [r2, #0]
}
 80049d4:	bf00      	nop
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40021000 	.word	0x40021000

080049e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049f2:	4b75      	ldr	r3, [pc, #468]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d018      	beq.n	8004a30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049fe:	4b72      	ldr	r3, [pc, #456]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f003 0203 	and.w	r2, r3, #3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d10d      	bne.n	8004a2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
       ||
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d009      	beq.n	8004a2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a16:	4b6c      	ldr	r3, [pc, #432]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	091b      	lsrs	r3, r3, #4
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
       ||
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d047      	beq.n	8004aba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	73fb      	strb	r3, [r7, #15]
 8004a2e:	e044      	b.n	8004aba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d018      	beq.n	8004a6a <RCCEx_PLLSAI1_Config+0x86>
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d825      	bhi.n	8004a88 <RCCEx_PLLSAI1_Config+0xa4>
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d002      	beq.n	8004a46 <RCCEx_PLLSAI1_Config+0x62>
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d009      	beq.n	8004a58 <RCCEx_PLLSAI1_Config+0x74>
 8004a44:	e020      	b.n	8004a88 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a46:	4b60      	ldr	r3, [pc, #384]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d11d      	bne.n	8004a8e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a56:	e01a      	b.n	8004a8e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a58:	4b5b      	ldr	r3, [pc, #364]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d116      	bne.n	8004a92 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a68:	e013      	b.n	8004a92 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a6a:	4b57      	ldr	r3, [pc, #348]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10f      	bne.n	8004a96 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a76:	4b54      	ldr	r3, [pc, #336]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d109      	bne.n	8004a96 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a86:	e006      	b.n	8004a96 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a8c:	e004      	b.n	8004a98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a8e:	bf00      	nop
 8004a90:	e002      	b.n	8004a98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a92:	bf00      	nop
 8004a94:	e000      	b.n	8004a98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a96:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10d      	bne.n	8004aba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a9e:	4b4a      	ldr	r3, [pc, #296]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6819      	ldr	r1, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	430b      	orrs	r3, r1
 8004ab4:	4944      	ldr	r1, [pc, #272]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d17d      	bne.n	8004bbc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ac0:	4b41      	ldr	r3, [pc, #260]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a40      	ldr	r2, [pc, #256]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004aca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004acc:	f7fd f9c4 	bl	8001e58 <HAL_GetTick>
 8004ad0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ad2:	e009      	b.n	8004ae8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ad4:	f7fd f9c0 	bl	8001e58 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d902      	bls.n	8004ae8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ae6:	e005      	b.n	8004af4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ae8:	4b37      	ldr	r3, [pc, #220]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1ef      	bne.n	8004ad4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d160      	bne.n	8004bbc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d111      	bne.n	8004b24 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b00:	4b31      	ldr	r3, [pc, #196]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6892      	ldr	r2, [r2, #8]
 8004b10:	0211      	lsls	r1, r2, #8
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	68d2      	ldr	r2, [r2, #12]
 8004b16:	0912      	lsrs	r2, r2, #4
 8004b18:	0452      	lsls	r2, r2, #17
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	492a      	ldr	r1, [pc, #168]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	610b      	str	r3, [r1, #16]
 8004b22:	e027      	b.n	8004b74 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d112      	bne.n	8004b50 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b2a:	4b27      	ldr	r3, [pc, #156]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6892      	ldr	r2, [r2, #8]
 8004b3a:	0211      	lsls	r1, r2, #8
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6912      	ldr	r2, [r2, #16]
 8004b40:	0852      	lsrs	r2, r2, #1
 8004b42:	3a01      	subs	r2, #1
 8004b44:	0552      	lsls	r2, r2, #21
 8004b46:	430a      	orrs	r2, r1
 8004b48:	491f      	ldr	r1, [pc, #124]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	610b      	str	r3, [r1, #16]
 8004b4e:	e011      	b.n	8004b74 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b50:	4b1d      	ldr	r3, [pc, #116]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6892      	ldr	r2, [r2, #8]
 8004b60:	0211      	lsls	r1, r2, #8
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6952      	ldr	r2, [r2, #20]
 8004b66:	0852      	lsrs	r2, r2, #1
 8004b68:	3a01      	subs	r2, #1
 8004b6a:	0652      	lsls	r2, r2, #25
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	4916      	ldr	r1, [pc, #88]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b74:	4b14      	ldr	r3, [pc, #80]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a13      	ldr	r2, [pc, #76]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b80:	f7fd f96a 	bl	8001e58 <HAL_GetTick>
 8004b84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b86:	e009      	b.n	8004b9c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b88:	f7fd f966 	bl	8001e58 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d902      	bls.n	8004b9c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	73fb      	strb	r3, [r7, #15]
          break;
 8004b9a:	e005      	b.n	8004ba8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0ef      	beq.n	8004b88 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bae:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	4904      	ldr	r1, [pc, #16]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40021000 	.word	0x40021000

08004bcc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bda:	4b6a      	ldr	r3, [pc, #424]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d018      	beq.n	8004c18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004be6:	4b67      	ldr	r3, [pc, #412]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f003 0203 	and.w	r2, r3, #3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d10d      	bne.n	8004c12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
       ||
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d009      	beq.n	8004c12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004bfe:	4b61      	ldr	r3, [pc, #388]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	091b      	lsrs	r3, r3, #4
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
       ||
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d047      	beq.n	8004ca2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
 8004c16:	e044      	b.n	8004ca2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d018      	beq.n	8004c52 <RCCEx_PLLSAI2_Config+0x86>
 8004c20:	2b03      	cmp	r3, #3
 8004c22:	d825      	bhi.n	8004c70 <RCCEx_PLLSAI2_Config+0xa4>
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d002      	beq.n	8004c2e <RCCEx_PLLSAI2_Config+0x62>
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d009      	beq.n	8004c40 <RCCEx_PLLSAI2_Config+0x74>
 8004c2c:	e020      	b.n	8004c70 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c2e:	4b55      	ldr	r3, [pc, #340]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d11d      	bne.n	8004c76 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c3e:	e01a      	b.n	8004c76 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c40:	4b50      	ldr	r3, [pc, #320]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d116      	bne.n	8004c7a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c50:	e013      	b.n	8004c7a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c52:	4b4c      	ldr	r3, [pc, #304]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10f      	bne.n	8004c7e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c5e:	4b49      	ldr	r3, [pc, #292]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c6e:	e006      	b.n	8004c7e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	73fb      	strb	r3, [r7, #15]
      break;
 8004c74:	e004      	b.n	8004c80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c76:	bf00      	nop
 8004c78:	e002      	b.n	8004c80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c7a:	bf00      	nop
 8004c7c:	e000      	b.n	8004c80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10d      	bne.n	8004ca2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c86:	4b3f      	ldr	r3, [pc, #252]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6819      	ldr	r1, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	430b      	orrs	r3, r1
 8004c9c:	4939      	ldr	r1, [pc, #228]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d167      	bne.n	8004d78 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ca8:	4b36      	ldr	r3, [pc, #216]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a35      	ldr	r2, [pc, #212]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb4:	f7fd f8d0 	bl	8001e58 <HAL_GetTick>
 8004cb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cba:	e009      	b.n	8004cd0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cbc:	f7fd f8cc 	bl	8001e58 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d902      	bls.n	8004cd0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	73fb      	strb	r3, [r7, #15]
        break;
 8004cce:	e005      	b.n	8004cdc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cd0:	4b2c      	ldr	r3, [pc, #176]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1ef      	bne.n	8004cbc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d14a      	bne.n	8004d78 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d111      	bne.n	8004d0c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ce8:	4b26      	ldr	r3, [pc, #152]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6892      	ldr	r2, [r2, #8]
 8004cf8:	0211      	lsls	r1, r2, #8
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	68d2      	ldr	r2, [r2, #12]
 8004cfe:	0912      	lsrs	r2, r2, #4
 8004d00:	0452      	lsls	r2, r2, #17
 8004d02:	430a      	orrs	r2, r1
 8004d04:	491f      	ldr	r1, [pc, #124]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	614b      	str	r3, [r1, #20]
 8004d0a:	e011      	b.n	8004d30 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d0c:	4b1d      	ldr	r3, [pc, #116]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6892      	ldr	r2, [r2, #8]
 8004d1c:	0211      	lsls	r1, r2, #8
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6912      	ldr	r2, [r2, #16]
 8004d22:	0852      	lsrs	r2, r2, #1
 8004d24:	3a01      	subs	r2, #1
 8004d26:	0652      	lsls	r2, r2, #25
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	4916      	ldr	r1, [pc, #88]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d30:	4b14      	ldr	r3, [pc, #80]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a13      	ldr	r2, [pc, #76]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d3c:	f7fd f88c 	bl	8001e58 <HAL_GetTick>
 8004d40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d42:	e009      	b.n	8004d58 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d44:	f7fd f888 	bl	8001e58 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d902      	bls.n	8004d58 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	73fb      	strb	r3, [r7, #15]
          break;
 8004d56:	e005      	b.n	8004d64 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d58:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0ef      	beq.n	8004d44 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d6a:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d6c:	695a      	ldr	r2, [r3, #20]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	4904      	ldr	r1, [pc, #16]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40021000 	.word	0x40021000

08004d88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e040      	b.n	8004e1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fc fa56 	bl	800125c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2224      	movs	r2, #36	; 0x24
 8004db4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0201 	bic.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fb6a 	bl	80054a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f8af 	bl	8004f38 <UART_SetConfig>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e01b      	b.n	8004e1c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004df2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fbe9 	bl	80055ec <UART_CheckIdleState>
 8004e1a:	4603      	mov	r3, r0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08a      	sub	sp, #40	; 0x28
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	603b      	str	r3, [r7, #0]
 8004e30:	4613      	mov	r3, r2
 8004e32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	d178      	bne.n	8004f2e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_UART_Transmit+0x24>
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e071      	b.n	8004f30 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2221      	movs	r2, #33	; 0x21
 8004e58:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e5a:	f7fc fffd 	bl	8001e58 <HAL_GetTick>
 8004e5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	88fa      	ldrh	r2, [r7, #6]
 8004e64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e78:	d108      	bne.n	8004e8c <HAL_UART_Transmit+0x68>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d104      	bne.n	8004e8c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	61bb      	str	r3, [r7, #24]
 8004e8a:	e003      	b.n	8004e94 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e90:	2300      	movs	r3, #0
 8004e92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e94:	e030      	b.n	8004ef8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	2180      	movs	r1, #128	; 0x80
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 fc4b 	bl	800573c <UART_WaitOnFlagUntilTimeout>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d004      	beq.n	8004eb6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e03c      	b.n	8004f30 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10b      	bne.n	8004ed4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	881a      	ldrh	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ec8:	b292      	uxth	r2, r2
 8004eca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	3302      	adds	r3, #2
 8004ed0:	61bb      	str	r3, [r7, #24]
 8004ed2:	e008      	b.n	8004ee6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	781a      	ldrb	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	b292      	uxth	r2, r2
 8004ede:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1c8      	bne.n	8004e96 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2140      	movs	r1, #64	; 0x40
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 fc14 	bl	800573c <UART_WaitOnFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d004      	beq.n	8004f24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e005      	b.n	8004f30 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2220      	movs	r2, #32
 8004f28:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	e000      	b.n	8004f30 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004f2e:	2302      	movs	r3, #2
  }
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3720      	adds	r7, #32
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f3c:	b08a      	sub	sp, #40	; 0x28
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	431a      	orrs	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	431a      	orrs	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4ba4      	ldr	r3, [pc, #656]	; (80051f8 <UART_SetConfig+0x2c0>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	6812      	ldr	r2, [r2, #0]
 8004f6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f70:	430b      	orrs	r3, r1
 8004f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a99      	ldr	r2, [pc, #612]	; (80051fc <UART_SetConfig+0x2c4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d004      	beq.n	8004fa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a90      	ldr	r2, [pc, #576]	; (8005200 <UART_SetConfig+0x2c8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d126      	bne.n	8005010 <UART_SetConfig+0xd8>
 8004fc2:	4b90      	ldr	r3, [pc, #576]	; (8005204 <UART_SetConfig+0x2cc>)
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d81b      	bhi.n	8005008 <UART_SetConfig+0xd0>
 8004fd0:	a201      	add	r2, pc, #4	; (adr r2, 8004fd8 <UART_SetConfig+0xa0>)
 8004fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd6:	bf00      	nop
 8004fd8:	08004fe9 	.word	0x08004fe9
 8004fdc:	08004ff9 	.word	0x08004ff9
 8004fe0:	08004ff1 	.word	0x08004ff1
 8004fe4:	08005001 	.word	0x08005001
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fee:	e116      	b.n	800521e <UART_SetConfig+0x2e6>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff6:	e112      	b.n	800521e <UART_SetConfig+0x2e6>
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ffe:	e10e      	b.n	800521e <UART_SetConfig+0x2e6>
 8005000:	2308      	movs	r3, #8
 8005002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005006:	e10a      	b.n	800521e <UART_SetConfig+0x2e6>
 8005008:	2310      	movs	r3, #16
 800500a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800500e:	e106      	b.n	800521e <UART_SetConfig+0x2e6>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a7c      	ldr	r2, [pc, #496]	; (8005208 <UART_SetConfig+0x2d0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d138      	bne.n	800508c <UART_SetConfig+0x154>
 800501a:	4b7a      	ldr	r3, [pc, #488]	; (8005204 <UART_SetConfig+0x2cc>)
 800501c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005020:	f003 030c 	and.w	r3, r3, #12
 8005024:	2b0c      	cmp	r3, #12
 8005026:	d82d      	bhi.n	8005084 <UART_SetConfig+0x14c>
 8005028:	a201      	add	r2, pc, #4	; (adr r2, 8005030 <UART_SetConfig+0xf8>)
 800502a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502e:	bf00      	nop
 8005030:	08005065 	.word	0x08005065
 8005034:	08005085 	.word	0x08005085
 8005038:	08005085 	.word	0x08005085
 800503c:	08005085 	.word	0x08005085
 8005040:	08005075 	.word	0x08005075
 8005044:	08005085 	.word	0x08005085
 8005048:	08005085 	.word	0x08005085
 800504c:	08005085 	.word	0x08005085
 8005050:	0800506d 	.word	0x0800506d
 8005054:	08005085 	.word	0x08005085
 8005058:	08005085 	.word	0x08005085
 800505c:	08005085 	.word	0x08005085
 8005060:	0800507d 	.word	0x0800507d
 8005064:	2300      	movs	r3, #0
 8005066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800506a:	e0d8      	b.n	800521e <UART_SetConfig+0x2e6>
 800506c:	2302      	movs	r3, #2
 800506e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005072:	e0d4      	b.n	800521e <UART_SetConfig+0x2e6>
 8005074:	2304      	movs	r3, #4
 8005076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800507a:	e0d0      	b.n	800521e <UART_SetConfig+0x2e6>
 800507c:	2308      	movs	r3, #8
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005082:	e0cc      	b.n	800521e <UART_SetConfig+0x2e6>
 8005084:	2310      	movs	r3, #16
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800508a:	e0c8      	b.n	800521e <UART_SetConfig+0x2e6>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a5e      	ldr	r2, [pc, #376]	; (800520c <UART_SetConfig+0x2d4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d125      	bne.n	80050e2 <UART_SetConfig+0x1aa>
 8005096:	4b5b      	ldr	r3, [pc, #364]	; (8005204 <UART_SetConfig+0x2cc>)
 8005098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050a0:	2b30      	cmp	r3, #48	; 0x30
 80050a2:	d016      	beq.n	80050d2 <UART_SetConfig+0x19a>
 80050a4:	2b30      	cmp	r3, #48	; 0x30
 80050a6:	d818      	bhi.n	80050da <UART_SetConfig+0x1a2>
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d00a      	beq.n	80050c2 <UART_SetConfig+0x18a>
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d814      	bhi.n	80050da <UART_SetConfig+0x1a2>
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <UART_SetConfig+0x182>
 80050b4:	2b10      	cmp	r3, #16
 80050b6:	d008      	beq.n	80050ca <UART_SetConfig+0x192>
 80050b8:	e00f      	b.n	80050da <UART_SetConfig+0x1a2>
 80050ba:	2300      	movs	r3, #0
 80050bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c0:	e0ad      	b.n	800521e <UART_SetConfig+0x2e6>
 80050c2:	2302      	movs	r3, #2
 80050c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c8:	e0a9      	b.n	800521e <UART_SetConfig+0x2e6>
 80050ca:	2304      	movs	r3, #4
 80050cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050d0:	e0a5      	b.n	800521e <UART_SetConfig+0x2e6>
 80050d2:	2308      	movs	r3, #8
 80050d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050d8:	e0a1      	b.n	800521e <UART_SetConfig+0x2e6>
 80050da:	2310      	movs	r3, #16
 80050dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050e0:	e09d      	b.n	800521e <UART_SetConfig+0x2e6>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a4a      	ldr	r2, [pc, #296]	; (8005210 <UART_SetConfig+0x2d8>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d125      	bne.n	8005138 <UART_SetConfig+0x200>
 80050ec:	4b45      	ldr	r3, [pc, #276]	; (8005204 <UART_SetConfig+0x2cc>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050f6:	2bc0      	cmp	r3, #192	; 0xc0
 80050f8:	d016      	beq.n	8005128 <UART_SetConfig+0x1f0>
 80050fa:	2bc0      	cmp	r3, #192	; 0xc0
 80050fc:	d818      	bhi.n	8005130 <UART_SetConfig+0x1f8>
 80050fe:	2b80      	cmp	r3, #128	; 0x80
 8005100:	d00a      	beq.n	8005118 <UART_SetConfig+0x1e0>
 8005102:	2b80      	cmp	r3, #128	; 0x80
 8005104:	d814      	bhi.n	8005130 <UART_SetConfig+0x1f8>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <UART_SetConfig+0x1d8>
 800510a:	2b40      	cmp	r3, #64	; 0x40
 800510c:	d008      	beq.n	8005120 <UART_SetConfig+0x1e8>
 800510e:	e00f      	b.n	8005130 <UART_SetConfig+0x1f8>
 8005110:	2300      	movs	r3, #0
 8005112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005116:	e082      	b.n	800521e <UART_SetConfig+0x2e6>
 8005118:	2302      	movs	r3, #2
 800511a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511e:	e07e      	b.n	800521e <UART_SetConfig+0x2e6>
 8005120:	2304      	movs	r3, #4
 8005122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005126:	e07a      	b.n	800521e <UART_SetConfig+0x2e6>
 8005128:	2308      	movs	r3, #8
 800512a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800512e:	e076      	b.n	800521e <UART_SetConfig+0x2e6>
 8005130:	2310      	movs	r3, #16
 8005132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005136:	e072      	b.n	800521e <UART_SetConfig+0x2e6>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a35      	ldr	r2, [pc, #212]	; (8005214 <UART_SetConfig+0x2dc>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d12a      	bne.n	8005198 <UART_SetConfig+0x260>
 8005142:	4b30      	ldr	r3, [pc, #192]	; (8005204 <UART_SetConfig+0x2cc>)
 8005144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005150:	d01a      	beq.n	8005188 <UART_SetConfig+0x250>
 8005152:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005156:	d81b      	bhi.n	8005190 <UART_SetConfig+0x258>
 8005158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800515c:	d00c      	beq.n	8005178 <UART_SetConfig+0x240>
 800515e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005162:	d815      	bhi.n	8005190 <UART_SetConfig+0x258>
 8005164:	2b00      	cmp	r3, #0
 8005166:	d003      	beq.n	8005170 <UART_SetConfig+0x238>
 8005168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800516c:	d008      	beq.n	8005180 <UART_SetConfig+0x248>
 800516e:	e00f      	b.n	8005190 <UART_SetConfig+0x258>
 8005170:	2300      	movs	r3, #0
 8005172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005176:	e052      	b.n	800521e <UART_SetConfig+0x2e6>
 8005178:	2302      	movs	r3, #2
 800517a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800517e:	e04e      	b.n	800521e <UART_SetConfig+0x2e6>
 8005180:	2304      	movs	r3, #4
 8005182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005186:	e04a      	b.n	800521e <UART_SetConfig+0x2e6>
 8005188:	2308      	movs	r3, #8
 800518a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800518e:	e046      	b.n	800521e <UART_SetConfig+0x2e6>
 8005190:	2310      	movs	r3, #16
 8005192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005196:	e042      	b.n	800521e <UART_SetConfig+0x2e6>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a17      	ldr	r2, [pc, #92]	; (80051fc <UART_SetConfig+0x2c4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d13a      	bne.n	8005218 <UART_SetConfig+0x2e0>
 80051a2:	4b18      	ldr	r3, [pc, #96]	; (8005204 <UART_SetConfig+0x2cc>)
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051b0:	d01a      	beq.n	80051e8 <UART_SetConfig+0x2b0>
 80051b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051b6:	d81b      	bhi.n	80051f0 <UART_SetConfig+0x2b8>
 80051b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051bc:	d00c      	beq.n	80051d8 <UART_SetConfig+0x2a0>
 80051be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c2:	d815      	bhi.n	80051f0 <UART_SetConfig+0x2b8>
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <UART_SetConfig+0x298>
 80051c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051cc:	d008      	beq.n	80051e0 <UART_SetConfig+0x2a8>
 80051ce:	e00f      	b.n	80051f0 <UART_SetConfig+0x2b8>
 80051d0:	2300      	movs	r3, #0
 80051d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d6:	e022      	b.n	800521e <UART_SetConfig+0x2e6>
 80051d8:	2302      	movs	r3, #2
 80051da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051de:	e01e      	b.n	800521e <UART_SetConfig+0x2e6>
 80051e0:	2304      	movs	r3, #4
 80051e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e6:	e01a      	b.n	800521e <UART_SetConfig+0x2e6>
 80051e8:	2308      	movs	r3, #8
 80051ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ee:	e016      	b.n	800521e <UART_SetConfig+0x2e6>
 80051f0:	2310      	movs	r3, #16
 80051f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f6:	e012      	b.n	800521e <UART_SetConfig+0x2e6>
 80051f8:	efff69f3 	.word	0xefff69f3
 80051fc:	40008000 	.word	0x40008000
 8005200:	40013800 	.word	0x40013800
 8005204:	40021000 	.word	0x40021000
 8005208:	40004400 	.word	0x40004400
 800520c:	40004800 	.word	0x40004800
 8005210:	40004c00 	.word	0x40004c00
 8005214:	40005000 	.word	0x40005000
 8005218:	2310      	movs	r3, #16
 800521a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a9f      	ldr	r2, [pc, #636]	; (80054a0 <UART_SetConfig+0x568>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d17a      	bne.n	800531e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005228:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800522c:	2b08      	cmp	r3, #8
 800522e:	d824      	bhi.n	800527a <UART_SetConfig+0x342>
 8005230:	a201      	add	r2, pc, #4	; (adr r2, 8005238 <UART_SetConfig+0x300>)
 8005232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005236:	bf00      	nop
 8005238:	0800525d 	.word	0x0800525d
 800523c:	0800527b 	.word	0x0800527b
 8005240:	08005265 	.word	0x08005265
 8005244:	0800527b 	.word	0x0800527b
 8005248:	0800526b 	.word	0x0800526b
 800524c:	0800527b 	.word	0x0800527b
 8005250:	0800527b 	.word	0x0800527b
 8005254:	0800527b 	.word	0x0800527b
 8005258:	08005273 	.word	0x08005273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800525c:	f7ff f83c 	bl	80042d8 <HAL_RCC_GetPCLK1Freq>
 8005260:	61f8      	str	r0, [r7, #28]
        break;
 8005262:	e010      	b.n	8005286 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005264:	4b8f      	ldr	r3, [pc, #572]	; (80054a4 <UART_SetConfig+0x56c>)
 8005266:	61fb      	str	r3, [r7, #28]
        break;
 8005268:	e00d      	b.n	8005286 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800526a:	f7fe ff9d 	bl	80041a8 <HAL_RCC_GetSysClockFreq>
 800526e:	61f8      	str	r0, [r7, #28]
        break;
 8005270:	e009      	b.n	8005286 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005276:	61fb      	str	r3, [r7, #28]
        break;
 8005278:	e005      	b.n	8005286 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005284:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 80fb 	beq.w	8005484 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	4413      	add	r3, r2
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	429a      	cmp	r2, r3
 800529c:	d305      	bcc.n	80052aa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052a4:	69fa      	ldr	r2, [r7, #28]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d903      	bls.n	80052b2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80052b0:	e0e8      	b.n	8005484 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	2200      	movs	r2, #0
 80052b6:	461c      	mov	r4, r3
 80052b8:	4615      	mov	r5, r2
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	022b      	lsls	r3, r5, #8
 80052c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80052c8:	0222      	lsls	r2, r4, #8
 80052ca:	68f9      	ldr	r1, [r7, #12]
 80052cc:	6849      	ldr	r1, [r1, #4]
 80052ce:	0849      	lsrs	r1, r1, #1
 80052d0:	2000      	movs	r0, #0
 80052d2:	4688      	mov	r8, r1
 80052d4:	4681      	mov	r9, r0
 80052d6:	eb12 0a08 	adds.w	sl, r2, r8
 80052da:	eb43 0b09 	adc.w	fp, r3, r9
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	603b      	str	r3, [r7, #0]
 80052e6:	607a      	str	r2, [r7, #4]
 80052e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052ec:	4650      	mov	r0, sl
 80052ee:	4659      	mov	r1, fp
 80052f0:	f7fb f9a2 	bl	8000638 <__aeabi_uldivmod>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4613      	mov	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005302:	d308      	bcc.n	8005316 <UART_SetConfig+0x3de>
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800530a:	d204      	bcs.n	8005316 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	60da      	str	r2, [r3, #12]
 8005314:	e0b6      	b.n	8005484 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800531c:	e0b2      	b.n	8005484 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005326:	d15e      	bne.n	80053e6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005328:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800532c:	2b08      	cmp	r3, #8
 800532e:	d828      	bhi.n	8005382 <UART_SetConfig+0x44a>
 8005330:	a201      	add	r2, pc, #4	; (adr r2, 8005338 <UART_SetConfig+0x400>)
 8005332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005336:	bf00      	nop
 8005338:	0800535d 	.word	0x0800535d
 800533c:	08005365 	.word	0x08005365
 8005340:	0800536d 	.word	0x0800536d
 8005344:	08005383 	.word	0x08005383
 8005348:	08005373 	.word	0x08005373
 800534c:	08005383 	.word	0x08005383
 8005350:	08005383 	.word	0x08005383
 8005354:	08005383 	.word	0x08005383
 8005358:	0800537b 	.word	0x0800537b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800535c:	f7fe ffbc 	bl	80042d8 <HAL_RCC_GetPCLK1Freq>
 8005360:	61f8      	str	r0, [r7, #28]
        break;
 8005362:	e014      	b.n	800538e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005364:	f7fe ffce 	bl	8004304 <HAL_RCC_GetPCLK2Freq>
 8005368:	61f8      	str	r0, [r7, #28]
        break;
 800536a:	e010      	b.n	800538e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800536c:	4b4d      	ldr	r3, [pc, #308]	; (80054a4 <UART_SetConfig+0x56c>)
 800536e:	61fb      	str	r3, [r7, #28]
        break;
 8005370:	e00d      	b.n	800538e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005372:	f7fe ff19 	bl	80041a8 <HAL_RCC_GetSysClockFreq>
 8005376:	61f8      	str	r0, [r7, #28]
        break;
 8005378:	e009      	b.n	800538e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800537a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800537e:	61fb      	str	r3, [r7, #28]
        break;
 8005380:	e005      	b.n	800538e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800538c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d077      	beq.n	8005484 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	005a      	lsls	r2, r3, #1
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	085b      	lsrs	r3, r3, #1
 800539e:	441a      	add	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	2b0f      	cmp	r3, #15
 80053ae:	d916      	bls.n	80053de <UART_SetConfig+0x4a6>
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b6:	d212      	bcs.n	80053de <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	f023 030f 	bic.w	r3, r3, #15
 80053c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	085b      	lsrs	r3, r3, #1
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	8afb      	ldrh	r3, [r7, #22]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	8afa      	ldrh	r2, [r7, #22]
 80053da:	60da      	str	r2, [r3, #12]
 80053dc:	e052      	b.n	8005484 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053e4:	e04e      	b.n	8005484 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d827      	bhi.n	800543e <UART_SetConfig+0x506>
 80053ee:	a201      	add	r2, pc, #4	; (adr r2, 80053f4 <UART_SetConfig+0x4bc>)
 80053f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f4:	08005419 	.word	0x08005419
 80053f8:	08005421 	.word	0x08005421
 80053fc:	08005429 	.word	0x08005429
 8005400:	0800543f 	.word	0x0800543f
 8005404:	0800542f 	.word	0x0800542f
 8005408:	0800543f 	.word	0x0800543f
 800540c:	0800543f 	.word	0x0800543f
 8005410:	0800543f 	.word	0x0800543f
 8005414:	08005437 	.word	0x08005437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005418:	f7fe ff5e 	bl	80042d8 <HAL_RCC_GetPCLK1Freq>
 800541c:	61f8      	str	r0, [r7, #28]
        break;
 800541e:	e014      	b.n	800544a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005420:	f7fe ff70 	bl	8004304 <HAL_RCC_GetPCLK2Freq>
 8005424:	61f8      	str	r0, [r7, #28]
        break;
 8005426:	e010      	b.n	800544a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005428:	4b1e      	ldr	r3, [pc, #120]	; (80054a4 <UART_SetConfig+0x56c>)
 800542a:	61fb      	str	r3, [r7, #28]
        break;
 800542c:	e00d      	b.n	800544a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800542e:	f7fe febb 	bl	80041a8 <HAL_RCC_GetSysClockFreq>
 8005432:	61f8      	str	r0, [r7, #28]
        break;
 8005434:	e009      	b.n	800544a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800543a:	61fb      	str	r3, [r7, #28]
        break;
 800543c:	e005      	b.n	800544a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005448:	bf00      	nop
    }

    if (pclk != 0U)
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d019      	beq.n	8005484 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	085a      	lsrs	r2, r3, #1
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	441a      	add	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005462:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	2b0f      	cmp	r3, #15
 8005468:	d909      	bls.n	800547e <UART_SetConfig+0x546>
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005470:	d205      	bcs.n	800547e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	b29a      	uxth	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60da      	str	r2, [r3, #12]
 800547c:	e002      	b.n	8005484 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005490:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005494:	4618      	mov	r0, r3
 8005496:	3728      	adds	r7, #40	; 0x28
 8005498:	46bd      	mov	sp, r7
 800549a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800549e:	bf00      	nop
 80054a0:	40008000 	.word	0x40008000
 80054a4:	00f42400 	.word	0x00f42400

080054a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01a      	beq.n	80055be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055a6:	d10a      	bne.n	80055be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	605a      	str	r2, [r3, #4]
  }
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b098      	sub	sp, #96	; 0x60
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055fc:	f7fc fc2c 	bl	8001e58 <HAL_GetTick>
 8005600:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b08      	cmp	r3, #8
 800560e:	d12e      	bne.n	800566e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005610:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005618:	2200      	movs	r2, #0
 800561a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f88c 	bl	800573c <UART_WaitOnFlagUntilTimeout>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d021      	beq.n	800566e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800563e:	653b      	str	r3, [r7, #80]	; 0x50
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005648:	647b      	str	r3, [r7, #68]	; 0x44
 800564a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800564e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e6      	bne.n	800562a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2220      	movs	r2, #32
 8005660:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e062      	b.n	8005734 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b04      	cmp	r3, #4
 800567a:	d149      	bne.n	8005710 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800567c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005684:	2200      	movs	r2, #0
 8005686:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f856 	bl	800573c <UART_WaitOnFlagUntilTimeout>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d03c      	beq.n	8005710 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	e853 3f00 	ldrex	r3, [r3]
 80056a2:	623b      	str	r3, [r7, #32]
   return(result);
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b4:	633b      	str	r3, [r7, #48]	; 0x30
 80056b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056bc:	e841 2300 	strex	r3, r2, [r1]
 80056c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1e6      	bne.n	8005696 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3308      	adds	r3, #8
 80056ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0301 	bic.w	r3, r3, #1
 80056de:	64bb      	str	r3, [r7, #72]	; 0x48
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3308      	adds	r3, #8
 80056e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056e8:	61fa      	str	r2, [r7, #28]
 80056ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	69b9      	ldr	r1, [r7, #24]
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	617b      	str	r3, [r7, #20]
   return(result);
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e5      	bne.n	80056c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2220      	movs	r2, #32
 8005700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e011      	b.n	8005734 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2220      	movs	r2, #32
 8005714:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3758      	adds	r7, #88	; 0x58
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	603b      	str	r3, [r7, #0]
 8005748:	4613      	mov	r3, r2
 800574a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800574c:	e049      	b.n	80057e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005754:	d045      	beq.n	80057e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005756:	f7fc fb7f 	bl	8001e58 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	429a      	cmp	r2, r3
 8005764:	d302      	bcc.n	800576c <UART_WaitOnFlagUntilTimeout+0x30>
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e048      	b.n	8005802 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0304 	and.w	r3, r3, #4
 800577a:	2b00      	cmp	r3, #0
 800577c:	d031      	beq.n	80057e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b08      	cmp	r3, #8
 800578a:	d110      	bne.n	80057ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2208      	movs	r2, #8
 8005792:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 f838 	bl	800580a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2208      	movs	r2, #8
 800579e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e029      	b.n	8005802 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057bc:	d111      	bne.n	80057e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 f81e 	bl	800580a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e00f      	b.n	8005802 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69da      	ldr	r2, [r3, #28]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4013      	ands	r3, r2
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	bf0c      	ite	eq
 80057f2:	2301      	moveq	r3, #1
 80057f4:	2300      	movne	r3, #0
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	79fb      	ldrb	r3, [r7, #7]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d0a6      	beq.n	800574e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800580a:	b480      	push	{r7}
 800580c:	b095      	sub	sp, #84	; 0x54
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581a:	e853 3f00 	ldrex	r3, [r3]
 800581e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005822:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	461a      	mov	r2, r3
 800582e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005830:	643b      	str	r3, [r7, #64]	; 0x40
 8005832:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005834:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005836:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005838:	e841 2300 	strex	r3, r2, [r1]
 800583c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1e6      	bne.n	8005812 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3308      	adds	r3, #8
 800584a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	e853 3f00 	ldrex	r3, [r3]
 8005852:	61fb      	str	r3, [r7, #28]
   return(result);
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	f023 0301 	bic.w	r3, r3, #1
 800585a:	64bb      	str	r3, [r7, #72]	; 0x48
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3308      	adds	r3, #8
 8005862:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005864:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005866:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800586a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800586c:	e841 2300 	strex	r3, r2, [r1]
 8005870:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1e5      	bne.n	8005844 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800587c:	2b01      	cmp	r3, #1
 800587e:	d118      	bne.n	80058b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	e853 3f00 	ldrex	r3, [r3]
 800588c:	60bb      	str	r3, [r7, #8]
   return(result);
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f023 0310 	bic.w	r3, r3, #16
 8005894:	647b      	str	r3, [r7, #68]	; 0x44
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800589e:	61bb      	str	r3, [r7, #24]
 80058a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	6979      	ldr	r1, [r7, #20]
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	613b      	str	r3, [r7, #16]
   return(result);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e6      	bne.n	8005880 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80058c6:	bf00      	nop
 80058c8:	3754      	adds	r7, #84	; 0x54
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058d2:	b084      	sub	sp, #16
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	f107 001c 	add.w	r0, r7, #28
 80058e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fa65 	bl	8005dc0 <USB_CoreReset>
 80058f6:	4603      	mov	r3, r0
 80058f8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80058fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d106      	bne.n	800590e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	639a      	str	r2, [r3, #56]	; 0x38
 800590c:	e005      	b.n	800591a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005912:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800591a:	7bfb      	ldrb	r3, [r7, #15]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005926:	b004      	add	sp, #16
 8005928:	4770      	bx	lr

0800592a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f023 0201 	bic.w	r2, r3, #1
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	460b      	mov	r3, r1
 8005956:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005968:	78fb      	ldrb	r3, [r7, #3]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d115      	bne.n	800599a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800597a:	2001      	movs	r0, #1
 800597c:	f7fc fa78 	bl	8001e70 <HAL_Delay>
      ms++;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3301      	adds	r3, #1
 8005984:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fa0c 	bl	8005da4 <USB_GetMode>
 800598c:	4603      	mov	r3, r0
 800598e:	2b01      	cmp	r3, #1
 8005990:	d01e      	beq.n	80059d0 <USB_SetCurrentMode+0x84>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2b31      	cmp	r3, #49	; 0x31
 8005996:	d9f0      	bls.n	800597a <USB_SetCurrentMode+0x2e>
 8005998:	e01a      	b.n	80059d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800599a:	78fb      	ldrb	r3, [r7, #3]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d115      	bne.n	80059cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059ac:	2001      	movs	r0, #1
 80059ae:	f7fc fa5f 	bl	8001e70 <HAL_Delay>
      ms++;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	3301      	adds	r3, #1
 80059b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f9f3 	bl	8005da4 <USB_GetMode>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d005      	beq.n	80059d0 <USB_SetCurrentMode+0x84>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b31      	cmp	r3, #49	; 0x31
 80059c8:	d9f0      	bls.n	80059ac <USB_SetCurrentMode+0x60>
 80059ca:	e001      	b.n	80059d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e005      	b.n	80059dc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b32      	cmp	r3, #50	; 0x32
 80059d4:	d101      	bne.n	80059da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e000      	b.n	80059dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059e4:	b084      	sub	sp, #16
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b086      	sub	sp, #24
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80059f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059fe:	2300      	movs	r3, #0
 8005a00:	613b      	str	r3, [r7, #16]
 8005a02:	e009      	b.n	8005a18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	3340      	adds	r3, #64	; 0x40
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	2200      	movs	r2, #0
 8005a10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	3301      	adds	r3, #1
 8005a16:	613b      	str	r3, [r7, #16]
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	2b0e      	cmp	r3, #14
 8005a1c:	d9f2      	bls.n	8005a04 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d11c      	bne.n	8005a5e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a32:	f043 0302 	orr.w	r3, r3, #2
 8005a36:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	e005      	b.n	8005a6a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a70:	461a      	mov	r2, r3
 8005a72:	2300      	movs	r3, #0
 8005a74:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a76:	2103      	movs	r1, #3
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f959 	bl	8005d30 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a7e:	2110      	movs	r1, #16
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f8f1 	bl	8005c68 <USB_FlushTxFifo>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f91d 	bl	8005cd0 <USB_FlushRxFifo>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005abe:	461a      	mov	r2, r3
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	613b      	str	r3, [r7, #16]
 8005ac8:	e043      	b.n	8005b52 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005adc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ae0:	d118      	bne.n	8005b14 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10a      	bne.n	8005afe <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af4:	461a      	mov	r2, r3
 8005af6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005afa:	6013      	str	r3, [r2, #0]
 8005afc:	e013      	b.n	8005b26 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	e008      	b.n	8005b26 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b20:	461a      	mov	r2, r3
 8005b22:	2300      	movs	r3, #0
 8005b24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b32:	461a      	mov	r2, r3
 8005b34:	2300      	movs	r3, #0
 8005b36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b44:	461a      	mov	r2, r3
 8005b46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	613b      	str	r3, [r7, #16]
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d3b7      	bcc.n	8005aca <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	e043      	b.n	8005be8 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b76:	d118      	bne.n	8005baa <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	e013      	b.n	8005bbc <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	e008      	b.n	8005bbc <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	2300      	movs	r3, #0
 8005bba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc8:	461a      	mov	r2, r3
 8005bca:	2300      	movs	r3, #0
 8005bcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005be0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	3301      	adds	r3, #1
 8005be6:	613b      	str	r3, [r7, #16]
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d3b7      	bcc.n	8005b60 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c02:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c10:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	f043 0210 	orr.w	r2, r3, #16
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	4b10      	ldr	r3, [pc, #64]	; (8005c64 <USB_DevInit+0x280>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d005      	beq.n	8005c3c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	f043 0208 	orr.w	r2, r3, #8
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d107      	bne.n	8005c52 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c4a:	f043 0304 	orr.w	r3, r3, #4
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c5e:	b004      	add	sp, #16
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	803c3800 	.word	0x803c3800

08005c68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4a13      	ldr	r2, [pc, #76]	; (8005ccc <USB_FlushTxFifo+0x64>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d901      	bls.n	8005c88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e01b      	b.n	8005cc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	daf2      	bge.n	8005c76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c90:	2300      	movs	r3, #0
 8005c92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	019b      	lsls	r3, r3, #6
 8005c98:	f043 0220 	orr.w	r2, r3, #32
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4a08      	ldr	r2, [pc, #32]	; (8005ccc <USB_FlushTxFifo+0x64>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d901      	bls.n	8005cb2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e006      	b.n	8005cc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0320 	and.w	r3, r3, #32
 8005cba:	2b20      	cmp	r3, #32
 8005cbc:	d0f0      	beq.n	8005ca0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	00030d40 	.word	0x00030d40

08005cd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4a11      	ldr	r2, [pc, #68]	; (8005d2c <USB_FlushRxFifo+0x5c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d901      	bls.n	8005cee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e018      	b.n	8005d20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	daf2      	bge.n	8005cdc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2210      	movs	r2, #16
 8005cfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	3301      	adds	r3, #1
 8005d04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4a08      	ldr	r2, [pc, #32]	; (8005d2c <USB_FlushRxFifo+0x5c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d901      	bls.n	8005d12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e006      	b.n	8005d20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	f003 0310 	and.w	r3, r3, #16
 8005d1a:	2b10      	cmp	r3, #16
 8005d1c:	d0f0      	beq.n	8005d00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	00030d40 	.word	0x00030d40

08005d30 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	68f9      	ldr	r1, [r7, #12]
 8005d4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d50:	4313      	orrs	r3, r2
 8005d52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d7c:	f023 0303 	bic.w	r3, r3, #3
 8005d80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d90:	f043 0302 	orr.w	r3, r3, #2
 8005d94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	f003 0301 	and.w	r3, r3, #1
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4a13      	ldr	r2, [pc, #76]	; (8005e24 <USB_CoreReset+0x64>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d901      	bls.n	8005dde <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e01b      	b.n	8005e16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	daf2      	bge.n	8005dcc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	f043 0201 	orr.w	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4a09      	ldr	r2, [pc, #36]	; (8005e24 <USB_CoreReset+0x64>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d901      	bls.n	8005e08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e006      	b.n	8005e16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d0f0      	beq.n	8005df6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	00030d40 	.word	0x00030d40

08005e28 <sniprintf>:
 8005e28:	b40c      	push	{r2, r3}
 8005e2a:	b530      	push	{r4, r5, lr}
 8005e2c:	4b17      	ldr	r3, [pc, #92]	; (8005e8c <sniprintf+0x64>)
 8005e2e:	1e0c      	subs	r4, r1, #0
 8005e30:	681d      	ldr	r5, [r3, #0]
 8005e32:	b09d      	sub	sp, #116	; 0x74
 8005e34:	da08      	bge.n	8005e48 <sniprintf+0x20>
 8005e36:	238b      	movs	r3, #139	; 0x8b
 8005e38:	602b      	str	r3, [r5, #0]
 8005e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3e:	b01d      	add	sp, #116	; 0x74
 8005e40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e44:	b002      	add	sp, #8
 8005e46:	4770      	bx	lr
 8005e48:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005e4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005e50:	bf14      	ite	ne
 8005e52:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005e56:	4623      	moveq	r3, r4
 8005e58:	9304      	str	r3, [sp, #16]
 8005e5a:	9307      	str	r3, [sp, #28]
 8005e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e60:	9002      	str	r0, [sp, #8]
 8005e62:	9006      	str	r0, [sp, #24]
 8005e64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005e68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e6a:	ab21      	add	r3, sp, #132	; 0x84
 8005e6c:	a902      	add	r1, sp, #8
 8005e6e:	4628      	mov	r0, r5
 8005e70:	9301      	str	r3, [sp, #4]
 8005e72:	f000 f9a1 	bl	80061b8 <_svfiprintf_r>
 8005e76:	1c43      	adds	r3, r0, #1
 8005e78:	bfbc      	itt	lt
 8005e7a:	238b      	movlt	r3, #139	; 0x8b
 8005e7c:	602b      	strlt	r3, [r5, #0]
 8005e7e:	2c00      	cmp	r4, #0
 8005e80:	d0dd      	beq.n	8005e3e <sniprintf+0x16>
 8005e82:	9b02      	ldr	r3, [sp, #8]
 8005e84:	2200      	movs	r2, #0
 8005e86:	701a      	strb	r2, [r3, #0]
 8005e88:	e7d9      	b.n	8005e3e <sniprintf+0x16>
 8005e8a:	bf00      	nop
 8005e8c:	200001cc 	.word	0x200001cc

08005e90 <memset>:
 8005e90:	4402      	add	r2, r0
 8005e92:	4603      	mov	r3, r0
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d100      	bne.n	8005e9a <memset+0xa>
 8005e98:	4770      	bx	lr
 8005e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e9e:	e7f9      	b.n	8005e94 <memset+0x4>

08005ea0 <__errno>:
 8005ea0:	4b01      	ldr	r3, [pc, #4]	; (8005ea8 <__errno+0x8>)
 8005ea2:	6818      	ldr	r0, [r3, #0]
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	200001cc 	.word	0x200001cc

08005eac <__libc_init_array>:
 8005eac:	b570      	push	{r4, r5, r6, lr}
 8005eae:	4d0d      	ldr	r5, [pc, #52]	; (8005ee4 <__libc_init_array+0x38>)
 8005eb0:	4c0d      	ldr	r4, [pc, #52]	; (8005ee8 <__libc_init_array+0x3c>)
 8005eb2:	1b64      	subs	r4, r4, r5
 8005eb4:	10a4      	asrs	r4, r4, #2
 8005eb6:	2600      	movs	r6, #0
 8005eb8:	42a6      	cmp	r6, r4
 8005eba:	d109      	bne.n	8005ed0 <__libc_init_array+0x24>
 8005ebc:	4d0b      	ldr	r5, [pc, #44]	; (8005eec <__libc_init_array+0x40>)
 8005ebe:	4c0c      	ldr	r4, [pc, #48]	; (8005ef0 <__libc_init_array+0x44>)
 8005ec0:	f000 fca4 	bl	800680c <_init>
 8005ec4:	1b64      	subs	r4, r4, r5
 8005ec6:	10a4      	asrs	r4, r4, #2
 8005ec8:	2600      	movs	r6, #0
 8005eca:	42a6      	cmp	r6, r4
 8005ecc:	d105      	bne.n	8005eda <__libc_init_array+0x2e>
 8005ece:	bd70      	pop	{r4, r5, r6, pc}
 8005ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed4:	4798      	blx	r3
 8005ed6:	3601      	adds	r6, #1
 8005ed8:	e7ee      	b.n	8005eb8 <__libc_init_array+0xc>
 8005eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ede:	4798      	blx	r3
 8005ee0:	3601      	adds	r6, #1
 8005ee2:	e7f2      	b.n	8005eca <__libc_init_array+0x1e>
 8005ee4:	080068c0 	.word	0x080068c0
 8005ee8:	080068c0 	.word	0x080068c0
 8005eec:	080068c0 	.word	0x080068c0
 8005ef0:	080068c4 	.word	0x080068c4

08005ef4 <__retarget_lock_acquire_recursive>:
 8005ef4:	4770      	bx	lr

08005ef6 <__retarget_lock_release_recursive>:
 8005ef6:	4770      	bx	lr

08005ef8 <memcpy>:
 8005ef8:	440a      	add	r2, r1
 8005efa:	4291      	cmp	r1, r2
 8005efc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f00:	d100      	bne.n	8005f04 <memcpy+0xc>
 8005f02:	4770      	bx	lr
 8005f04:	b510      	push	{r4, lr}
 8005f06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f0e:	4291      	cmp	r1, r2
 8005f10:	d1f9      	bne.n	8005f06 <memcpy+0xe>
 8005f12:	bd10      	pop	{r4, pc}

08005f14 <_free_r>:
 8005f14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f16:	2900      	cmp	r1, #0
 8005f18:	d044      	beq.n	8005fa4 <_free_r+0x90>
 8005f1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f1e:	9001      	str	r0, [sp, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f1a1 0404 	sub.w	r4, r1, #4
 8005f26:	bfb8      	it	lt
 8005f28:	18e4      	addlt	r4, r4, r3
 8005f2a:	f000 f8df 	bl	80060ec <__malloc_lock>
 8005f2e:	4a1e      	ldr	r2, [pc, #120]	; (8005fa8 <_free_r+0x94>)
 8005f30:	9801      	ldr	r0, [sp, #4]
 8005f32:	6813      	ldr	r3, [r2, #0]
 8005f34:	b933      	cbnz	r3, 8005f44 <_free_r+0x30>
 8005f36:	6063      	str	r3, [r4, #4]
 8005f38:	6014      	str	r4, [r2, #0]
 8005f3a:	b003      	add	sp, #12
 8005f3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f40:	f000 b8da 	b.w	80060f8 <__malloc_unlock>
 8005f44:	42a3      	cmp	r3, r4
 8005f46:	d908      	bls.n	8005f5a <_free_r+0x46>
 8005f48:	6825      	ldr	r5, [r4, #0]
 8005f4a:	1961      	adds	r1, r4, r5
 8005f4c:	428b      	cmp	r3, r1
 8005f4e:	bf01      	itttt	eq
 8005f50:	6819      	ldreq	r1, [r3, #0]
 8005f52:	685b      	ldreq	r3, [r3, #4]
 8005f54:	1949      	addeq	r1, r1, r5
 8005f56:	6021      	streq	r1, [r4, #0]
 8005f58:	e7ed      	b.n	8005f36 <_free_r+0x22>
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	b10b      	cbz	r3, 8005f64 <_free_r+0x50>
 8005f60:	42a3      	cmp	r3, r4
 8005f62:	d9fa      	bls.n	8005f5a <_free_r+0x46>
 8005f64:	6811      	ldr	r1, [r2, #0]
 8005f66:	1855      	adds	r5, r2, r1
 8005f68:	42a5      	cmp	r5, r4
 8005f6a:	d10b      	bne.n	8005f84 <_free_r+0x70>
 8005f6c:	6824      	ldr	r4, [r4, #0]
 8005f6e:	4421      	add	r1, r4
 8005f70:	1854      	adds	r4, r2, r1
 8005f72:	42a3      	cmp	r3, r4
 8005f74:	6011      	str	r1, [r2, #0]
 8005f76:	d1e0      	bne.n	8005f3a <_free_r+0x26>
 8005f78:	681c      	ldr	r4, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	6053      	str	r3, [r2, #4]
 8005f7e:	440c      	add	r4, r1
 8005f80:	6014      	str	r4, [r2, #0]
 8005f82:	e7da      	b.n	8005f3a <_free_r+0x26>
 8005f84:	d902      	bls.n	8005f8c <_free_r+0x78>
 8005f86:	230c      	movs	r3, #12
 8005f88:	6003      	str	r3, [r0, #0]
 8005f8a:	e7d6      	b.n	8005f3a <_free_r+0x26>
 8005f8c:	6825      	ldr	r5, [r4, #0]
 8005f8e:	1961      	adds	r1, r4, r5
 8005f90:	428b      	cmp	r3, r1
 8005f92:	bf04      	itt	eq
 8005f94:	6819      	ldreq	r1, [r3, #0]
 8005f96:	685b      	ldreq	r3, [r3, #4]
 8005f98:	6063      	str	r3, [r4, #4]
 8005f9a:	bf04      	itt	eq
 8005f9c:	1949      	addeq	r1, r1, r5
 8005f9e:	6021      	streq	r1, [r4, #0]
 8005fa0:	6054      	str	r4, [r2, #4]
 8005fa2:	e7ca      	b.n	8005f3a <_free_r+0x26>
 8005fa4:	b003      	add	sp, #12
 8005fa6:	bd30      	pop	{r4, r5, pc}
 8005fa8:	20000abc 	.word	0x20000abc

08005fac <sbrk_aligned>:
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	4e0e      	ldr	r6, [pc, #56]	; (8005fe8 <sbrk_aligned+0x3c>)
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	6831      	ldr	r1, [r6, #0]
 8005fb4:	4605      	mov	r5, r0
 8005fb6:	b911      	cbnz	r1, 8005fbe <sbrk_aligned+0x12>
 8005fb8:	f000 fba6 	bl	8006708 <_sbrk_r>
 8005fbc:	6030      	str	r0, [r6, #0]
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	f000 fba1 	bl	8006708 <_sbrk_r>
 8005fc6:	1c43      	adds	r3, r0, #1
 8005fc8:	d00a      	beq.n	8005fe0 <sbrk_aligned+0x34>
 8005fca:	1cc4      	adds	r4, r0, #3
 8005fcc:	f024 0403 	bic.w	r4, r4, #3
 8005fd0:	42a0      	cmp	r0, r4
 8005fd2:	d007      	beq.n	8005fe4 <sbrk_aligned+0x38>
 8005fd4:	1a21      	subs	r1, r4, r0
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f000 fb96 	bl	8006708 <_sbrk_r>
 8005fdc:	3001      	adds	r0, #1
 8005fde:	d101      	bne.n	8005fe4 <sbrk_aligned+0x38>
 8005fe0:	f04f 34ff 	mov.w	r4, #4294967295
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	bd70      	pop	{r4, r5, r6, pc}
 8005fe8:	20000ac0 	.word	0x20000ac0

08005fec <_malloc_r>:
 8005fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ff0:	1ccd      	adds	r5, r1, #3
 8005ff2:	f025 0503 	bic.w	r5, r5, #3
 8005ff6:	3508      	adds	r5, #8
 8005ff8:	2d0c      	cmp	r5, #12
 8005ffa:	bf38      	it	cc
 8005ffc:	250c      	movcc	r5, #12
 8005ffe:	2d00      	cmp	r5, #0
 8006000:	4607      	mov	r7, r0
 8006002:	db01      	blt.n	8006008 <_malloc_r+0x1c>
 8006004:	42a9      	cmp	r1, r5
 8006006:	d905      	bls.n	8006014 <_malloc_r+0x28>
 8006008:	230c      	movs	r3, #12
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	2600      	movs	r6, #0
 800600e:	4630      	mov	r0, r6
 8006010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006014:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80060e8 <_malloc_r+0xfc>
 8006018:	f000 f868 	bl	80060ec <__malloc_lock>
 800601c:	f8d8 3000 	ldr.w	r3, [r8]
 8006020:	461c      	mov	r4, r3
 8006022:	bb5c      	cbnz	r4, 800607c <_malloc_r+0x90>
 8006024:	4629      	mov	r1, r5
 8006026:	4638      	mov	r0, r7
 8006028:	f7ff ffc0 	bl	8005fac <sbrk_aligned>
 800602c:	1c43      	adds	r3, r0, #1
 800602e:	4604      	mov	r4, r0
 8006030:	d155      	bne.n	80060de <_malloc_r+0xf2>
 8006032:	f8d8 4000 	ldr.w	r4, [r8]
 8006036:	4626      	mov	r6, r4
 8006038:	2e00      	cmp	r6, #0
 800603a:	d145      	bne.n	80060c8 <_malloc_r+0xdc>
 800603c:	2c00      	cmp	r4, #0
 800603e:	d048      	beq.n	80060d2 <_malloc_r+0xe6>
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	4631      	mov	r1, r6
 8006044:	4638      	mov	r0, r7
 8006046:	eb04 0903 	add.w	r9, r4, r3
 800604a:	f000 fb5d 	bl	8006708 <_sbrk_r>
 800604e:	4581      	cmp	r9, r0
 8006050:	d13f      	bne.n	80060d2 <_malloc_r+0xe6>
 8006052:	6821      	ldr	r1, [r4, #0]
 8006054:	1a6d      	subs	r5, r5, r1
 8006056:	4629      	mov	r1, r5
 8006058:	4638      	mov	r0, r7
 800605a:	f7ff ffa7 	bl	8005fac <sbrk_aligned>
 800605e:	3001      	adds	r0, #1
 8006060:	d037      	beq.n	80060d2 <_malloc_r+0xe6>
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	442b      	add	r3, r5
 8006066:	6023      	str	r3, [r4, #0]
 8006068:	f8d8 3000 	ldr.w	r3, [r8]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d038      	beq.n	80060e2 <_malloc_r+0xf6>
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	42a2      	cmp	r2, r4
 8006074:	d12b      	bne.n	80060ce <_malloc_r+0xe2>
 8006076:	2200      	movs	r2, #0
 8006078:	605a      	str	r2, [r3, #4]
 800607a:	e00f      	b.n	800609c <_malloc_r+0xb0>
 800607c:	6822      	ldr	r2, [r4, #0]
 800607e:	1b52      	subs	r2, r2, r5
 8006080:	d41f      	bmi.n	80060c2 <_malloc_r+0xd6>
 8006082:	2a0b      	cmp	r2, #11
 8006084:	d917      	bls.n	80060b6 <_malloc_r+0xca>
 8006086:	1961      	adds	r1, r4, r5
 8006088:	42a3      	cmp	r3, r4
 800608a:	6025      	str	r5, [r4, #0]
 800608c:	bf18      	it	ne
 800608e:	6059      	strne	r1, [r3, #4]
 8006090:	6863      	ldr	r3, [r4, #4]
 8006092:	bf08      	it	eq
 8006094:	f8c8 1000 	streq.w	r1, [r8]
 8006098:	5162      	str	r2, [r4, r5]
 800609a:	604b      	str	r3, [r1, #4]
 800609c:	4638      	mov	r0, r7
 800609e:	f104 060b 	add.w	r6, r4, #11
 80060a2:	f000 f829 	bl	80060f8 <__malloc_unlock>
 80060a6:	f026 0607 	bic.w	r6, r6, #7
 80060aa:	1d23      	adds	r3, r4, #4
 80060ac:	1af2      	subs	r2, r6, r3
 80060ae:	d0ae      	beq.n	800600e <_malloc_r+0x22>
 80060b0:	1b9b      	subs	r3, r3, r6
 80060b2:	50a3      	str	r3, [r4, r2]
 80060b4:	e7ab      	b.n	800600e <_malloc_r+0x22>
 80060b6:	42a3      	cmp	r3, r4
 80060b8:	6862      	ldr	r2, [r4, #4]
 80060ba:	d1dd      	bne.n	8006078 <_malloc_r+0x8c>
 80060bc:	f8c8 2000 	str.w	r2, [r8]
 80060c0:	e7ec      	b.n	800609c <_malloc_r+0xb0>
 80060c2:	4623      	mov	r3, r4
 80060c4:	6864      	ldr	r4, [r4, #4]
 80060c6:	e7ac      	b.n	8006022 <_malloc_r+0x36>
 80060c8:	4634      	mov	r4, r6
 80060ca:	6876      	ldr	r6, [r6, #4]
 80060cc:	e7b4      	b.n	8006038 <_malloc_r+0x4c>
 80060ce:	4613      	mov	r3, r2
 80060d0:	e7cc      	b.n	800606c <_malloc_r+0x80>
 80060d2:	230c      	movs	r3, #12
 80060d4:	603b      	str	r3, [r7, #0]
 80060d6:	4638      	mov	r0, r7
 80060d8:	f000 f80e 	bl	80060f8 <__malloc_unlock>
 80060dc:	e797      	b.n	800600e <_malloc_r+0x22>
 80060de:	6025      	str	r5, [r4, #0]
 80060e0:	e7dc      	b.n	800609c <_malloc_r+0xb0>
 80060e2:	605b      	str	r3, [r3, #4]
 80060e4:	deff      	udf	#255	; 0xff
 80060e6:	bf00      	nop
 80060e8:	20000abc 	.word	0x20000abc

080060ec <__malloc_lock>:
 80060ec:	4801      	ldr	r0, [pc, #4]	; (80060f4 <__malloc_lock+0x8>)
 80060ee:	f7ff bf01 	b.w	8005ef4 <__retarget_lock_acquire_recursive>
 80060f2:	bf00      	nop
 80060f4:	20000ab8 	.word	0x20000ab8

080060f8 <__malloc_unlock>:
 80060f8:	4801      	ldr	r0, [pc, #4]	; (8006100 <__malloc_unlock+0x8>)
 80060fa:	f7ff befc 	b.w	8005ef6 <__retarget_lock_release_recursive>
 80060fe:	bf00      	nop
 8006100:	20000ab8 	.word	0x20000ab8

08006104 <__ssputs_r>:
 8006104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006108:	688e      	ldr	r6, [r1, #8]
 800610a:	461f      	mov	r7, r3
 800610c:	42be      	cmp	r6, r7
 800610e:	680b      	ldr	r3, [r1, #0]
 8006110:	4682      	mov	sl, r0
 8006112:	460c      	mov	r4, r1
 8006114:	4690      	mov	r8, r2
 8006116:	d82c      	bhi.n	8006172 <__ssputs_r+0x6e>
 8006118:	898a      	ldrh	r2, [r1, #12]
 800611a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800611e:	d026      	beq.n	800616e <__ssputs_r+0x6a>
 8006120:	6965      	ldr	r5, [r4, #20]
 8006122:	6909      	ldr	r1, [r1, #16]
 8006124:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006128:	eba3 0901 	sub.w	r9, r3, r1
 800612c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006130:	1c7b      	adds	r3, r7, #1
 8006132:	444b      	add	r3, r9
 8006134:	106d      	asrs	r5, r5, #1
 8006136:	429d      	cmp	r5, r3
 8006138:	bf38      	it	cc
 800613a:	461d      	movcc	r5, r3
 800613c:	0553      	lsls	r3, r2, #21
 800613e:	d527      	bpl.n	8006190 <__ssputs_r+0x8c>
 8006140:	4629      	mov	r1, r5
 8006142:	f7ff ff53 	bl	8005fec <_malloc_r>
 8006146:	4606      	mov	r6, r0
 8006148:	b360      	cbz	r0, 80061a4 <__ssputs_r+0xa0>
 800614a:	6921      	ldr	r1, [r4, #16]
 800614c:	464a      	mov	r2, r9
 800614e:	f7ff fed3 	bl	8005ef8 <memcpy>
 8006152:	89a3      	ldrh	r3, [r4, #12]
 8006154:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615c:	81a3      	strh	r3, [r4, #12]
 800615e:	6126      	str	r6, [r4, #16]
 8006160:	6165      	str	r5, [r4, #20]
 8006162:	444e      	add	r6, r9
 8006164:	eba5 0509 	sub.w	r5, r5, r9
 8006168:	6026      	str	r6, [r4, #0]
 800616a:	60a5      	str	r5, [r4, #8]
 800616c:	463e      	mov	r6, r7
 800616e:	42be      	cmp	r6, r7
 8006170:	d900      	bls.n	8006174 <__ssputs_r+0x70>
 8006172:	463e      	mov	r6, r7
 8006174:	6820      	ldr	r0, [r4, #0]
 8006176:	4632      	mov	r2, r6
 8006178:	4641      	mov	r1, r8
 800617a:	f000 faab 	bl	80066d4 <memmove>
 800617e:	68a3      	ldr	r3, [r4, #8]
 8006180:	1b9b      	subs	r3, r3, r6
 8006182:	60a3      	str	r3, [r4, #8]
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	4433      	add	r3, r6
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	2000      	movs	r0, #0
 800618c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006190:	462a      	mov	r2, r5
 8006192:	f000 fac9 	bl	8006728 <_realloc_r>
 8006196:	4606      	mov	r6, r0
 8006198:	2800      	cmp	r0, #0
 800619a:	d1e0      	bne.n	800615e <__ssputs_r+0x5a>
 800619c:	6921      	ldr	r1, [r4, #16]
 800619e:	4650      	mov	r0, sl
 80061a0:	f7ff feb8 	bl	8005f14 <_free_r>
 80061a4:	230c      	movs	r3, #12
 80061a6:	f8ca 3000 	str.w	r3, [sl]
 80061aa:	89a3      	ldrh	r3, [r4, #12]
 80061ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061b0:	81a3      	strh	r3, [r4, #12]
 80061b2:	f04f 30ff 	mov.w	r0, #4294967295
 80061b6:	e7e9      	b.n	800618c <__ssputs_r+0x88>

080061b8 <_svfiprintf_r>:
 80061b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061bc:	4698      	mov	r8, r3
 80061be:	898b      	ldrh	r3, [r1, #12]
 80061c0:	061b      	lsls	r3, r3, #24
 80061c2:	b09d      	sub	sp, #116	; 0x74
 80061c4:	4607      	mov	r7, r0
 80061c6:	460d      	mov	r5, r1
 80061c8:	4614      	mov	r4, r2
 80061ca:	d50e      	bpl.n	80061ea <_svfiprintf_r+0x32>
 80061cc:	690b      	ldr	r3, [r1, #16]
 80061ce:	b963      	cbnz	r3, 80061ea <_svfiprintf_r+0x32>
 80061d0:	2140      	movs	r1, #64	; 0x40
 80061d2:	f7ff ff0b 	bl	8005fec <_malloc_r>
 80061d6:	6028      	str	r0, [r5, #0]
 80061d8:	6128      	str	r0, [r5, #16]
 80061da:	b920      	cbnz	r0, 80061e6 <_svfiprintf_r+0x2e>
 80061dc:	230c      	movs	r3, #12
 80061de:	603b      	str	r3, [r7, #0]
 80061e0:	f04f 30ff 	mov.w	r0, #4294967295
 80061e4:	e0d0      	b.n	8006388 <_svfiprintf_r+0x1d0>
 80061e6:	2340      	movs	r3, #64	; 0x40
 80061e8:	616b      	str	r3, [r5, #20]
 80061ea:	2300      	movs	r3, #0
 80061ec:	9309      	str	r3, [sp, #36]	; 0x24
 80061ee:	2320      	movs	r3, #32
 80061f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80061f8:	2330      	movs	r3, #48	; 0x30
 80061fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80063a0 <_svfiprintf_r+0x1e8>
 80061fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006202:	f04f 0901 	mov.w	r9, #1
 8006206:	4623      	mov	r3, r4
 8006208:	469a      	mov	sl, r3
 800620a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800620e:	b10a      	cbz	r2, 8006214 <_svfiprintf_r+0x5c>
 8006210:	2a25      	cmp	r2, #37	; 0x25
 8006212:	d1f9      	bne.n	8006208 <_svfiprintf_r+0x50>
 8006214:	ebba 0b04 	subs.w	fp, sl, r4
 8006218:	d00b      	beq.n	8006232 <_svfiprintf_r+0x7a>
 800621a:	465b      	mov	r3, fp
 800621c:	4622      	mov	r2, r4
 800621e:	4629      	mov	r1, r5
 8006220:	4638      	mov	r0, r7
 8006222:	f7ff ff6f 	bl	8006104 <__ssputs_r>
 8006226:	3001      	adds	r0, #1
 8006228:	f000 80a9 	beq.w	800637e <_svfiprintf_r+0x1c6>
 800622c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800622e:	445a      	add	r2, fp
 8006230:	9209      	str	r2, [sp, #36]	; 0x24
 8006232:	f89a 3000 	ldrb.w	r3, [sl]
 8006236:	2b00      	cmp	r3, #0
 8006238:	f000 80a1 	beq.w	800637e <_svfiprintf_r+0x1c6>
 800623c:	2300      	movs	r3, #0
 800623e:	f04f 32ff 	mov.w	r2, #4294967295
 8006242:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006246:	f10a 0a01 	add.w	sl, sl, #1
 800624a:	9304      	str	r3, [sp, #16]
 800624c:	9307      	str	r3, [sp, #28]
 800624e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006252:	931a      	str	r3, [sp, #104]	; 0x68
 8006254:	4654      	mov	r4, sl
 8006256:	2205      	movs	r2, #5
 8006258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800625c:	4850      	ldr	r0, [pc, #320]	; (80063a0 <_svfiprintf_r+0x1e8>)
 800625e:	f7f9 ffb7 	bl	80001d0 <memchr>
 8006262:	9a04      	ldr	r2, [sp, #16]
 8006264:	b9d8      	cbnz	r0, 800629e <_svfiprintf_r+0xe6>
 8006266:	06d0      	lsls	r0, r2, #27
 8006268:	bf44      	itt	mi
 800626a:	2320      	movmi	r3, #32
 800626c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006270:	0711      	lsls	r1, r2, #28
 8006272:	bf44      	itt	mi
 8006274:	232b      	movmi	r3, #43	; 0x2b
 8006276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800627a:	f89a 3000 	ldrb.w	r3, [sl]
 800627e:	2b2a      	cmp	r3, #42	; 0x2a
 8006280:	d015      	beq.n	80062ae <_svfiprintf_r+0xf6>
 8006282:	9a07      	ldr	r2, [sp, #28]
 8006284:	4654      	mov	r4, sl
 8006286:	2000      	movs	r0, #0
 8006288:	f04f 0c0a 	mov.w	ip, #10
 800628c:	4621      	mov	r1, r4
 800628e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006292:	3b30      	subs	r3, #48	; 0x30
 8006294:	2b09      	cmp	r3, #9
 8006296:	d94d      	bls.n	8006334 <_svfiprintf_r+0x17c>
 8006298:	b1b0      	cbz	r0, 80062c8 <_svfiprintf_r+0x110>
 800629a:	9207      	str	r2, [sp, #28]
 800629c:	e014      	b.n	80062c8 <_svfiprintf_r+0x110>
 800629e:	eba0 0308 	sub.w	r3, r0, r8
 80062a2:	fa09 f303 	lsl.w	r3, r9, r3
 80062a6:	4313      	orrs	r3, r2
 80062a8:	9304      	str	r3, [sp, #16]
 80062aa:	46a2      	mov	sl, r4
 80062ac:	e7d2      	b.n	8006254 <_svfiprintf_r+0x9c>
 80062ae:	9b03      	ldr	r3, [sp, #12]
 80062b0:	1d19      	adds	r1, r3, #4
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	9103      	str	r1, [sp, #12]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	bfbb      	ittet	lt
 80062ba:	425b      	neglt	r3, r3
 80062bc:	f042 0202 	orrlt.w	r2, r2, #2
 80062c0:	9307      	strge	r3, [sp, #28]
 80062c2:	9307      	strlt	r3, [sp, #28]
 80062c4:	bfb8      	it	lt
 80062c6:	9204      	strlt	r2, [sp, #16]
 80062c8:	7823      	ldrb	r3, [r4, #0]
 80062ca:	2b2e      	cmp	r3, #46	; 0x2e
 80062cc:	d10c      	bne.n	80062e8 <_svfiprintf_r+0x130>
 80062ce:	7863      	ldrb	r3, [r4, #1]
 80062d0:	2b2a      	cmp	r3, #42	; 0x2a
 80062d2:	d134      	bne.n	800633e <_svfiprintf_r+0x186>
 80062d4:	9b03      	ldr	r3, [sp, #12]
 80062d6:	1d1a      	adds	r2, r3, #4
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	9203      	str	r2, [sp, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	bfb8      	it	lt
 80062e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80062e4:	3402      	adds	r4, #2
 80062e6:	9305      	str	r3, [sp, #20]
 80062e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80063b0 <_svfiprintf_r+0x1f8>
 80062ec:	7821      	ldrb	r1, [r4, #0]
 80062ee:	2203      	movs	r2, #3
 80062f0:	4650      	mov	r0, sl
 80062f2:	f7f9 ff6d 	bl	80001d0 <memchr>
 80062f6:	b138      	cbz	r0, 8006308 <_svfiprintf_r+0x150>
 80062f8:	9b04      	ldr	r3, [sp, #16]
 80062fa:	eba0 000a 	sub.w	r0, r0, sl
 80062fe:	2240      	movs	r2, #64	; 0x40
 8006300:	4082      	lsls	r2, r0
 8006302:	4313      	orrs	r3, r2
 8006304:	3401      	adds	r4, #1
 8006306:	9304      	str	r3, [sp, #16]
 8006308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800630c:	4825      	ldr	r0, [pc, #148]	; (80063a4 <_svfiprintf_r+0x1ec>)
 800630e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006312:	2206      	movs	r2, #6
 8006314:	f7f9 ff5c 	bl	80001d0 <memchr>
 8006318:	2800      	cmp	r0, #0
 800631a:	d038      	beq.n	800638e <_svfiprintf_r+0x1d6>
 800631c:	4b22      	ldr	r3, [pc, #136]	; (80063a8 <_svfiprintf_r+0x1f0>)
 800631e:	bb1b      	cbnz	r3, 8006368 <_svfiprintf_r+0x1b0>
 8006320:	9b03      	ldr	r3, [sp, #12]
 8006322:	3307      	adds	r3, #7
 8006324:	f023 0307 	bic.w	r3, r3, #7
 8006328:	3308      	adds	r3, #8
 800632a:	9303      	str	r3, [sp, #12]
 800632c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800632e:	4433      	add	r3, r6
 8006330:	9309      	str	r3, [sp, #36]	; 0x24
 8006332:	e768      	b.n	8006206 <_svfiprintf_r+0x4e>
 8006334:	fb0c 3202 	mla	r2, ip, r2, r3
 8006338:	460c      	mov	r4, r1
 800633a:	2001      	movs	r0, #1
 800633c:	e7a6      	b.n	800628c <_svfiprintf_r+0xd4>
 800633e:	2300      	movs	r3, #0
 8006340:	3401      	adds	r4, #1
 8006342:	9305      	str	r3, [sp, #20]
 8006344:	4619      	mov	r1, r3
 8006346:	f04f 0c0a 	mov.w	ip, #10
 800634a:	4620      	mov	r0, r4
 800634c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006350:	3a30      	subs	r2, #48	; 0x30
 8006352:	2a09      	cmp	r2, #9
 8006354:	d903      	bls.n	800635e <_svfiprintf_r+0x1a6>
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0c6      	beq.n	80062e8 <_svfiprintf_r+0x130>
 800635a:	9105      	str	r1, [sp, #20]
 800635c:	e7c4      	b.n	80062e8 <_svfiprintf_r+0x130>
 800635e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006362:	4604      	mov	r4, r0
 8006364:	2301      	movs	r3, #1
 8006366:	e7f0      	b.n	800634a <_svfiprintf_r+0x192>
 8006368:	ab03      	add	r3, sp, #12
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	462a      	mov	r2, r5
 800636e:	4b0f      	ldr	r3, [pc, #60]	; (80063ac <_svfiprintf_r+0x1f4>)
 8006370:	a904      	add	r1, sp, #16
 8006372:	4638      	mov	r0, r7
 8006374:	f3af 8000 	nop.w
 8006378:	1c42      	adds	r2, r0, #1
 800637a:	4606      	mov	r6, r0
 800637c:	d1d6      	bne.n	800632c <_svfiprintf_r+0x174>
 800637e:	89ab      	ldrh	r3, [r5, #12]
 8006380:	065b      	lsls	r3, r3, #25
 8006382:	f53f af2d 	bmi.w	80061e0 <_svfiprintf_r+0x28>
 8006386:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006388:	b01d      	add	sp, #116	; 0x74
 800638a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800638e:	ab03      	add	r3, sp, #12
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	462a      	mov	r2, r5
 8006394:	4b05      	ldr	r3, [pc, #20]	; (80063ac <_svfiprintf_r+0x1f4>)
 8006396:	a904      	add	r1, sp, #16
 8006398:	4638      	mov	r0, r7
 800639a:	f000 f879 	bl	8006490 <_printf_i>
 800639e:	e7eb      	b.n	8006378 <_svfiprintf_r+0x1c0>
 80063a0:	08006884 	.word	0x08006884
 80063a4:	0800688e 	.word	0x0800688e
 80063a8:	00000000 	.word	0x00000000
 80063ac:	08006105 	.word	0x08006105
 80063b0:	0800688a 	.word	0x0800688a

080063b4 <_printf_common>:
 80063b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b8:	4616      	mov	r6, r2
 80063ba:	4699      	mov	r9, r3
 80063bc:	688a      	ldr	r2, [r1, #8]
 80063be:	690b      	ldr	r3, [r1, #16]
 80063c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063c4:	4293      	cmp	r3, r2
 80063c6:	bfb8      	it	lt
 80063c8:	4613      	movlt	r3, r2
 80063ca:	6033      	str	r3, [r6, #0]
 80063cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063d0:	4607      	mov	r7, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	b10a      	cbz	r2, 80063da <_printf_common+0x26>
 80063d6:	3301      	adds	r3, #1
 80063d8:	6033      	str	r3, [r6, #0]
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	0699      	lsls	r1, r3, #26
 80063de:	bf42      	ittt	mi
 80063e0:	6833      	ldrmi	r3, [r6, #0]
 80063e2:	3302      	addmi	r3, #2
 80063e4:	6033      	strmi	r3, [r6, #0]
 80063e6:	6825      	ldr	r5, [r4, #0]
 80063e8:	f015 0506 	ands.w	r5, r5, #6
 80063ec:	d106      	bne.n	80063fc <_printf_common+0x48>
 80063ee:	f104 0a19 	add.w	sl, r4, #25
 80063f2:	68e3      	ldr	r3, [r4, #12]
 80063f4:	6832      	ldr	r2, [r6, #0]
 80063f6:	1a9b      	subs	r3, r3, r2
 80063f8:	42ab      	cmp	r3, r5
 80063fa:	dc26      	bgt.n	800644a <_printf_common+0x96>
 80063fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006400:	1e13      	subs	r3, r2, #0
 8006402:	6822      	ldr	r2, [r4, #0]
 8006404:	bf18      	it	ne
 8006406:	2301      	movne	r3, #1
 8006408:	0692      	lsls	r2, r2, #26
 800640a:	d42b      	bmi.n	8006464 <_printf_common+0xb0>
 800640c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006410:	4649      	mov	r1, r9
 8006412:	4638      	mov	r0, r7
 8006414:	47c0      	blx	r8
 8006416:	3001      	adds	r0, #1
 8006418:	d01e      	beq.n	8006458 <_printf_common+0xa4>
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	6922      	ldr	r2, [r4, #16]
 800641e:	f003 0306 	and.w	r3, r3, #6
 8006422:	2b04      	cmp	r3, #4
 8006424:	bf02      	ittt	eq
 8006426:	68e5      	ldreq	r5, [r4, #12]
 8006428:	6833      	ldreq	r3, [r6, #0]
 800642a:	1aed      	subeq	r5, r5, r3
 800642c:	68a3      	ldr	r3, [r4, #8]
 800642e:	bf0c      	ite	eq
 8006430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006434:	2500      	movne	r5, #0
 8006436:	4293      	cmp	r3, r2
 8006438:	bfc4      	itt	gt
 800643a:	1a9b      	subgt	r3, r3, r2
 800643c:	18ed      	addgt	r5, r5, r3
 800643e:	2600      	movs	r6, #0
 8006440:	341a      	adds	r4, #26
 8006442:	42b5      	cmp	r5, r6
 8006444:	d11a      	bne.n	800647c <_printf_common+0xc8>
 8006446:	2000      	movs	r0, #0
 8006448:	e008      	b.n	800645c <_printf_common+0xa8>
 800644a:	2301      	movs	r3, #1
 800644c:	4652      	mov	r2, sl
 800644e:	4649      	mov	r1, r9
 8006450:	4638      	mov	r0, r7
 8006452:	47c0      	blx	r8
 8006454:	3001      	adds	r0, #1
 8006456:	d103      	bne.n	8006460 <_printf_common+0xac>
 8006458:	f04f 30ff 	mov.w	r0, #4294967295
 800645c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006460:	3501      	adds	r5, #1
 8006462:	e7c6      	b.n	80063f2 <_printf_common+0x3e>
 8006464:	18e1      	adds	r1, r4, r3
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	2030      	movs	r0, #48	; 0x30
 800646a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800646e:	4422      	add	r2, r4
 8006470:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006474:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006478:	3302      	adds	r3, #2
 800647a:	e7c7      	b.n	800640c <_printf_common+0x58>
 800647c:	2301      	movs	r3, #1
 800647e:	4622      	mov	r2, r4
 8006480:	4649      	mov	r1, r9
 8006482:	4638      	mov	r0, r7
 8006484:	47c0      	blx	r8
 8006486:	3001      	adds	r0, #1
 8006488:	d0e6      	beq.n	8006458 <_printf_common+0xa4>
 800648a:	3601      	adds	r6, #1
 800648c:	e7d9      	b.n	8006442 <_printf_common+0x8e>
	...

08006490 <_printf_i>:
 8006490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006494:	7e0f      	ldrb	r7, [r1, #24]
 8006496:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006498:	2f78      	cmp	r7, #120	; 0x78
 800649a:	4691      	mov	r9, r2
 800649c:	4680      	mov	r8, r0
 800649e:	460c      	mov	r4, r1
 80064a0:	469a      	mov	sl, r3
 80064a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064a6:	d807      	bhi.n	80064b8 <_printf_i+0x28>
 80064a8:	2f62      	cmp	r7, #98	; 0x62
 80064aa:	d80a      	bhi.n	80064c2 <_printf_i+0x32>
 80064ac:	2f00      	cmp	r7, #0
 80064ae:	f000 80d4 	beq.w	800665a <_printf_i+0x1ca>
 80064b2:	2f58      	cmp	r7, #88	; 0x58
 80064b4:	f000 80c0 	beq.w	8006638 <_printf_i+0x1a8>
 80064b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064c0:	e03a      	b.n	8006538 <_printf_i+0xa8>
 80064c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064c6:	2b15      	cmp	r3, #21
 80064c8:	d8f6      	bhi.n	80064b8 <_printf_i+0x28>
 80064ca:	a101      	add	r1, pc, #4	; (adr r1, 80064d0 <_printf_i+0x40>)
 80064cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064d0:	08006529 	.word	0x08006529
 80064d4:	0800653d 	.word	0x0800653d
 80064d8:	080064b9 	.word	0x080064b9
 80064dc:	080064b9 	.word	0x080064b9
 80064e0:	080064b9 	.word	0x080064b9
 80064e4:	080064b9 	.word	0x080064b9
 80064e8:	0800653d 	.word	0x0800653d
 80064ec:	080064b9 	.word	0x080064b9
 80064f0:	080064b9 	.word	0x080064b9
 80064f4:	080064b9 	.word	0x080064b9
 80064f8:	080064b9 	.word	0x080064b9
 80064fc:	08006641 	.word	0x08006641
 8006500:	08006569 	.word	0x08006569
 8006504:	080065fb 	.word	0x080065fb
 8006508:	080064b9 	.word	0x080064b9
 800650c:	080064b9 	.word	0x080064b9
 8006510:	08006663 	.word	0x08006663
 8006514:	080064b9 	.word	0x080064b9
 8006518:	08006569 	.word	0x08006569
 800651c:	080064b9 	.word	0x080064b9
 8006520:	080064b9 	.word	0x080064b9
 8006524:	08006603 	.word	0x08006603
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	1d1a      	adds	r2, r3, #4
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	602a      	str	r2, [r5, #0]
 8006530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006534:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006538:	2301      	movs	r3, #1
 800653a:	e09f      	b.n	800667c <_printf_i+0x1ec>
 800653c:	6820      	ldr	r0, [r4, #0]
 800653e:	682b      	ldr	r3, [r5, #0]
 8006540:	0607      	lsls	r7, r0, #24
 8006542:	f103 0104 	add.w	r1, r3, #4
 8006546:	6029      	str	r1, [r5, #0]
 8006548:	d501      	bpl.n	800654e <_printf_i+0xbe>
 800654a:	681e      	ldr	r6, [r3, #0]
 800654c:	e003      	b.n	8006556 <_printf_i+0xc6>
 800654e:	0646      	lsls	r6, r0, #25
 8006550:	d5fb      	bpl.n	800654a <_printf_i+0xba>
 8006552:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006556:	2e00      	cmp	r6, #0
 8006558:	da03      	bge.n	8006562 <_printf_i+0xd2>
 800655a:	232d      	movs	r3, #45	; 0x2d
 800655c:	4276      	negs	r6, r6
 800655e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006562:	485a      	ldr	r0, [pc, #360]	; (80066cc <_printf_i+0x23c>)
 8006564:	230a      	movs	r3, #10
 8006566:	e012      	b.n	800658e <_printf_i+0xfe>
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	6820      	ldr	r0, [r4, #0]
 800656c:	1d19      	adds	r1, r3, #4
 800656e:	6029      	str	r1, [r5, #0]
 8006570:	0605      	lsls	r5, r0, #24
 8006572:	d501      	bpl.n	8006578 <_printf_i+0xe8>
 8006574:	681e      	ldr	r6, [r3, #0]
 8006576:	e002      	b.n	800657e <_printf_i+0xee>
 8006578:	0641      	lsls	r1, r0, #25
 800657a:	d5fb      	bpl.n	8006574 <_printf_i+0xe4>
 800657c:	881e      	ldrh	r6, [r3, #0]
 800657e:	4853      	ldr	r0, [pc, #332]	; (80066cc <_printf_i+0x23c>)
 8006580:	2f6f      	cmp	r7, #111	; 0x6f
 8006582:	bf0c      	ite	eq
 8006584:	2308      	moveq	r3, #8
 8006586:	230a      	movne	r3, #10
 8006588:	2100      	movs	r1, #0
 800658a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800658e:	6865      	ldr	r5, [r4, #4]
 8006590:	60a5      	str	r5, [r4, #8]
 8006592:	2d00      	cmp	r5, #0
 8006594:	bfa2      	ittt	ge
 8006596:	6821      	ldrge	r1, [r4, #0]
 8006598:	f021 0104 	bicge.w	r1, r1, #4
 800659c:	6021      	strge	r1, [r4, #0]
 800659e:	b90e      	cbnz	r6, 80065a4 <_printf_i+0x114>
 80065a0:	2d00      	cmp	r5, #0
 80065a2:	d04b      	beq.n	800663c <_printf_i+0x1ac>
 80065a4:	4615      	mov	r5, r2
 80065a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80065aa:	fb03 6711 	mls	r7, r3, r1, r6
 80065ae:	5dc7      	ldrb	r7, [r0, r7]
 80065b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065b4:	4637      	mov	r7, r6
 80065b6:	42bb      	cmp	r3, r7
 80065b8:	460e      	mov	r6, r1
 80065ba:	d9f4      	bls.n	80065a6 <_printf_i+0x116>
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d10b      	bne.n	80065d8 <_printf_i+0x148>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	07de      	lsls	r6, r3, #31
 80065c4:	d508      	bpl.n	80065d8 <_printf_i+0x148>
 80065c6:	6923      	ldr	r3, [r4, #16]
 80065c8:	6861      	ldr	r1, [r4, #4]
 80065ca:	4299      	cmp	r1, r3
 80065cc:	bfde      	ittt	le
 80065ce:	2330      	movle	r3, #48	; 0x30
 80065d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065d8:	1b52      	subs	r2, r2, r5
 80065da:	6122      	str	r2, [r4, #16]
 80065dc:	f8cd a000 	str.w	sl, [sp]
 80065e0:	464b      	mov	r3, r9
 80065e2:	aa03      	add	r2, sp, #12
 80065e4:	4621      	mov	r1, r4
 80065e6:	4640      	mov	r0, r8
 80065e8:	f7ff fee4 	bl	80063b4 <_printf_common>
 80065ec:	3001      	adds	r0, #1
 80065ee:	d14a      	bne.n	8006686 <_printf_i+0x1f6>
 80065f0:	f04f 30ff 	mov.w	r0, #4294967295
 80065f4:	b004      	add	sp, #16
 80065f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	f043 0320 	orr.w	r3, r3, #32
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	4833      	ldr	r0, [pc, #204]	; (80066d0 <_printf_i+0x240>)
 8006604:	2778      	movs	r7, #120	; 0x78
 8006606:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	6829      	ldr	r1, [r5, #0]
 800660e:	061f      	lsls	r7, r3, #24
 8006610:	f851 6b04 	ldr.w	r6, [r1], #4
 8006614:	d402      	bmi.n	800661c <_printf_i+0x18c>
 8006616:	065f      	lsls	r7, r3, #25
 8006618:	bf48      	it	mi
 800661a:	b2b6      	uxthmi	r6, r6
 800661c:	07df      	lsls	r7, r3, #31
 800661e:	bf48      	it	mi
 8006620:	f043 0320 	orrmi.w	r3, r3, #32
 8006624:	6029      	str	r1, [r5, #0]
 8006626:	bf48      	it	mi
 8006628:	6023      	strmi	r3, [r4, #0]
 800662a:	b91e      	cbnz	r6, 8006634 <_printf_i+0x1a4>
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	f023 0320 	bic.w	r3, r3, #32
 8006632:	6023      	str	r3, [r4, #0]
 8006634:	2310      	movs	r3, #16
 8006636:	e7a7      	b.n	8006588 <_printf_i+0xf8>
 8006638:	4824      	ldr	r0, [pc, #144]	; (80066cc <_printf_i+0x23c>)
 800663a:	e7e4      	b.n	8006606 <_printf_i+0x176>
 800663c:	4615      	mov	r5, r2
 800663e:	e7bd      	b.n	80065bc <_printf_i+0x12c>
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	6826      	ldr	r6, [r4, #0]
 8006644:	6961      	ldr	r1, [r4, #20]
 8006646:	1d18      	adds	r0, r3, #4
 8006648:	6028      	str	r0, [r5, #0]
 800664a:	0635      	lsls	r5, r6, #24
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	d501      	bpl.n	8006654 <_printf_i+0x1c4>
 8006650:	6019      	str	r1, [r3, #0]
 8006652:	e002      	b.n	800665a <_printf_i+0x1ca>
 8006654:	0670      	lsls	r0, r6, #25
 8006656:	d5fb      	bpl.n	8006650 <_printf_i+0x1c0>
 8006658:	8019      	strh	r1, [r3, #0]
 800665a:	2300      	movs	r3, #0
 800665c:	6123      	str	r3, [r4, #16]
 800665e:	4615      	mov	r5, r2
 8006660:	e7bc      	b.n	80065dc <_printf_i+0x14c>
 8006662:	682b      	ldr	r3, [r5, #0]
 8006664:	1d1a      	adds	r2, r3, #4
 8006666:	602a      	str	r2, [r5, #0]
 8006668:	681d      	ldr	r5, [r3, #0]
 800666a:	6862      	ldr	r2, [r4, #4]
 800666c:	2100      	movs	r1, #0
 800666e:	4628      	mov	r0, r5
 8006670:	f7f9 fdae 	bl	80001d0 <memchr>
 8006674:	b108      	cbz	r0, 800667a <_printf_i+0x1ea>
 8006676:	1b40      	subs	r0, r0, r5
 8006678:	6060      	str	r0, [r4, #4]
 800667a:	6863      	ldr	r3, [r4, #4]
 800667c:	6123      	str	r3, [r4, #16]
 800667e:	2300      	movs	r3, #0
 8006680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006684:	e7aa      	b.n	80065dc <_printf_i+0x14c>
 8006686:	6923      	ldr	r3, [r4, #16]
 8006688:	462a      	mov	r2, r5
 800668a:	4649      	mov	r1, r9
 800668c:	4640      	mov	r0, r8
 800668e:	47d0      	blx	sl
 8006690:	3001      	adds	r0, #1
 8006692:	d0ad      	beq.n	80065f0 <_printf_i+0x160>
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	079b      	lsls	r3, r3, #30
 8006698:	d413      	bmi.n	80066c2 <_printf_i+0x232>
 800669a:	68e0      	ldr	r0, [r4, #12]
 800669c:	9b03      	ldr	r3, [sp, #12]
 800669e:	4298      	cmp	r0, r3
 80066a0:	bfb8      	it	lt
 80066a2:	4618      	movlt	r0, r3
 80066a4:	e7a6      	b.n	80065f4 <_printf_i+0x164>
 80066a6:	2301      	movs	r3, #1
 80066a8:	4632      	mov	r2, r6
 80066aa:	4649      	mov	r1, r9
 80066ac:	4640      	mov	r0, r8
 80066ae:	47d0      	blx	sl
 80066b0:	3001      	adds	r0, #1
 80066b2:	d09d      	beq.n	80065f0 <_printf_i+0x160>
 80066b4:	3501      	adds	r5, #1
 80066b6:	68e3      	ldr	r3, [r4, #12]
 80066b8:	9903      	ldr	r1, [sp, #12]
 80066ba:	1a5b      	subs	r3, r3, r1
 80066bc:	42ab      	cmp	r3, r5
 80066be:	dcf2      	bgt.n	80066a6 <_printf_i+0x216>
 80066c0:	e7eb      	b.n	800669a <_printf_i+0x20a>
 80066c2:	2500      	movs	r5, #0
 80066c4:	f104 0619 	add.w	r6, r4, #25
 80066c8:	e7f5      	b.n	80066b6 <_printf_i+0x226>
 80066ca:	bf00      	nop
 80066cc:	08006895 	.word	0x08006895
 80066d0:	080068a6 	.word	0x080068a6

080066d4 <memmove>:
 80066d4:	4288      	cmp	r0, r1
 80066d6:	b510      	push	{r4, lr}
 80066d8:	eb01 0402 	add.w	r4, r1, r2
 80066dc:	d902      	bls.n	80066e4 <memmove+0x10>
 80066de:	4284      	cmp	r4, r0
 80066e0:	4623      	mov	r3, r4
 80066e2:	d807      	bhi.n	80066f4 <memmove+0x20>
 80066e4:	1e43      	subs	r3, r0, #1
 80066e6:	42a1      	cmp	r1, r4
 80066e8:	d008      	beq.n	80066fc <memmove+0x28>
 80066ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066f2:	e7f8      	b.n	80066e6 <memmove+0x12>
 80066f4:	4402      	add	r2, r0
 80066f6:	4601      	mov	r1, r0
 80066f8:	428a      	cmp	r2, r1
 80066fa:	d100      	bne.n	80066fe <memmove+0x2a>
 80066fc:	bd10      	pop	{r4, pc}
 80066fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006702:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006706:	e7f7      	b.n	80066f8 <memmove+0x24>

08006708 <_sbrk_r>:
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	4d06      	ldr	r5, [pc, #24]	; (8006724 <_sbrk_r+0x1c>)
 800670c:	2300      	movs	r3, #0
 800670e:	4604      	mov	r4, r0
 8006710:	4608      	mov	r0, r1
 8006712:	602b      	str	r3, [r5, #0]
 8006714:	f7fa ff2a 	bl	800156c <_sbrk>
 8006718:	1c43      	adds	r3, r0, #1
 800671a:	d102      	bne.n	8006722 <_sbrk_r+0x1a>
 800671c:	682b      	ldr	r3, [r5, #0]
 800671e:	b103      	cbz	r3, 8006722 <_sbrk_r+0x1a>
 8006720:	6023      	str	r3, [r4, #0]
 8006722:	bd38      	pop	{r3, r4, r5, pc}
 8006724:	20000ab4 	.word	0x20000ab4

08006728 <_realloc_r>:
 8006728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800672c:	4680      	mov	r8, r0
 800672e:	4614      	mov	r4, r2
 8006730:	460e      	mov	r6, r1
 8006732:	b921      	cbnz	r1, 800673e <_realloc_r+0x16>
 8006734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006738:	4611      	mov	r1, r2
 800673a:	f7ff bc57 	b.w	8005fec <_malloc_r>
 800673e:	b92a      	cbnz	r2, 800674c <_realloc_r+0x24>
 8006740:	f7ff fbe8 	bl	8005f14 <_free_r>
 8006744:	4625      	mov	r5, r4
 8006746:	4628      	mov	r0, r5
 8006748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800674c:	f000 f81b 	bl	8006786 <_malloc_usable_size_r>
 8006750:	4284      	cmp	r4, r0
 8006752:	4607      	mov	r7, r0
 8006754:	d802      	bhi.n	800675c <_realloc_r+0x34>
 8006756:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800675a:	d812      	bhi.n	8006782 <_realloc_r+0x5a>
 800675c:	4621      	mov	r1, r4
 800675e:	4640      	mov	r0, r8
 8006760:	f7ff fc44 	bl	8005fec <_malloc_r>
 8006764:	4605      	mov	r5, r0
 8006766:	2800      	cmp	r0, #0
 8006768:	d0ed      	beq.n	8006746 <_realloc_r+0x1e>
 800676a:	42bc      	cmp	r4, r7
 800676c:	4622      	mov	r2, r4
 800676e:	4631      	mov	r1, r6
 8006770:	bf28      	it	cs
 8006772:	463a      	movcs	r2, r7
 8006774:	f7ff fbc0 	bl	8005ef8 <memcpy>
 8006778:	4631      	mov	r1, r6
 800677a:	4640      	mov	r0, r8
 800677c:	f7ff fbca 	bl	8005f14 <_free_r>
 8006780:	e7e1      	b.n	8006746 <_realloc_r+0x1e>
 8006782:	4635      	mov	r5, r6
 8006784:	e7df      	b.n	8006746 <_realloc_r+0x1e>

08006786 <_malloc_usable_size_r>:
 8006786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800678a:	1f18      	subs	r0, r3, #4
 800678c:	2b00      	cmp	r3, #0
 800678e:	bfbc      	itt	lt
 8006790:	580b      	ldrlt	r3, [r1, r0]
 8006792:	18c0      	addlt	r0, r0, r3
 8006794:	4770      	bx	lr
	...

08006798 <trunc>:
 8006798:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800679c:	ec5c bb10 	vmov	fp, ip, d0
 80067a0:	f3cc 500a 	ubfx	r0, ip, #20, #11
 80067a4:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 80067a8:	2913      	cmp	r1, #19
 80067aa:	4664      	mov	r4, ip
 80067ac:	dc11      	bgt.n	80067d2 <trunc+0x3a>
 80067ae:	2900      	cmp	r1, #0
 80067b0:	bfa7      	ittee	ge
 80067b2:	4b15      	ldrge	r3, [pc, #84]	; (8006808 <trunc+0x70>)
 80067b4:	fa43 f101 	asrge.w	r1, r3, r1
 80067b8:	2200      	movlt	r2, #0
 80067ba:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 80067be:	bfa4      	itt	ge
 80067c0:	2200      	movge	r2, #0
 80067c2:	ea01 030c 	andge.w	r3, r1, ip
 80067c6:	4693      	mov	fp, r2
 80067c8:	469c      	mov	ip, r3
 80067ca:	ec4c bb10 	vmov	d0, fp, ip
 80067ce:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 80067d2:	2933      	cmp	r1, #51	; 0x33
 80067d4:	dd0d      	ble.n	80067f2 <trunc+0x5a>
 80067d6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80067da:	d1f6      	bne.n	80067ca <trunc+0x32>
 80067dc:	4663      	mov	r3, ip
 80067de:	ee10 2a10 	vmov	r2, s0
 80067e2:	ee10 0a10 	vmov	r0, s0
 80067e6:	4621      	mov	r1, r4
 80067e8:	f7f9 fd48 	bl	800027c <__adddf3>
 80067ec:	4683      	mov	fp, r0
 80067ee:	468c      	mov	ip, r1
 80067f0:	e7eb      	b.n	80067ca <trunc+0x32>
 80067f2:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 80067f6:	f04f 33ff 	mov.w	r3, #4294967295
 80067fa:	40c3      	lsrs	r3, r0
 80067fc:	ea2b 0603 	bic.w	r6, fp, r3
 8006800:	46b3      	mov	fp, r6
 8006802:	46a4      	mov	ip, r4
 8006804:	e7e1      	b.n	80067ca <trunc+0x32>
 8006806:	bf00      	nop
 8006808:	fff00000 	.word	0xfff00000

0800680c <_init>:
 800680c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800680e:	bf00      	nop
 8006810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006812:	bc08      	pop	{r3}
 8006814:	469e      	mov	lr, r3
 8006816:	4770      	bx	lr

08006818 <_fini>:
 8006818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681a:	bf00      	nop
 800681c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800681e:	bc08      	pop	{r3}
 8006820:	469e      	mov	lr, r3
 8006822:	4770      	bx	lr
